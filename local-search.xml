<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>nginx反向代理</title>
    <link href="/2022/04/07/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <url>/2022/04/07/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1、Mac上nginx容器反向代理本地项目"><a href="#1、Mac上nginx容器反向代理本地项目" class="headerlink" title="1、Mac上nginx容器反向代理本地项目"></a>1、Mac上nginx容器反向代理本地项目</h1><h2 id="1、获取镜像"><a href="#1、获取镜像" class="headerlink" title="1、获取镜像"></a>1、获取镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">root@root ~ % docker pull nginx:perl<br></code></pre></td></tr></table></figure><h2 id="2、复制容器内容"><a href="#2、复制容器内容" class="headerlink" title="2、复制容器内容"></a>2、复制容器内容</h2><h3 id="1-先运行一个nginx容器"><a href="#1-先运行一个nginx容器" class="headerlink" title="(1)先运行一个nginx容器"></a>(1)先运行一个nginx容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@root ~ % docker run -p 80:80 -d nginx:perl --name nginx-demo<br></code></pre></td></tr></table></figure><h3 id="2-进入容器内部"><a href="#2-进入容器内部" class="headerlink" title="(2)进入容器内部"></a>(2)进入容器内部</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@root ~ % docker exec -it nginx-demo /bin/bash<br></code></pre></td></tr></table></figure><h3 id="3-将容器内部-usr-share-nginx-文件夹下的所有文件复制到本地"><a href="#3-将容器内部-usr-share-nginx-文件夹下的所有文件复制到本地" class="headerlink" title="(3)将容器内部 /usr/share/nginx 文件夹下的所有文件复制到本地"></a>(3)将容器内部 /usr/share/nginx 文件夹下的所有文件复制到本地</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@root private/mydata/nginx/conf ~ % cp -r /usr/share/nginx<br></code></pre></td></tr></table></figure><h3 id="4-重命名为conf"><a href="#4-重命名为conf" class="headerlink" title="(4)重命名为conf"></a>(4)重命名为conf</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@root private/mydata/nginx/conf ~ % mv nginx conf<br></code></pre></td></tr></table></figure><h3 id="5-删除容器"><a href="#5-删除容器" class="headerlink" title="(5)删除容器"></a>(5)删除容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@root ～ % docker rm -f nginx-demo<br></code></pre></td></tr></table></figure><h2 id="3、运行容器并挂载到本地"><a href="#3、运行容器并挂载到本地" class="headerlink" title="3、运行容器并挂载到本地"></a>3、运行容器并挂载到本地</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@root ～ % docker run --name nginx -v /private/mydata/nginx/conf:/usr/share/nginx/conf -v /private/mydata/nginx/html:/usr/share/nginx/html -v /private/mydata/nginx/logs:/usr/share/nginx/logs -p 80:80 -d nginx:perl<br></code></pre></td></tr></table></figure><h1 id="2、nginx在宿主机上反向代理"><a href="#2、nginx在宿主机上反向代理" class="headerlink" title="2、nginx在宿主机上反向代理"></a>2、nginx在宿主机上反向代理</h1><h2 id="1、安装（可以用-brew-安装）"><a href="#1、安装（可以用-brew-安装）" class="headerlink" title="1、安装（可以用 brew 安装）"></a>1、安装（可以用 brew 安装）</h2><figure class="highlight shell"><figcaption><span>l</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo brew install nginx<br></code></pre></td></tr></table></figure><h2 id="2、查看-nginx-版本"><a href="#2、查看-nginx-版本" class="headerlink" title="2、查看 nginx 版本"></a>2、查看 nginx 版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -v<br></code></pre></td></tr></table></figure><h2 id="3、启动-nginx"><a href="#3、启动-nginx" class="headerlink" title="3、启动 nginx"></a>3、启动 nginx</h2><figure class="highlight shell"><figcaption><span>l</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nginx  <br></code></pre></td></tr></table></figure><p>也可以使用下面的命令启动，但是配置文件nginx.conf修改后用这个命令执行不生效，故不建议使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo brew services start nginx<br></code></pre></td></tr></table></figure><h2 id="4、查看-nginx-是否启动成功"><a href="#4、查看-nginx-是否启动成功" class="headerlink" title="4、查看 nginx 是否启动成功"></a>4、查看 nginx 是否启动成功</h2><p>在浏览器中访问 <a href="https://links.jianshu.com/go?to=http://localhost:8080/">http://localhost:8080</a>，如果出现 Welcome to nginx ，则说明启动成功.</p><p>备注：端口号是在配置文件 nginx.conf 里面配置的，默认端口是 8080 ，配置文件的位置 /usr/local/etc/nginx</p><h2 id="5、关闭nginx"><a href="#5、关闭nginx" class="headerlink" title="5、关闭nginx"></a>5、关闭nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nginx -s stop<br></code></pre></td></tr></table></figure><p>也可以使用下面的命令启动，但是配置文件nginx.conf修改后用这个命令执行不生效，故不建议使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo brew services stop nginx<br></code></pre></td></tr></table></figure><h2 id="6、重新加载nginx"><a href="#6、重新加载nginx" class="headerlink" title="6、重新加载nginx"></a>6、重新加载nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nginx -s reload<br></code></pre></td></tr></table></figure><h2 id="7、可能遇到的问题"><a href="#7、可能遇到的问题" class="headerlink" title="7、可能遇到的问题"></a>7、可能遇到的问题</h2><ul><li><p>端口被占用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx: [emerg] bind() to 0.0.0.0:80 failed (48: Address already in use)<br></code></pre></td></tr></table></figure><p>解决方法：(1)修改 nginx.conf 文件里的端口号 </p><p>​                    (2)使用 losf -i:端口号 查看占用端口的信息，然后 kill -9 PID</p></li><li><p>权限不够</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx: [alert] could not open error log file: open() “/usr/local/var/log/nginx/error.log” failed (13: Permission denied)<br></code></pre></td></tr></table></figure><p>解决方法：在命令前加上 sudo，这时可能会要求输入密码，密码就是电脑的开机密码啦~</p></li></ul><h2 id="8、补充"><a href="#8、补充" class="headerlink" title="8、补充"></a>8、补充</h2><p>安装 homebrew ，将以上命令粘贴至terminal，然后回车即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;<br></code></pre></td></tr></table></figure><h2 id="9、总结"><a href="#9、总结" class="headerlink" title="9、总结"></a>9、总结</h2><figure class="highlight shell"><figcaption><span>l</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -s reload 重新加载配置<br>nginx -s reopen 重启<br>nginx -s stop 停止<br>nginx -s quit 退出<br>nginx -V 查看版本，以及配置文件地址<br>nginx -v 查看版本<br>nginx -c filename 指定配置文件<br>nginx -h 帮助<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>mac</tag>
      
      <tag>docker</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux常用命令</title>
    <link href="/2022/03/04/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/03/04/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="一、文本编辑器Vim"><a href="#一、文本编辑器Vim" class="headerlink" title="一、文本编辑器Vim"></a>一、文本编辑器Vim</h2><p>vim的三种操作模式，分别是命令模式（Command mode）、输入模式（Insert mode）和底线命令模式（Last line mode）。</p><p>三种模式切换快捷键：</p><table><thead><tr><th>模式</th><th>快捷键</th></tr></thead><tbody><tr><td>命令模式</td><td>ESC</td></tr><tr><td>输入模式</td><td>i 或 a</td></tr><tr><td>底线命令模式</td><td>:</td></tr></tbody></table><h3 id="1-命令模式"><a href="#1-命令模式" class="headerlink" title="1.命令模式"></a>1.命令模式</h3><p>常用的快捷操作：</p><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>光标左移</td><td>h</td></tr><tr><td>光标右移</td><td>l (小写L)</td></tr><tr><td>光标上移</td><td>k</td></tr><tr><td>光标下移</td><td>j</td></tr><tr><td>光标移动到下一个单词</td><td>w</td></tr><tr><td>光标移动到上一个单词</td><td>b</td></tr><tr><td>移动游标到第 n 行</td><td>nG</td></tr><tr><td>移动游标到第一行</td><td>g g</td></tr><tr><td>移动游标到最后一行</td><td>G</td></tr><tr><td>快速回到上一次光标所在位置</td><td>Ctrl+o</td></tr><tr><td>删除当前字符</td><td>x</td></tr><tr><td>删除前一个字符</td><td>X</td></tr><tr><td>删除整行</td><td>dd</td></tr><tr><td>删除一个单词</td><td>dw或daw</td></tr><tr><td>删除至行尾</td><td>d$或 D</td></tr><tr><td>删除至行首</td><td>d^</td></tr><tr><td>删除到文档末尾</td><td>dG</td></tr><tr><td>删除至文档首部</td><td>d1G</td></tr><tr><td>删除 n 行</td><td>ndd</td></tr><tr><td>删除 n 个连续字符</td><td>nx</td></tr><tr><td>将光标所在位置字母变成大写或小写</td><td>~</td></tr><tr><td>复制游标所在的整行</td><td>yy（3yy 表示复制 3 行）</td></tr><tr><td>粘贴至光标后（下）</td><td>p</td></tr><tr><td>粘贴至光标后（上）</td><td>P</td></tr><tr><td>剪切</td><td>dd</td></tr><tr><td>交换上下行</td><td>ddp</td></tr><tr><td>替换整行，即删除游标所在行并进入插入模式</td><td>cc</td></tr><tr><td>撤销一次或 n 次操作</td><td>u{n}</td></tr><tr><td>撤销当前行的所有修改</td><td>U</td></tr><tr><td>恢复撤销操作</td><td>Ctrl+r</td></tr><tr><td>整行将向右缩进</td><td>&gt;&gt;</td></tr><tr><td>整行将向左退回</td><td>&lt;&lt;</td></tr><tr><td>若档案没有更动，则不储存离开，若档案已经被更改过，则储存后离开</td><td>ZZ</td></tr></tbody></table><h3 id="2-输入模式"><a href="#2-输入模式" class="headerlink" title="2.输入模式"></a>2.输入模式</h3><p>在命令模式下按 i 或 a 键就进入了输入模式，在输入模式下，您可以正常的使用键盘按键对文本进行插入和删除等操作。</p><h3 id="3-底线命令模式"><a href="#3-底线命令模式" class="headerlink" title="3.底线命令模式"></a>3.底线命令模式</h3><p>在命令模式下按:键就进入了底线命令模式，在底线命令模式中可以输入单个或多个字符的命令。</p><p>常用的快捷操作：</p><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>保存</td><td>:w</td></tr><tr><td>退出</td><td>:q</td></tr><tr><td>保存并退出</td><td>:wq（:wq!表示强制保存退出）</td></tr><tr><td>将文件另存为其他文件名</td><td>:w new_filename</td></tr><tr><td>显示行号</td><td>:set nu</td></tr><tr><td>取消行号</td><td>:set nonu</td></tr><tr><td>使本行内容居中</td><td>:ce</td></tr><tr><td>使本行文本靠右</td><td>:ri</td></tr><tr><td>使本行内容靠左</td><td>:le</td></tr><tr><td>向光标之下寻找一个名称为 word 的字符串</td><td>:/word</td></tr><tr><td>向光标之上寻找一个字符串名称为 word 的字符串</td><td>:?word</td></tr><tr><td>重复前一个搜寻的动作</td><td>:n</td></tr><tr><td>从第一行到最后一行行寻找 word1 字符串，并将该字符串取代为 word2</td><td>:1,$s/word1/word2/g 或 :%s/word1/word2/g</td></tr></tbody></table><h2 id="二、文本文件"><a href="#二、文本文件" class="headerlink" title="二、文本文件"></a>二、文本文件</h2><h3 id="1-文本文件查看命令"><a href="#1-文本文件查看命令" class="headerlink" title="(1)文本文件查看命令"></a>(1)文本文件查看命令</h3><h4 id="1-cat"><a href="#1-cat" class="headerlink" title="1.cat"></a>1.cat</h4><p>命令描述：cat 命令用于查看内容较少的纯文本文件。</p><p>命令格式：cat [选项] [文件]。</p><p>命令参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-n 或 –number</td><td>显示行数</td></tr><tr><td>-b 或–number-nonblank</td><td>显示行号，但是不对空白行进行编号</td></tr><tr><td>-s 或–squeeze-blank</td><td>当遇到有连续两行以上的空白行，只显示一行的空白行</td></tr></tbody></table><p>命令使用示例：</p><p>1、将一个自增序列写入 test.txt 文件中。</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 1 10); <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span> &gt;&gt; test.txt ; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>2、查看文件内容。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> <span class="hljs-keyword">test</span>.txt<br></code></pre></td></tr></table></figure><p>3、命令输出结果：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stata">root@<span class="hljs-keyword">local</span> # <span class="hljs-keyword">cat</span> <span class="hljs-keyword">test</span>.txt<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></code></pre></td></tr></table></figure><p>4、将文件内容清空。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cat <span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span> &gt; test.txt<br></code></pre></td></tr></table></figure><p>5、再次检查文件内容。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> <span class="hljs-keyword">test</span>.txt<br></code></pre></td></tr></table></figure><p>命令输出结果：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">root@<span class="hljs-keyword">local</span> # <span class="hljs-keyword">cat</span> /dev/null &gt; <span class="hljs-keyword">test</span>.txt<br>root@<span class="hljs-keyword">local</span> # <span class="hljs-keyword">cat</span> <span class="hljs-keyword">test</span>.txt<br>root@<span class="hljs-keyword">local</span> # <br></code></pre></td></tr></table></figure><h4 id="2-more"><a href="#2-more" class="headerlink" title="2.more"></a>2.more</h4><p>命令描述：more 命令从前向后分页显示文件内容。</p><p>常用操作命令：</p><table><thead><tr><th>操作</th><th>作用</th></tr></thead><tbody><tr><td>Enter</td><td>向下 n 行，n 需要定义，默认为 1 行</td></tr><tr><td>Ctrl+F 或空格键（Space）</td><td>向下滚动一页</td></tr><tr><td>Ctrl+B</td><td>向上滚动一页</td></tr><tr><td>=</td><td>输出当前行的行号</td></tr><tr><td>!命令</td><td>调用 Shell 执行命令</td></tr><tr><td>q</td><td>退出 more</td></tr></tbody></table><p>命令使用示例：从第 20 行开始分页查看系统日志文件/var/log/messages。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">more</span> +2 /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/daily.<span class="hljs-keyword">out</span><br></code></pre></td></tr></table></figure><p>命令输出结果：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs gradle">root@local ~ # more +<span class="hljs-number">2</span> <span class="hljs-regexp">/var/</span>log/daily.out<br>Thu Mar <span class="hljs-number">18</span> <span class="hljs-number">09</span>:<span class="hljs-number">54</span>:<span class="hljs-number">58</span> CST <span class="hljs-number">2021</span><br><br>Removing old temporary files:<br><br>Cleaning out old system announcements:<br><br>Removing stale files <span class="hljs-keyword">from</span> <span class="hljs-regexp">/var/</span>rwho:<br><br>Disk status:<br>Filesystem       <span class="hljs-keyword">Size</span>   Used  Avail Capacity iused      ifree %iused  Mounted on<br><span class="hljs-regexp">/dev/</span>disk1s5s1  <span class="hljs-number">233</span>Gi   <span class="hljs-number">14</span>Gi  <span class="hljs-number">150</span>Gi     <span class="hljs-number">9</span>%  <span class="hljs-number">568975</span> <span class="hljs-number">2447532345</span>    <span class="hljs-number">0</span>%   /<br><span class="hljs-regexp">/dev/</span>disk1s4    <span class="hljs-number">233</span>Gi  <span class="hljs-number">3.0</span>Gi  <span class="hljs-number">150</span>Gi     <span class="hljs-number">2</span>%       <span class="hljs-number">4</span> <span class="hljs-number">2448101316</span>    <span class="hljs-number">0</span>%   <span class="hljs-regexp">/System/</span>Volumes/VM<br><span class="hljs-regexp">/dev/</span>disk1s2    <span class="hljs-number">233</span>Gi  <span class="hljs-number">410</span>Mi  <span class="hljs-number">150</span>Gi     <span class="hljs-number">1</span>%    <span class="hljs-number">1563</span> <span class="hljs-number">2448099757</span>    <span class="hljs-number">0</span>%   <span class="hljs-regexp">/System/</span>Volumes/Preboot<br><span class="hljs-regexp">/dev/</span>disk1s6    <span class="hljs-number">233</span>Gi  <span class="hljs-number">2.3</span>Mi  <span class="hljs-number">150</span>Gi     <span class="hljs-number">1</span>%      <span class="hljs-number">16</span> <span class="hljs-number">2448101304</span>    <span class="hljs-number">0</span>%   <span class="hljs-regexp">/System/</span>Volumes/Update<br><span class="hljs-regexp">/dev/</span>disk1s1    <span class="hljs-number">233</span>Gi   <span class="hljs-number">65</span>Gi  <span class="hljs-number">150</span>Gi    <span class="hljs-number">31</span>%  <span class="hljs-number">467200</span> <span class="hljs-number">2447634120</span>    <span class="hljs-number">0</span>%   <span class="hljs-regexp">/System/</span>Volumes/Data<br><br>Network <span class="hljs-keyword">interface</span> status:<br>Name       Mtu   Network       Address            Ipkts Ierrs    Opkts Oerrs  Coll<br><br></code></pre></td></tr></table></figure><h4 id="3-less"><a href="#3-less" class="headerlink" title="3.less"></a>3.less</h4><p>命令描述：less 命令可以对文件或其它输出进行分页显示，与 moe 命令相似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动。</p><p>命令格式：less [参数] 文件。</p><p>命令参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-e</td><td>当文件显示结束后，自动离开</td></tr><tr><td>-m</td><td>显示类似 more 命令的百分比</td></tr><tr><td>-N</td><td>显示每行的行号</td></tr><tr><td>-s</td><td>显示连续空行为一行</td></tr></tbody></table><p>命令常用操作：</p><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>/字符串</td><td>向下搜索字符串</td></tr><tr><td>?字符串</td><td>向上搜索字符串</td></tr><tr><td>n</td><td>重复前一个搜索</td></tr><tr><td>N</td><td>反向重复前一个搜索</td></tr><tr><td>b 或 pageup 键</td><td>向上翻一页</td></tr><tr><td>空格键或 pagedown 键</td><td>向下翻一页</td></tr><tr><td>u</td><td>向前翻半页</td></tr><tr><td>d</td><td>向后翻半页</td></tr><tr><td>y</td><td>向前滚动一行</td></tr><tr><td>回车键</td><td>向后滚动一行</td></tr><tr><td>q</td><td>退出 less 命令</td></tr></tbody></table><p>命令使用示例： 查看命令历史使用记录并通过 less 分页显示。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">history <span class="hljs-string">| less</span><br></code></pre></td></tr></table></figure><h4 id="4-head"><a href="#4-head" class="headerlink" title="4.head"></a>4.head</h4><p>命令描述：head 命令用于查看文件开头指定行数的内容。 </p><p>命令格式：head [参数] [文件]。</p><p>命令参数说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-n [行数]</td><td>显示开头指定行的文件内容，默认为 10</td></tr><tr><td>-c [字符串]</td><td>显示开头指定个数的字符数</td></tr><tr><td>-q</td><td>不显示文件名字信息，适用于多个文件，多文件时默认会显示文件名</td></tr></tbody></table><p>命令使用示例：</p><ul><li> 查看/etc/passwd 文件的前 5 行内容。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">head -<span class="hljs-number">5</span> <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><ul><li>命令输出结果：</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@local ~ # head -<span class="hljs-number">5</span> /etc/passwd<br><span class="hljs-comment">##</span><br><span class="hljs-comment"># User Database</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># Note that this file is consulted directly only when the system is running</span><br><span class="hljs-comment"># in single-user mode.  At other times this information is provided by</span><br></code></pre></td></tr></table></figure><h4 id="5-tail"><a href="#5-tail" class="headerlink" title="5.tail"></a>5.tail</h4><p>命令描述：tail 命令用于查看文档的后 N 行或持续刷新内容。 </p><p>命令格式：tail [参数] [文件]。 </p><p>命令参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-f</td><td>显示文件最新追加的内容</td></tr><tr><td>-q</td><td>当有多个文件参数时，不输出各个文件名</td></tr><tr><td>-v</td><td>当有多个文件参数时，总是输出各个文件名</td></tr><tr><td>-c [字节数]</td><td>显示文件的尾部 n 个字节内容</td></tr><tr><td>-n [行数]</td><td>显示文件的尾部 n 行内容</td></tr></tbody></table><p>命令使用示例：查看/var/log/messages 系统日志文件的最新 10 行，并保持实时刷新。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">tail -f -<span class="hljs-built_in">n</span> <span class="hljs-number">10</span> /<span class="hljs-built_in">var</span>/<span class="hljs-built_in">log</span>/messages<br></code></pre></td></tr></table></figure><p>注：按 ctrl+c 键退出文本实时查看界面。</p><h4 id="6-stat"><a href="#6-stat" class="headerlink" title="6.stat"></a>6.stat</h4><p>命令描述：用来显示文件的详细信息，包括 inode、atime、mtime、ctime 等。 </p><p>命令使用示例： 查看/etc/passwd 文件的详细信息。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">stat <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><h4 id="7-wc"><a href="#7-wc" class="headerlink" title="7.wc"></a>7.wc</h4><p>命令描述：wc 命令用于统计指定文本的行数、字数、字节数。 </p><p>命令格式：wc [参数] [文件]。 </p><p>命令参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-l</td><td>只显示行数</td></tr><tr><td>-w</td><td>只显示单词数</td></tr><tr><td>-c</td><td>只显示字节数</td></tr></tbody></table><p>命令使用示例： 统计/etc/passwd 文件的行数。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wc -l <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><p>命令输出结果： </p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">root@root ~ # wc -l <span class="hljs-regexp">/etc/</span>passwd<br><span class="hljs-number">120</span> <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><h4 id="8-file"><a href="#8-file" class="headerlink" title="8.file"></a>8.file</h4><p>命令描述：file 命令用于辨识文件类型。 </p><p>命令格式：file [参数] [文件]。 </p><p>命令参数说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-b</td><td>列出辨识结果时，不显示文件名称</td></tr><tr><td>-c</td><td>详细显示指令执行过程，便于排错或分析程序执行的情形</td></tr><tr><td>-f [文件]</td><td>指定名称文件，其内容有一个或多个文件名称时，让 file 依序辨识这些文件，格式为每列一个文件名称</td></tr><tr><td>-L</td><td>直接显示符号连接所指向的文件类别</td></tr></tbody></table><p>命令使用示例： 查看/var/log/messages 文件的文件类型。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">file</span> <span class="hljs-regexp">/var/</span>log/messages<br></code></pre></td></tr></table></figure><h4 id="9-diff"><a href="#9-diff" class="headerlink" title="9.diff"></a>9.diff</h4><p>命令描述：diff 命令用于比较文件的差异。 </p><p>命令使用示例： </p><p>1、构造两个相似的文件</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">echo -e &#x27;第一行<span class="hljs-symbol">\n</span> 第二行<span class="hljs-symbol">\n</span> 我是 log1 第 3 行<span class="hljs-symbol">\n</span> 第四行<span class="hljs-symbol">\n</span> 第五行<span class="hljs-symbol">\n</span> 第六行&#x27; &gt; 1.log<br>echo -e &#x27;第一行<span class="hljs-symbol">\n</span> 第二行<span class="hljs-symbol">\n</span> 我是 log2 第 3 行<span class="hljs-symbol">\n</span> 第四行&#x27; &gt; 2.log<br></code></pre></td></tr></table></figure><p>2、分别查看两个文件</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">cat</span> <span class="hljs-number">1.</span><span class="hljs-built_in">log</span><br><span class="hljs-built_in">cat</span> <span class="hljs-number">2.</span><span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>3、使用 diff 查看两个文件的差异</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">root@root ~% diff 1.log 2.log<br>3c3<br><span class="hljs-section">&lt;  我是 log1 第 3 行</span><br><span class="hljs-section">---</span><br>&gt;  我是 log2 第 3 行<br>5,6d4<br>&lt;  第五行<br>&lt;  第六行<br></code></pre></td></tr></table></figure><p>对比结果中的 3c3 表示两个文件在第 3 行有不同，5,6d4 表示 2.log 文件相比 1.log 文件在第 4 行处开始少了 1.log 文件的第 5 和第 6 行。</p><h3 id="2-文本文件处理命令"><a href="#2-文本文件处理命令" class="headerlink" title="(2)文本文件处理命令"></a>(2)文本文件处理命令</h3><h4 id="1-grep"><a href="#1-grep" class="headerlink" title="1.grep"></a>1.grep</h4><p>命令描述：grep 命令用于查找文件里符合条件的字符串。 </p><p>grep 全称是 Global Regular Expression Print，表示全局正则表达式版本，它能使用正则表达式搜索文本，并把匹配的行打印出来。 </p><p>在 Shell 脚本中，grep 通过返回一个状态值来表示搜索的状态： </p><ul><li>0：匹配成功。</li><li>1：匹配失败。</li><li>2：搜索的文件不存在。</li><li>命令格式：grep [参数] [正则表达式] [文件]。</li></ul><p>常用参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-c 或–count</td><td>计算符合样式的列数</td></tr><tr><td>-d recurse 或-r</td><td>指定要查找的是目录而非文件</td></tr><tr><td>-e [范本样式]</td><td>指定字符串做为查找文件内容的样式</td></tr><tr><td>-E 或 –extended-regexp</td><td>将样式为延伸的正则表达式来使用</td></tr><tr><td>-G 或 –basic-regexp</td><td>将样式视为普通的表示法来使用</td></tr><tr><td>-i 或 –ignore-case</td><td>忽略字符大小写的差别</td></tr><tr><td>-n 或 –line-number</td><td>在显示符合样式的那一行之前，标示出该行的列数编号</td></tr><tr><td>-v 或 –revert-match</td><td>显示不包含匹配文本的所有行</td></tr></tbody></table><p>命令使用示例： </p><ul><li>查看 sshd 服务配置文件中监听端口配置所在行编号。</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> -n Port <span class="hljs-regexp">/etc/</span>ssh/ssh_config<br></code></pre></td></tr></table></figure><ul><li>查询字符串在文本中出现的行数。</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> -c localhost <span class="hljs-regexp">/etc/</span>hosts<br></code></pre></td></tr></table></figure><ul><li>反向查找，不显示符合条件的行。</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> sshd<br><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> -v <span class="hljs-keyword">grep</span> | <span class="hljs-keyword">grep</span> sshd<br></code></pre></td></tr></table></figure><ul><li>以递归的方式查找目录下含有关键字的文件。</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">grep -r *<span class="hljs-string">.sh</span> <span class="hljs-string">/etc</span><br></code></pre></td></tr></table></figure><ul><li>使用正则表达式匹配 httpd 配置文件中异常状态码响应的相关配置。</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;ntp[0-9].aliyun.com&#x27;</span> <span class="hljs-regexp">/etc/</span>ntp.conf<br></code></pre></td></tr></table></figure><h4 id="2-sed"><a href="#2-sed" class="headerlink" title="2.sed"></a>2.sed</h4><p>命令描述：sed 是一种流编辑器，它是文本处理中非常中的工具，能够完美的配合正则表达式使用。</p><p>1、处理时，把当前处理的行存储在临时缓冲区中，称为模式空间（pattern space）。 </p><p>2、接着用 sed 命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。 </p><p>3、接着处理下一行，这样不断重复，直到文件末尾。</p><p>注意：</p><ul><li>sed 命令不会修改原文件，例如删除命令只表示某些行不打印输出，而不是从原文件中删去。</li><li>如果要改变源文件，需要使用-i 选项。</li><li>命令格式：sed [参数] [动作] [文件]。</li></ul><p>参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-e [script]</td><td>执行多个 script</td></tr><tr><td>-f [script 文件]</td><td>执行指定 script 文件</td></tr><tr><td>-n</td><td>仅显示 script 处理后的结果</td></tr><tr><td>-i</td><td>输出到原文件，静默执行（修改原文件）</td></tr></tbody></table><p>动作说明：</p><table><thead><tr><th>动作</th><th>说明</th></tr></thead><tbody><tr><td>a</td><td>在行后面增加内容</td></tr><tr><td>c</td><td>替换行</td></tr><tr><td>d</td><td>删除行</td></tr><tr><td>i</td><td>在行前面插入</td></tr><tr><td>p</td><td>打印相关的行</td></tr><tr><td>s</td><td>替换内容</td></tr></tbody></table><p>命令使用示例： </p><ul><li>删除第 3 行到最后一行内容。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sed <span class="hljs-string">&#x27;3,$d&#x27;</span> <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><ul><li>在最后一行新增行。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sed <span class="hljs-string">&#x27;$a admin:x:1000:1000:admin:/home/admin:/bin/bash&#x27;</span> <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><ul><li>替换内容。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sed <span class="hljs-string">&#x27;s/SELINUX=disabled/SELINUX=enforcing/&#x27;</span> <span class="hljs-regexp">/etc/</span>selinux/config<br></code></pre></td></tr></table></figure><ul><li>替换行。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sed <span class="hljs-string">&#x27;1c abcdefg&#x27;</span> <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><h4 id="3-awk"><a href="#3-awk" class="headerlink" title="3.awk"></a>3.awk</h4><p>命令描述：和 sed 命令类似，awk 命令也是逐行扫描文件（从第 1 行到最后一行），寻找含有目标文本的行，如果匹配成功，则会在该行上执行用户想要的操作；反之，则不对行做任何处理。</p><p>命令格式：awk [参数] [脚本] [文件]。</p><p>参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-F fs</td><td>指定以 fs 作为输入行的分隔符，awk 命令默认分隔符为空格或制表符</td></tr><tr><td>-f file</td><td>读取 awk 脚本</td></tr><tr><td>-v val=val</td><td>在执行处理过程之前，设置一个变量 var，并给其设置初始值为 val</td></tr></tbody></table><p>内置变量：</p><table><thead><tr><th>变量</th><th>用途</th></tr></thead><tbody><tr><td>FS</td><td>字段分隔符</td></tr><tr><td>$n</td><td>指定分隔的第 n 个字段，如$1、$3 分别表示第 1、第三列</td></tr><tr><td>$0</td><td>当前读入的整行文本内容</td></tr><tr><td>NF</td><td>记录当前处理行的字段个数（列数）</td></tr><tr><td>NR</td><td>记录当前已读入的行数</td></tr><tr><td>FNR</td><td>当前行在源文件中的行号</td></tr></tbody></table><p>awk 中还可以指定脚本命令的运行时机。默认情况下，awk 会从输入中读取一行文本，然后针对该行的数据执行程序脚本，但有时可能需要在处理数据前运行一些脚本命令，这就需要使用BEGIN 关键字，BEGIN 会在 awsk 读取数据前强制执行该关键字后指定的脚本命令。</p><p>和 BEGIN 关键字相对应，END 关键字允许我们指定一些脚本命令，awk 会在读完数据后执行它们.</p><p>命令使用示例： </p><ul><li>查看本机 IP 地址。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ifconfig</span> eth0 |awk <span class="hljs-string">&#x27;/inet/&#123;print <span class="hljs-variable">$2</span>&#125;&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>查看本机剩余磁盘容量。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">df</span> -h |awk <span class="hljs-string">&#x27;/\/$/&#123;print <span class="hljs-variable">$4</span>&#125;&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>统计系统用户个数。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">awk -F: <span class="hljs-string">&#x27;$3&lt;1000&#123;x++&#125; END&#123;print x&#125;&#x27;</span> <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><ul><li>输出其中登录 Shell 不以 nologin 结尾（对第 7 个字段做!~反向匹配）的用户名、登录 Shell 信息.</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">awk</span> -F: <span class="hljs-string">&#x27;<span class="hljs-variable">$7</span>!~/nologin$/&#123;print <span class="hljs-variable">$1</span>,<span class="hljs-variable">$7</span>&#125;&#x27;</span> /etc/passwd<br></code></pre></td></tr></table></figure><ul><li>输出/etc/passwd 文件中前三行记录的用户名和用户 uid。</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">head -3 /etc/passwd | awk &#x27;BEGIN&#123;FS=<span class="hljs-string">&quot;:&quot;</span>;<span class="hljs-keyword">print</span> <span class="hljs-string">&quot;name\tuid&quot;</span>&#125;&#123;<span class="hljs-keyword">print</span> <span class="hljs-variable">$1</span>,<span class="hljs-string">&quot;\t&quot;</span><span class="hljs-variable">$3&#125;</span>END&#123;<span class="hljs-keyword">print</span> <span class="hljs-string">&quot;sum lines &quot;</span>NR&#125;&#x27;<br></code></pre></td></tr></table></figure><ul><li>查看 tcp 连接数。 </li></ul><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">netstat -na | awk &#x27;/<span class="hljs-symbol">^tcp</span>/ &#123;++<span class="hljs-keyword">S</span>[<span class="hljs-built_in">$NF</span>]&#125; END &#123;<span class="hljs-keyword">for</span>(a in <span class="hljs-keyword">S</span>) <span class="hljs-keyword">print</span> a, <span class="hljs-keyword">S</span>[a]&#125;&#x27;<br></code></pre></td></tr></table></figure><ul><li>关闭指定服务的所有的进程。</li></ul><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">ps -ef | <span class="hljs-type">grep</span> httpd | <span class="hljs-type">awk</span> &#123;&#x27;print $<span class="hljs-number">2</span>&#x27;&#125; | <span class="hljs-type">xargs</span> kill <span class="hljs-number">-9</span><br></code></pre></td></tr></table></figure><h4 id="4-cut"><a href="#4-cut" class="headerlink" title="4.cut"></a>4.cut</h4><p>命令描述：cut 命令主要用来切割字符串，可以对输入的数据进行切割然后输出。 </p><p>命令格式：cut [参数] [文件]。</p><p>参数说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-b</td><td>以字节为单位进行分割</td></tr><tr><td>-c</td><td>以字符为单位进行分割</td></tr><tr><td>-d</td><td>自定义分隔符，默认为制表符</td></tr></tbody></table><p>命令使用示例： </p><ul><li>按字节进行切割。</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@local ~ # echo <span class="hljs-string">&quot;Hello World&quot;</span> | cut -b <span class="hljs-number">1</span>,<span class="hljs-number">3</span>   <br><span class="hljs-attribute">Hl</span><br></code></pre></td></tr></table></figure><ul><li>按字符进行切割。</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">root<span class="hljs-symbol">@local</span> ~ <span class="hljs-meta"># echo <span class="hljs-string">&quot;h和o&quot;</span> | cut -c 2  </span><br>和<br></code></pre></td></tr></table></figure><ul><li>按指定字符进行切割。</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@local ~ # echo <span class="hljs-string">&quot;hello,world,ok&quot;</span> | cut -d , -f <span class="hljs-number">1</span>,<span class="hljs-number">3</span><br><span class="hljs-attribute">hello</span>,ok<br></code></pre></td></tr></table></figure><h4 id="5-tr"><a href="#5-tr" class="headerlink" title="5.tr"></a>5.tr</h4><p>命令描述：tr 命令用于对来自标准输入的字符进行替换、压缩和删除。 </p><p>命令格式：tr [参数] [文本]。 </p><p>参数说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-c</td><td>反选指定字符</td></tr><tr><td>-d</td><td>删除指定字符</td></tr><tr><td>-s</td><td>将重复的字符缩减成一个字符</td></tr><tr><td>-t [第一字符集] [第二字符集]</td><td>删除第一字符集较第二字符集多出的字符，使两个字符集长度相等</td></tr></tbody></table><p>命令使用示例： </p><ul><li>将输入字符由大写转换为小写。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;HELLO WORLD&quot;</span> | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;A-Z&#x27;</span> <span class="hljs-string">&#x27;a-z&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>删除字符。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello 123 world 456&quot;</span> | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;0-9&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>压缩字符。 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;thissss is a text linnnnnnne.&quot;</span> | <span class="hljs-built_in">tr</span> -s <span class="hljs-string">&#x27; sn&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>产生随机密码。 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /dev/urandom | <span class="hljs-built_in">tr</span> -dc a-zA-Z0-9 | <span class="hljs-built_in">head</span> -c 13<br></code></pre></td></tr></table></figure><h2 id="三、常用系统工作命令"><a href="#三、常用系统工作命令" class="headerlink" title="三、常用系统工作命令"></a>三、常用系统工作命令</h2><h3 id="1-echo"><a href="#1-echo" class="headerlink" title="1.echo"></a>1.echo</h3><p>命令描述：echo 命令用于在终端输出字符串或变量提取后的值。 </p><p>命令格式：echo [字符串 | $变量]。 </p><p>命令用法示例： </p><p>1、显示普通字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello World&quot;</span><br></code></pre></td></tr></table></figure><p>2、显示变量</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">中定义一个临时变量 name ： <span class="hljs-built_in">export</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Tom&quot;</span><br>显示变量：echo <span class="hljs-variable">$name</span><br></code></pre></td></tr></table></figure><p>3、显示结果定向至文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;This is a test text.&quot;</span> &gt; test.txt<br></code></pre></td></tr></table></figure><p>注：命令会将文本 This is a test text.输出重定向到文件 test.txt 中，如果文件已存在，将会覆盖文件内容，如果不存在则创建。其中&gt;符号表示输出重定向。如果您希望将文本追加到文件内容最后，而不是覆盖它，请使用&gt;&gt;输出追加重定向符号。</p><p>4、显示命令执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">pwd</span>`<br></code></pre></td></tr></table></figure><p>注意：pwd 命令是用一对反引号（``）包裹，而不是一对单引号（’’）。使用$(command)形式可以达到相同效果。</p><h3 id="2-date"><a href="#2-date" class="headerlink" title="2.date"></a>2.date</h3><p>命令描述：date 命令用于显示和设置系统的时间和日期。</p><p>命令格式：date [选项] [+格式]。 </p><p>其中，时间格式的部分控制字符解释如下：</p><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td>%a</td><td>当地时间的星期名缩写（例如： 日，代表星期日）</td></tr><tr><td>%A</td><td>当地时间的星期名全称 （例如：星期日）</td></tr><tr><td>%b</td><td>当地时间的月名缩写 （例如：一，代表一月）</td></tr><tr><td>%B</td><td>当地时间的月名全称 （例如：一月）</td></tr><tr><td>%c</td><td>当地时间的日期和时间 （例如：2005 年 3 月 3 日 星期四 23:05:25）</td></tr><tr><td>%C</td><td>世纪；比如 %Y，通常为省略当前年份的后两位数字（例如：20）</td></tr><tr><td>%d</td><td>按月计的日期（例如：01）</td></tr><tr><td>%D</td><td>按月计的日期；等于%m/%d/%y</td></tr><tr><td>%F</td><td>完整日期格式，等价于 %Y-%m-%d</td></tr><tr><td>%j</td><td>按年计的日期（001-366）</td></tr><tr><td>%p</td><td>按年计的日期（001-366）</td></tr><tr><td>%r</td><td>当地时间下的 12 小时时钟时间 （例如：11:11:04 下午）</td></tr><tr><td>%R</td><td>24 小时时间的时和分，等价于 %H:%M</td></tr><tr><td>%s</td><td>自 UTC 时间 1970-01-01 00:00:00 以来所经过的秒数</td></tr><tr><td>%T</td><td>时间，等于%H:%M:%S</td></tr><tr><td>%U</td><td>一年中的第几周，以周日为每星期第一天（00-53）</td></tr><tr><td>%x</td><td>当地时间下的日期描述 （例如：12/31/99）</td></tr><tr><td>%X</td><td>当地时间下的时间描述 （例如：23:13:48）</td></tr><tr><td>%w</td><td>一星期中的第几日（0-6），0 代表周一</td></tr><tr><td>%W</td><td>一年中的第几周，以周一为每星期第一天（00-53）</td></tr></tbody></table><p>命令用法示例： </p><ul><li>按照默认格式查看当前系统时间</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">date</span><br></code></pre></td></tr></table></figure><ul><li>按照指定格式查看当前系统时间 </li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">date <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span><br></code></pre></td></tr></table></figure><ul><li>查看今天是当年中的第几天 </li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%j&quot;</span> <br></code></pre></td></tr></table></figure><ul><li>将系统的当前时间设置为 2020 年 02 月 20 日 20 点 20 分 20 秒 </li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">date</span> -s <span class="hljs-string">&quot;20200220 20:20:20&quot;</span> <br></code></pre></td></tr></table></figure><ul><li>校正系统时间，与网络时间同步 </li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">A</span>、安装 ntp 校时工具 <br>yum -y install ntp <br><span class="hljs-selector-tag">B</span>、用 ntpdate 从时间服务器更新时间 <br>ntpdate <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.nist</span><span class="hljs-selector-class">.gov</span><br></code></pre></td></tr></table></figure><h3 id="3-wget"><a href="#3-wget" class="headerlink" title="3.wget"></a>3.wget</h3><p>命令描述：在终端中下载文件。 </p><p>命令格式：wget [参数] 下载地址。</p><p>参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-b</td><td>后台下载</td></tr><tr><td>-P</td><td>下载到指定目录</td></tr><tr><td>-d</td><td>最大重试次数</td></tr><tr><td>-c</td><td>断点续传</td></tr><tr><td>-p</td><td>下载页面内所有资源，包括图片、视频等</td></tr><tr><td>-r</td><td>递归下载</td></tr></tbody></table><p>命令使用示例： </p><ul><li>下载一张图片到路径/root/static/img/中，-p 参数默认值为当前路径，如果指定路径不存在会自动创建。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -P <span class="hljs-regexp">/root/</span>static<span class="hljs-regexp">/img/</span> http:<span class="hljs-regexp">//img</span>.alicdn.com<span class="hljs-regexp">/tfs/</span>TB1.R._t7L0gK0jSZFxXXXWHVXa-<span class="hljs-number">2666</span>-<span class="hljs-number">1500</span>.png<br></code></pre></td></tr></table></figure><h3 id="4-ps"><a href="#4-ps" class="headerlink" title="4.ps"></a>4.ps</h3><p>命令描述：ps 命令用于查看系统中的进程状态。 </p><p>命令格式：ps [参数]。</p><p>命令参数说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-a</td><td>显示现行终端机下的所有程序，包括其他用户的程序</td></tr><tr><td>-u</td><td>以用户为主的格式来显示程序状况</td></tr><tr><td>-x</td><td>显示没有控制终端的进程，同时显示各个命令的具体路径</td></tr><tr><td>-e</td><td>列出程序时，显示每个程序所使用的环境变量</td></tr><tr><td>-f</td><td>显示当前所有的进程</td></tr><tr><td>-t</td><td>指定终端机编号，并列出属于该终端机的程序的状况</td></tr></tbody></table><p>命令使用示例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@root ~ # ps -ef | grep sshd<br><span class="hljs-attribute">501</span> <span class="hljs-number">21963</span> <span class="hljs-number">86819</span>   <span class="hljs-number">0</span>  <span class="hljs-number">1</span>:<span class="hljs-number">56</span>下午 ttys000    <span class="hljs-number">0</span>:<span class="hljs-number">00</span>.<span class="hljs-number">00</span> grep sshd<br></code></pre></td></tr></table></figure><h3 id="5-top"><a href="#5-top" class="headerlink" title="5.top"></a>5.top</h3><p>命令描述：top 命令动态地监视进程活动与系统负载等信息。 </p><p>命令使用示例： </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@root ~ # top<br><br><span class="hljs-attribute">Processes</span>: <span class="hljs-number">324</span> total, <span class="hljs-number">4</span> running, <span class="hljs-number">320</span> sleeping, <span class="hljs-number">1891</span> threads            <span class="hljs-number">13</span>:<span class="hljs-number">59</span>:<span class="hljs-number">45</span><br><span class="hljs-attribute">Load</span> Avg: <span class="hljs-number">1</span>.<span class="hljs-number">77</span>, <span class="hljs-number">2</span>.<span class="hljs-number">53</span>, <span class="hljs-number">3</span>.<span class="hljs-number">43</span>  CPU usage: <span class="hljs-number">5</span>.<span class="hljs-number">78</span>% user, <span class="hljs-number">6</span>.<span class="hljs-number">98</span>% sys, <span class="hljs-number">87</span>.<span class="hljs-number">22</span>% idle<br><span class="hljs-attribute">SharedLibs</span>: <span class="hljs-number">266</span>M resident, <span class="hljs-number">38</span>M data, <span class="hljs-number">37</span>M linkedit.<br><span class="hljs-attribute">MemRegions</span>: <span class="hljs-number">121485</span> total, <span class="hljs-number">1341</span>M resident, <span class="hljs-number">51</span>M private, <span class="hljs-number">606</span>M shared.<br><span class="hljs-attribute">PhysMem</span>: <span class="hljs-number">8032</span>M used (<span class="hljs-number">1958</span>M wired), <span class="hljs-number">160</span>M unused.<br><span class="hljs-attribute">VM</span>: <span class="hljs-number">3230</span>G vsize, <span class="hljs-number">2322</span>M framework vsize, <span class="hljs-number">20790020</span>(<span class="hljs-number">0</span>) swapins, <span class="hljs-number">21375426</span>(<span class="hljs-number">0</span>) swapout<br><span class="hljs-attribute">Networks</span>: packets: <span class="hljs-number">4939487</span>/<span class="hljs-number">5981</span>M in, <span class="hljs-number">2388265</span>/<span class="hljs-number">1580</span>M out.<br><span class="hljs-attribute">Disks</span>: <span class="hljs-number">4293856</span>/<span class="hljs-number">127</span>G read, <span class="hljs-number">1752366</span>/<span class="hljs-number">104</span>G written.<br><br><span class="hljs-attribute">PID</span>    COMMAND      %CPU TIME     #TH   #WQ  #PORT MEM    PURG   CMPRS  PGRP<br><span class="hljs-attribute">96998</span>  wpsoffice    <span class="hljs-number">5</span>.<span class="hljs-number">2</span>  <span class="hljs-number">29</span>:<span class="hljs-number">56</span>.<span class="hljs-number">88</span> <span class="hljs-number">71</span>    <span class="hljs-number">1</span>    <span class="hljs-number">464</span>   <span class="hljs-number">1917</span>M  <span class="hljs-number">0</span>B     <span class="hljs-number">1520</span>M  <span class="hljs-number">96998</span><br><span class="hljs-attribute">54253</span>  wpscloudsvr  <span class="hljs-number">4</span>.<span class="hljs-number">3</span>  <span class="hljs-number">07</span>:<span class="hljs-number">26</span>.<span class="hljs-number">99</span> <span class="hljs-number">84</span>    <span class="hljs-number">1</span>    <span class="hljs-number">345</span>   <span class="hljs-number">55</span>M    <span class="hljs-number">0</span>B     <span class="hljs-number">36</span>M    <span class="hljs-number">54253</span><br><span class="hljs-attribute">140</span>    WindowServer <span class="hljs-number">3</span>.<span class="hljs-number">8</span>  <span class="hljs-number">01</span>:<span class="hljs-number">48</span>:<span class="hljs-number">34</span> <span class="hljs-number">13</span>/<span class="hljs-number">1</span>  <span class="hljs-number">5</span>    <span class="hljs-number">2322</span>+ <span class="hljs-number">812</span>M-  <span class="hljs-number">2828</span>K- <span class="hljs-number">140</span>M-  <span class="hljs-number">140</span><br><span class="hljs-attribute">23547</span>  top          <span class="hljs-number">3</span>.<span class="hljs-number">5</span>  <span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">97</span> <span class="hljs-number">1</span>/<span class="hljs-number">1</span>   <span class="hljs-number">0</span>    <span class="hljs-number">29</span>+   <span class="hljs-number">4080</span>K  <span class="hljs-number">0</span>B     <span class="hljs-number">0</span>B     <span class="hljs-number">23547</span><br><span class="hljs-attribute">25997</span>  Terminal     <span class="hljs-number">2</span>.<span class="hljs-number">6</span>  <span class="hljs-number">03</span>:<span class="hljs-number">49</span>.<span class="hljs-number">54</span> <span class="hljs-number">11</span>    <span class="hljs-number">5</span>    <span class="hljs-number">344</span>   <span class="hljs-number">59</span>M-   <span class="hljs-number">10</span>M+   <span class="hljs-number">14</span>M    <span class="hljs-number">25997</span><br><span class="hljs-attribute">0</span>      kernel_task  <span class="hljs-number">2</span>.<span class="hljs-number">1</span>  <span class="hljs-number">66</span>:<span class="hljs-number">32</span>.<span class="hljs-number">59</span> <span class="hljs-number">178</span>/<span class="hljs-number">4</span> <span class="hljs-number">0</span>    <span class="hljs-number">0</span>     <span class="hljs-number">1138</span>M- <span class="hljs-number">0</span>B     <span class="hljs-number">0</span>B     <span class="hljs-number">0</span><br><span class="hljs-attribute">94</span>     diskarbitrat <span class="hljs-number">1</span>.<span class="hljs-number">7</span>  <span class="hljs-number">02</span>:<span class="hljs-number">28</span>.<span class="hljs-number">59</span> <span class="hljs-number">2</span>     <span class="hljs-number">1</span>    <span class="hljs-number">247</span>+  <span class="hljs-number">1224</span>K  <span class="hljs-number">0</span>B     <span class="hljs-number">548</span>K   <span class="hljs-number">94</span><br><span class="hljs-attribute">402</span>    QQ           <span class="hljs-number">1</span>.<span class="hljs-number">6</span>  <span class="hljs-number">32</span>:<span class="hljs-number">42</span>.<span class="hljs-number">66</span> <span class="hljs-number">35</span>    <span class="hljs-number">16</span>   <span class="hljs-number">1043</span>  <span class="hljs-number">414</span>M   <span class="hljs-number">16</span>K    <span class="hljs-number">341</span>M   <span class="hljs-number">402</span><br><span class="hljs-attribute">451</span>    QQLive       <span class="hljs-number">1</span>.<span class="hljs-number">6</span>  <span class="hljs-number">37</span>:<span class="hljs-number">37</span>.<span class="hljs-number">05</span> <span class="hljs-number">78</span>    <span class="hljs-number">12</span>   <span class="hljs-number">1006</span>  <span class="hljs-number">492</span>M   <span class="hljs-number">0</span>B     <span class="hljs-number">376</span>M   <span class="hljs-number">451</span><br><span class="hljs-attribute">1</span>      launchd      <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">03</span>:<span class="hljs-number">15</span>.<span class="hljs-number">43</span> <span class="hljs-number">4</span>     <span class="hljs-number">3</span>    <span class="hljs-number">5037</span>+ <span class="hljs-number">26</span>M+   <span class="hljs-number">0</span>B     <span class="hljs-number">15</span>M-   <span class="hljs-number">1</span><br><span class="hljs-attribute">745</span>    LemonMonitor <span class="hljs-number">0</span>.<span class="hljs-number">8</span>  <span class="hljs-number">05</span>:<span class="hljs-number">36</span>.<span class="hljs-number">48</span> <span class="hljs-number">14</span>    <span class="hljs-number">5</span>    <span class="hljs-number">429</span>   <span class="hljs-number">30</span>M-   <span class="hljs-number">396</span>K+  <span class="hljs-number">16</span>M    <span class="hljs-number">745</span><br><span class="hljs-attribute">63936</span>  com.apple.We <span class="hljs-number">0</span>.<span class="hljs-number">4</span>  <span class="hljs-number">02</span>:<span class="hljs-number">55</span>.<span class="hljs-number">49</span> <span class="hljs-number">4</span>     <span class="hljs-number">2</span>    <span class="hljs-number">106</span>+  <span class="hljs-number">297</span>M+  <span class="hljs-number">0</span>B     <span class="hljs-number">198</span>M-  <span class="hljs-number">63936</span><br><span class="hljs-attribute">6784</span>   com.apple.We <span class="hljs-number">0</span>.<span class="hljs-number">3</span>  <span class="hljs-number">04</span>:<span class="hljs-number">13</span>.<span class="hljs-number">45</span> <span class="hljs-number">6</span>     <span class="hljs-number">1</span>    <span class="hljs-number">108</span>   <span class="hljs-number">147</span>M-  <span class="hljs-number">0</span>B     <span class="hljs-number">21</span>M    <span class="hljs-number">6784</span><br><span class="hljs-attribute">390</span>    cfprefsd     <span class="hljs-number">0</span>.<span class="hljs-number">3</span>  <span class="hljs-number">03</span>:<span class="hljs-number">47</span>.<span class="hljs-number">93</span> <span class="hljs-number">3</span>     <span class="hljs-number">2</span>    <span class="hljs-number">353</span>+  <span class="hljs-number">1572</span>K+ <span class="hljs-number">4096</span>B+ <span class="hljs-number">196</span>K   <span class="hljs-number">390</span><br></code></pre></td></tr></table></figure><p>命令输出参数解释： </p><p>以上命令输出视图中分为两个区域，一个统计信息区，一个进程信息区。 </p><p>1、统计信息区 </p><ul><li>第一行信息依次为：系统时间、运行时间、登录终端数、系统负载（三个数值分别为 1 分钟、5 分钟、15 分钟内的平均值，数值越小意味着负载越低）。 </li><li>第二行信息依次为：进程总数、运行中的进程数、睡眠中的进程数、停止的进程数、僵死的进程数。</li><li>第三行信息依次为：用户占用资源百分比、系统内核占用资源百分比、改变过优先级的进程资源百分比、空闲的资源百分比等。</li><li>第四行信息依次为：物理内存总量、内存使用量、内存空闲量、作为内核缓存的内存量。第五行信息依次为：虚拟内存总量、虚拟内存使用量、虚拟内存空闲量、预加载内存量。</li></ul><p>2、进程信息区</p><table><thead><tr><th>列名</th><th>含义</th></tr></thead><tbody><tr><td>PID</td><td>进程 ID</td></tr><tr><td>USER</td><td>进程所有者的用户名</td></tr><tr><td>PR</td><td>进程优先级</td></tr><tr><td>NI</td><td>nice 值。负值表示高优先级，正值表示低优先级</td></tr><tr><td>VIRT</td><td>进程使用的虚拟内存总量，单位 kb</td></tr><tr><td>RES</td><td>进程使用的、未被换出的物理内存大小，单位 kb</td></tr><tr><td>SHR</td><td>共享内存大小，单位 kb</td></tr><tr><td>S</td><td>进程状态 D：不可中断的睡眠状态, R：正在运行, S：睡眠, T：停止, Z：僵尸进程</td></tr><tr><td>%CPU</td><td>上次更新到现在的 CPU 时间占用百分比</td></tr><tr><td>%MEM</td><td>进程使用的物理内存百分比</td></tr><tr><td>TIME+</td><td>进程使用的 CPU 时间总计，单位 1/100 秒</td></tr><tr><td>COMMAND</td><td>命令名</td></tr></tbody></table><p>注：按 q 键退出监控页面。</p><h3 id="6-pidof"><a href="#6-pidof" class="headerlink" title="6.pidof"></a>6.pidof</h3><p>命令描述：pidof 命令用于查询指定服务进程的 PID 值。 </p><p>命令格式：pidof [服务名称]。 </p><p>命令参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-s</td><td>仅返回一个进程号</td></tr><tr><td>-c</td><td>只显示运行在 root 目录下的进程，这个选项只对 root 用户有效</td></tr><tr><td>-o</td><td>忽略指定进程号的进程</td></tr><tr><td>-x</td><td>显示由脚本开启的进程</td></tr></tbody></table><p>命令使用示例： </p><ul><li>查询出 crond 服务下的所有进程 ID。 </li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pidof crond</span><br></code></pre></td></tr></table></figure><h3 id="7-kill"><a href="#7-kill" class="headerlink" title="7.kill"></a>7.kill</h3><p>命令描述：kill 命令用于终止指定 PID 的服务进程。 </p><p>kill 可将指定的信息送至程序。预设的信息为 SIGTERM(15)，可将指定程序终止。若仍无法终止该程序，可使用 SIGKILL(9)信息尝试强制删除程序。 </p><p>命令格式：kill [参数] [进程 PID]。 </p><p>命令使用示例： </p><p>删除 pid 为 1247 的进程。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kill</span> -<span class="hljs-number">9</span> <span class="hljs-number">1247</span><br></code></pre></td></tr></table></figure><h3 id="8-killall"><a href="#8-killall" class="headerlink" title="8.killall"></a>8.killall</h3><p>命令描述：killall 命令用于终止指定名称的服务对应的全部进程。 </p><p>命令格式：killall [进程名称]。 </p><p>命令使用示例： </p><p>删除 crond 服务下的所有进程。 </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">killall crond</span><br></code></pre></td></tr></table></figure><h3 id="9-reboot"><a href="#9-reboot" class="headerlink" title="9.reboot"></a>9.reboot</h3><p>命令描述：reboot 命令用来重启系统。 </p><p>命令格式：reboot [-n] [-w] [-d] [-f] [-i]。 </p><p>命令参数说明： </p><ul><li>-n：保存数据后再重新启动系统。 </li><li>-w：仅做测试，并不是真的将系统重新开机，只会把重新开机的数据写入记录文件/var/log/wtmp。 </li><li>-d：重新启动时不把数据写入记录文件/var/tmp/wtmp。</li><li>-f：强制重新开机，不调用 shutdown 指令的功能。</li><li>-i：关闭网络设置之后再重新启动系统。 </li></ul><p>命令使用示例： </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">reboot</span><br></code></pre></td></tr></table></figure><h3 id="10-poweroff"><a href="#10-poweroff" class="headerlink" title="10.poweroff"></a>10.poweroff</h3><p>命令描述：poweroff 命令用来关闭系统。 </p><p>命令使用示例： </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">poweroff</span><br></code></pre></td></tr></table></figure><h2 id="四、系统状态检测命令"><a href="#四、系统状态检测命令" class="headerlink" title="四、系统状态检测命令"></a>四、系统状态检测命令</h2><h3 id="1-ifconfig"><a href="#1-ifconfig" class="headerlink" title="1.ifconfig"></a>1.ifconfig</h3><p>命令描述：ifconfig 命令用于获取网卡配置与网络状态等信息。</p><h3 id="2-uname"><a href="#2-uname" class="headerlink" title="2.uname"></a>2.uname</h3><p>命令描述：uname 命令用于查看系统内核与系统版本等信息。 </p><p>命令语法：uname  [-amnrsv] [–help] [–version]</p><p>命令使用示例： </p><ul><li>显示系统信息。 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -a <br></code></pre></td></tr></table></figure><ul><li>显示当前系统的硬件架构。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -i<br></code></pre></td></tr></table></figure><ul><li>显示操作系统发行编号。 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -r<br></code></pre></td></tr></table></figure><ul><li>显示操作系统名称。 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -s <br></code></pre></td></tr></table></figure><ul><li>显示主机名称。 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -n <br></code></pre></td></tr></table></figure><h3 id="3-uptime"><a href="#3-uptime" class="headerlink" title="3.uptime"></a>3.uptime</h3><p>命令描述：uptime 用于查看系统的负载信息。 </p><p>命令输出说明： </p><table><thead><tr><th>负载信息</th><th>命令输出值</th></tr></thead><tbody><tr><td>当前服务器时间</td><td>14:18</td></tr><tr><td>当前服务器运行时长</td><td>1day</td></tr><tr><td>当前用户数</td><td>2 users</td></tr><tr><td>当前负载情况</td><td>load average: 0.03, 0.04, 0.02（分别取 1min，5min，15min 的均值）</td></tr></tbody></table><h3 id="4-free"><a href="#4-free" class="headerlink" title="4.free"></a>4.free</h3><p>命令描述：free 用于显示当前系统中内存的使用量信息。 </p><p>命令语法：free  [-bkmotV] [-s &lt;间隔秒数&gt;]。 </p><p>命令参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-b</td><td>以 Byte 为单位显示内存使用情况</td></tr><tr><td>-k</td><td>以 KB 为单位显示内存使用情况</td></tr><tr><td>-m</td><td>以 MB 为单位显示内存使用情况</td></tr><tr><td>-h</td><td>以合适的单位显示内存使用情况，最大为三位数，自动计算对应的单位值。</td></tr></tbody></table><p>命令输出说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>total</td><td>物理内存总数</td></tr><tr><td>used</td><td>已经使用的内存数</td></tr><tr><td>free</td><td>空间的内存数</td></tr><tr><td>share</td><td>多个进程共享的内存总额</td></tr><tr><td>buff/cache</td><td>应用使用内存数</td></tr><tr><td>available</td><td>可用的内存数</td></tr><tr><td>Swap</td><td>虚拟内存</td></tr></tbody></table><h3 id="5-who"><a href="#5-who" class="headerlink" title="5.who"></a>5.who</h3><p>命令描述：who 命令显示关于当前在本地系统上的所有用户的信息。</p><p>命令使用示例： </p><ul><li>显示当前登录系统的用户 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">who</span><br></code></pre></td></tr></table></figure><ul><li>显示用户登录来源</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">who</span> -l -H<br></code></pre></td></tr></table></figure><ul><li>只显示当前用户</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">who</span> -m -H<br></code></pre></td></tr></table></figure><ul><li>精简模式显示</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">who</span> -q<br></code></pre></td></tr></table></figure><h3 id="6-last"><a href="#6-last" class="headerlink" title="6.last"></a>6.last</h3><p>命令描述： last 命令用于显示用户最近登录信息。 </p><p>命令使用示例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@root ~ # last<br><span class="hljs-attribute">root</span>  ttys000                   Sat Mar  <span class="hljs-number">5</span> <span class="hljs-number">12</span>:<span class="hljs-number">40</span>   still logged in<br><span class="hljs-attribute">root</span>  ttys000                   Sat Mar  <span class="hljs-number">5</span> <span class="hljs-number">12</span>:<span class="hljs-number">40</span> - <span class="hljs-number">12</span>:<span class="hljs-number">40</span>  (<span class="hljs-number">00</span>:<span class="hljs-number">00</span>)<br><span class="hljs-attribute">root</span>  ttys000                   Sat Mar  <span class="hljs-number">5</span> <span class="hljs-number">12</span>:<span class="hljs-number">12</span> - <span class="hljs-number">12</span>:<span class="hljs-number">12</span>  (<span class="hljs-number">00</span>:<span class="hljs-number">00</span>)<br><span class="hljs-attribute">root</span>  ttys000                   Sat Mar  <span class="hljs-number">5</span> <span class="hljs-number">11</span>:<span class="hljs-number">52</span> - <span class="hljs-number">11</span>:<span class="hljs-number">52</span>  (<span class="hljs-number">00</span>:<span class="hljs-number">00</span>)<br><span class="hljs-attribute">root</span>  ttys000                   Fri Mar  <span class="hljs-number">4</span> <span class="hljs-number">23</span>:<span class="hljs-number">04</span> - <span class="hljs-number">23</span>:<span class="hljs-number">04</span>  (<span class="hljs-number">00</span>:<span class="hljs-number">00</span>)<br><span class="hljs-attribute">root</span>  ttys000                   Fri Mar  <span class="hljs-number">4</span> <span class="hljs-number">22</span>:<span class="hljs-number">42</span> - <span class="hljs-number">22</span>:<span class="hljs-number">42</span>  (<span class="hljs-number">00</span>:<span class="hljs-number">00</span>)<br></code></pre></td></tr></table></figure><p>注：由于这些信息都是以日志文件的形式保存在系统中，黑客可以很容易地对内容进行篡改，所以该命令输出的信息并不能作为服务器是否被入侵的依据。</p><h3 id="7-history"><a href="#7-history" class="headerlink" title="7.history"></a>7.history</h3><p>命令描述：history 命令用于显示历史执行过的命令。 </p><p>bash 默认记录 1000 条执行过的历史命令，被记录在~/.bash_history 文件中。 </p><p>命令使用示例： </p><ul><li>显示最新 10 条执行过的命令。</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">history</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><ul><li>清除历史记录。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">history</span> -c<br></code></pre></td></tr></table></figure><h2 id="五、磁盘管理命令"><a href="#五、磁盘管理命令" class="headerlink" title="五、磁盘管理命令"></a>五、磁盘管理命令</h2><h3 id="1-df命令"><a href="#1-df命令" class="headerlink" title="1.df命令"></a>1.df命令</h3><p>df 命令描述：该命令检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><p>df 命令语法：df [参数] [目录或文件名]。 </p><p>参数说明：</p><ul><li>-a 列出所有的文件系统，包括系统特有的/proc 等文件系统。 </li><li>-k 以 KBytes 为单位，返回各文件系统容量。 </li><li>-m 以 MBytes 为单位，返回各文件系统容量。 </li><li>-h 以 GBytes、MBytes、KBytes 为单位，返回各文件系统容量。</li><li>-H 以 M=1000K 取代 M=1024K 的进位方式显示各文件系统容量。 </li><li>-T 显示文件系统类型。 </li><li>-i 显示 inode 信息。</li></ul><p>df 命令使用示例： </p><p>示例一：显示磁盘使用情况。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span><br></code></pre></td></tr></table></figure><p>示例二：以 inode 模式来显示磁盘使用情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -i<br></code></pre></td></tr></table></figure><p>示例三：显示系统内的所有特殊文件格式、名称及磁盘使用情况。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">df -<span class="hljs-keyword">aT</span><br></code></pre></td></tr></table></figure><p>示例四：以 GBytes、MBytes、KBytes 等格式显示各文件系统容量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h<br></code></pre></td></tr></table></figure><h3 id="2-du命令"><a href="#2-du命令" class="headerlink" title="2.du命令"></a>2.du命令</h3><p>du 命令描述：查看磁盘使用空间。du 与 df 命令不同点在于，du 命令用于查看文件和目录磁盘的使用空间。</p><p>du 命令语法：du [参数] [文件或目录名称]。 </p><p>参数说明： </p><ul><li>-a 列出所有的文件与目录容量。 </li><li>-h 以 G、M、K 为单位，返回容量。 </li><li>-s 列出总量。</li><li>列出不包括子目录下的总量。 </li><li>-k 以 KBytes 为单位，返回容量。 </li><li>-m 以 MBytes 为单位，返回容量。 </li></ul><p>du 命令使用示例： </p><p>示例一：列出当前目录下的所有文件夹的容量。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span><br></code></pre></td></tr></table></figure><p>示例二：列出当前目录下的所有文件夹和文件的容量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -a<br></code></pre></td></tr></table></figure><p>示例三：列出当前目录下的所有文件夹和文件的容量，并以 G、M、K 格式显示容量。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -ah<br></code></pre></td></tr></table></figure><h3 id="3-fdisk-命令"><a href="#3-fdisk-命令" class="headerlink" title="3.fdisk 命令"></a>3.fdisk 命令</h3><p>fdisk 命令描述：该命令用于磁盘分区。 </p><p>fdisk 命令语法：fdisk [-l] 装置名称。 </p><p>参数说明：</p><ul><li>-l 输出后面装置名称的所有的分区内容。若仅有 fdisk -l 时， 则系统将会把整个系统内能够搜寻到的装置的分区均列出来。</li></ul><p>fdisk 命令使用示例： </p><p>示例一：列出系统所有装置的分区信息。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">fdisk -l</span><br></code></pre></td></tr></table></figure><p>示例二：列出系统中的根目录所在磁盘，并查阅该硬盘内的相关信息。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">A、执行命令，找出根目录所在磁盘名：df /<br>B、执行命令，对磁盘<span class="hljs-regexp">/dev/</span>vda 进行分区操作： fdisk <span class="hljs-regexp">/dev/</span>vda<br>C、执行命令，获取帮助：m  执行命令，查看磁盘状态： p<br>D、执行命令，不存储任何操作并离开：q<br></code></pre></td></tr></table></figure><h3 id="4-cmp命令"><a href="#4-cmp命令" class="headerlink" title="4.cmp命令"></a>4.cmp命令</h3><p>cmp 命令描述：该命令用于比较两个文件是否有差异。当相互比较的两个文件完全一样时，该指令不会显示任何信息。否则会标示出第一个不同之处的字符和列数编号。当不指定任何文件名称，或文件名为”-“，则 cmp 指令会从标准输入设备读取数据。</p><p>cmp 命令语法：cmp  [-clsv] [-i &lt;字符数目&gt;] [–help] [第一个文件] [第二个文件]。 </p><p>参数说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-c</td><td>除了标明差异处的十进制字码之外，一并显示该字符所对应字符。</td></tr><tr><td>-i &lt;字符数目&gt;</td><td>指定一个数目。</td></tr><tr><td>-l</td><td>标示出所有不一样的地方。</td></tr><tr><td>-s</td><td>不显示错误信息。</td></tr><tr><td>-v</td><td>显示版本信息。</td></tr><tr><td>–help</td><td>在线帮助。</td></tr></tbody></table><p>cmp 命令使用示例： </p><ul><li>A、执行如下命令，将一个自增序列 1-5 写入 test1.txt 文件中。 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 1 5); <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span> &gt;&gt; test1.txt ; <span class="hljs-keyword">done</span> <br></code></pre></td></tr></table></figure><ul><li>B、执行如下命令，比较 test1.txt 文件和 test2.txt 文件是否相同。 </li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">cmp</span> test1.txt test2.txt<br></code></pre></td></tr></table></figure><h3 id="5-file命令"><a href="#5-file命令" class="headerlink" title="5.file命令"></a>5.file命令</h3><p>file 命令描述：该命令用于辨识文件类型。 </p><p>file 命令语法：file [参数] [文件]。 </p><p>参数说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-b</td><td>列出辨识结果时，不显示文件名称。</td></tr><tr><td>-c</td><td>详细显示指令执行过程，便于排错或分析程序执行的情形。</td></tr><tr><td>-f&lt;名称文件&gt;</td><td>指定名称文件，其内容有一个或多个文件名称时，让 file 依序辨识这些文件，格式为每列一个文件名称。</td></tr><tr><td>-L</td><td>直接显示符号连接所指向的文件的类别。</td></tr><tr><td>-v</td><td>显示版本信息。</td></tr><tr><td>-z</td><td>解读压缩文件的内容。</td></tr></tbody></table><p>file 命令使用示例：</p><ul><li>A、执行如下命令，显示 test1.txt 文件类型。</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">file</span> test1.txt<br></code></pre></td></tr></table></figure><ul><li>B、执行如下命令，显示 test2.txt 文件类型并不显示文件名称。 </li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">file</span> -b test2.txt<br></code></pre></td></tr></table></figure><h3 id="6-find命令"><a href="#6-find命令" class="headerlink" title="6.find命令"></a>6.find命令</h3><p>find 命令描述：该命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则 find 命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。 </p><p>find 命令语法：find [参数] [文件]。 </p><p>参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-mount</td><td>只检查和指定目录在同一个文件系统下的文件，避免列出其它文件系统中的文件。</td></tr><tr><td>-amin n</td><td>在过去 n 分钟内被读取过文件。</td></tr><tr><td>-type c</td><td>文件类型是 c 的文件。</td></tr><tr><td>-cmin n</td><td>在过去 n 分钟内被修改过。</td></tr><tr><td>-name name</td><td>查找文件名称为 name 的文件。</td></tr></tbody></table><p>find 命令使用示例： </p><ul><li>A、执行如下命令，将当前目录及其子目录下所有文件后缀为.txt 的文件列出来。 </li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> . -name <span class="hljs-string">&quot;*.txt&quot;</span> <br></code></pre></td></tr></table></figure><ul><li>B、执行如下命令，查找系统中所有文件长度为 0 的普通文件，并列出它们的完整路径。 </li></ul><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">find</span> / -<span class="hljs-built_in">type</span> f -<span class="hljs-built_in">size</span> <span class="hljs-number">0</span> -<span class="hljs-built_in">exec</span> ls -l &#123;&#125; \;<br></code></pre></td></tr></table></figure><h2 id="六、文件目录管理命令"><a href="#六、文件目录管理命令" class="headerlink" title="六、文件目录管理命令"></a>六、文件目录管理命令</h2><h3 id="1-tree"><a href="#1-tree" class="headerlink" title="1.tree"></a>1.tree</h3><p>命令描述：tree 命令用于以树状图列出目录的内容。 </p><p>tree 命令没有内置在系统中，使用 tree 命令需要执行以下命令来安装： </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y tree <br></code></pre></td></tr></table></figure><p>命令使用示例： </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">tree <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wallpapers/</span> <br></code></pre></td></tr></table></figure><h3 id="2-ls"><a href="#2-ls" class="headerlink" title="2.ls"></a>2.ls</h3><p>命令描述： ls 命令用于显示指定工作目录下的内容。 </p><p>命令格式：ls [参数] [目录名]。</p><p>常用参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-a</td><td>显示所有文件及目录（包括隐藏文件）</td></tr><tr><td>-l</td><td>将文件的权限、拥有者、文件大小等详细信息列出（ll 等同于 ls -l）</td></tr><tr><td>-r</td><td>将文件反序列出（默认按英文字母正序）</td></tr><tr><td>-t</td><td>将文件按创建时间正序列出</td></tr><tr><td>-R</td><td>递归遍历目录下文件</td></tr></tbody></table><p>命令使用示例： </p><ul><li>查看当前目录下的所有文件（包括隐藏文件）。 </li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">al</span><br></code></pre></td></tr></table></figure><h3 id="3-pwd"><a href="#3-pwd" class="headerlink" title="3.pwd"></a>3.pwd</h3><p>命令描述：获取当前工作目录的绝对路径。</p><h3 id="4-cd"><a href="#4-cd" class="headerlink" title="4.cd"></a>4.cd</h3><p>命令描述：cd 命令用于切换工作目录。</p><p>在路径表示中： </p><ul><li>一个半角句号（.）表示当前目录，例如路径./app/log 等同于 app/log。 </li><li>两个半角句号（..）表示上级目录，例如路径/usr/local/../src 等同于/usr/src，其中 local 和 src 目录同级。</li></ul><p>注：cd 命令的默认参数为~，符号 ~ 表示当前用户的家目录，即在 root 用户登录时，命令 cd、cd ~和 cd /root 执行效果相同。</p><h3 id="5-touch"><a href="#5-touch" class="headerlink" title="5.touch"></a>5.touch</h3><p>命令描述：touch 命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。 </p><p>命令格式：touch [参数] [文件]。 </p><p>参数说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-c</td><td>如果指定文件不存在，不会建立新文件</td></tr><tr><td>-r</td><td>使用参考文件的时间记录</td></tr><tr><td>-t</td><td>设置文件的时间记录</td></tr></tbody></table><p>命令使用示例： </p><ul><li>创建两个空文件。 </li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">touch dem<span class="hljs-meta">o1</span>.txt dem<span class="hljs-meta">o2</span>.txt<br></code></pre></td></tr></table></figure><ul><li>修改 demo1.txt 的时间记录为当前系统时间。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> demo1.txt<br></code></pre></td></tr></table></figure><ul><li>更新 demo2.txt 的时间记录，使其和 demo1.txt 的时间记录相同。</li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">touch -r dem<span class="hljs-meta">o1</span>.txt dem<span class="hljs-meta">o2</span>.txt<br></code></pre></td></tr></table></figure><h3 id="6-mkdir"><a href="#6-mkdir" class="headerlink" title="6.mkdir"></a>6.mkdir</h3><p>命令描述：mkdir 命令用于新建子目录。-p 参数确保目录名称存在，不存在的就新建一个。 </p><p>命令使用示例： </p><ul><li>新建目录 a/b/c/d，并使用 tree 命令查看创建后的目录结构</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mkdir -<span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">a</span>/<span class="hljs-selector-tag">b</span>/c/d<br></code></pre></td></tr></table></figure><h3 id="7-rm"><a href="#7-rm" class="headerlink" title="7.rm"></a>7.rm</h3><p>命令描述：rm 命令用于删除一个文件或者目录。 </p><p>命令格式：rm [参数] [文件]。 </p><p>参数说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-i</td><td>删除前逐一询问确认</td></tr><tr><td>-f</td><td>无需确认，直接删除</td></tr><tr><td>-r</td><td>删除目录下所有文件</td></tr></tbody></table><p>命令使用示例： </p><ul><li>无需确认直接删除文件。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf demo*<br></code></pre></td></tr></table></figure><ul><li>无需确认直接删除目录 a 及其目录下所有子目录和文件。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf a<br></code></pre></td></tr></table></figure><h3 id="8-cp"><a href="#8-cp" class="headerlink" title="8.cp"></a>8.cp</h3><p>命令描述： cp 命令主要用于复制文件或目录。 </p><p>命令格式：cp [参数] [源文件] [目标文件]。 </p><p>参数说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-d</td><td>复制时保留链接</td></tr><tr><td>-f</td><td>覆盖已经存在的目标文件而不给出提示</td></tr><tr><td>-i</td><td>覆盖前询问</td></tr><tr><td>-p</td><td>除复制文件的内容外，还把修改时间和访问权限也复制到新文件中</td></tr><tr><td>-r</td><td>复制目录及目录内的所有项目</td></tr></tbody></table><p>命令使用示例： </p><ul><li>将目录 c/d 中的所有内容复制到目录 a/b 下。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> -r c a/b<br></code></pre></td></tr></table></figure><h3 id="9-mv"><a href="#9-mv" class="headerlink" title="9.mv"></a>9.mv</h3><p>命令描述： mv 命令用来为文件或目录改名、或将文件或目录移入其它位置。 </p><p>命令格式：mv [参数] [源文件] [目标文件]。 </p><p>参数说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-i</td><td>若指定目录已有同名文件，则先询问是否覆盖旧文件</td></tr><tr><td>-f</td><td>如果目标文件已经存在，不会询问而直接覆盖</td></tr></tbody></table><p>命令使用示例： </p><ul><li>将文件名 a.txt 改为 b.txt。</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mv <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span> <span class="hljs-selector-tag">b</span>.txt<br></code></pre></td></tr></table></figure><ul><li>将 c 目录移动到 a/b/c/d/下。 </li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mv c a<span class="hljs-regexp">/b/</span>c<span class="hljs-regexp">/d/</span><br></code></pre></td></tr></table></figure><ul><li>将当前目录内容全部移动到/tmp 目录中。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mv .<span class="hljs-regexp">/* /</span>tmp<br></code></pre></td></tr></table></figure><h3 id="10-rename"><a href="#10-rename" class="headerlink" title="10.rename"></a>10.rename</h3><p>命令描述：rename 命令用字符串替换的方式批量改变文件名。rename 命令有 C 语言和 Perl语言两个版本，这里介绍 C 语言版本的 rename 命令，不支持正则表达式。</p><p>命令使用示例： </p><ul><li>将当前目录下所有文件名中的字符串 demo 改为大写的字符串 DEMO。</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">rename</span> <span class="hljs-built_in">demo</span> DEMO *<br></code></pre></td></tr></table></figure><ul><li>将当前目录下所有.txt 文件后缀都改为 text。 </li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">rename <span class="hljs-string">.txt</span> <span class="hljs-string">.text</span> *<br></code></pre></td></tr></table></figure><h2 id="七、文件权限管理"><a href="#七、文件权限管理" class="headerlink" title="七、文件权限管理"></a>七、文件权限管理</h2><h4 id="ls-命令可以查看-Linux-系统上的文件、目录和设备的权限。"><a href="#ls-命令可以查看-Linux-系统上的文件、目录和设备的权限。" class="headerlink" title="ls 命令可以查看 Linux 系统上的文件、目录和设备的权限。"></a>ls 命令可以查看 Linux 系统上的文件、目录和设备的权限。</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ls -l <span class="hljs-regexp">/boot/</span><br></code></pre></td></tr></table></figure><p> ls -l 命令中显示的第一列就是文件权限信息，共 11 位字符，分 5 部分。</p><ul><li>第 1 位表示存档类型，d 表示目录，-表示一般文件。 </li><li>第 2~4 位表示当前用户的权限（属主权限）。</li><li>第 5~7 位表示同用户组的用户权限（属组权限）。 </li><li>第 8~10 位表示不同用户组的用户权限（其他用户权限）。</li><li>第 11 位是一个半角句号.，表示 SELinux 安全标签。</li></ul><p>注：用户权限每组三位，rwx 分别表示读、写、执行权限，对应八进制表示为 4、2、1。</p><p>例如 efi 目录的 root 用户权限为 drwxr-xr-x.。 </p><ul><li>该目录对 root 用户具有读写和执行所有权限。 </li><li>该目录对 root 组其他用户有读和执行权限。 </li><li>该目录对其他用户有读和执行权限。 </li></ul><p>所以该权限表示对应八进制权限表示为： </p><ul><li>属主权限：4+2+1=7。 </li><li>属组权限：4+1=5。 </li><li>其他用户权限：4+1=5。</li></ul><p>即 755。 </p><h3 id="1-chmod"><a href="#1-chmod" class="headerlink" title="1.chmod"></a>1.chmod</h3><p>chmod 命令用于修改文件权限 mode，-R 参数以递归方式对子目录和文件进行修改。 </p><p>命令使用示例： </p><ul><li>1、新建名为 hello.sh 的 Shell 脚本，该脚本将会输出 Hello World。用 ll 命令可以看到新建的脚本没有执行权限，其权限用八进制表示为 644。 </li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">root@<span class="hljs-keyword">local</span> ~ % echo <span class="hljs-string">&quot;echo &#x27;hello world&#x27;&quot;</span> &gt; hello.<span class="hljs-keyword">sh</span><br>root@<span class="hljs-keyword">local</span> ~ % <span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span><br><span class="hljs-keyword">total</span> 4<br>-rw-r--r--   1 root  staff        19  3  5 20:10 hello.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><ul><li>2、将 hello.sh 文件增加属主的执行权限。</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">root@<span class="hljs-keyword">local</span> ~ % chmod <span class="hljs-keyword">u</span>+x hello.<span class="hljs-keyword">sh</span><br>root@<span class="hljs-keyword">local</span> ~ % <span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span><br><span class="hljs-keyword">total</span> 4<br>-rwxr--r--   1 root  staff        19  3  5 20:10 hello.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><ul><li>3、将 hello.sh 文件撤销属主的执行权限。 </li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">root@<span class="hljs-keyword">local</span> ~ % chmod <span class="hljs-keyword">u</span>-x hello.<span class="hljs-keyword">sh</span><br>root@<span class="hljs-keyword">local</span> ~ % <span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span><br><span class="hljs-keyword">total</span> 4<br>-rw-r--r--   1 root  staff        19  3  5 20:10 hello.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><ul><li>4、将 hello.sh 文件权限修改为八进制表示的 744 权限。</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">root@<span class="hljs-keyword">local</span> ~ % chmod 744 hello.<span class="hljs-keyword">sh</span><br>root@<span class="hljs-keyword">local</span> ~ % <span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span><br><span class="hljs-keyword">total</span> 4<br>-rwxr--r--   1 dinglong  staff        19  3  5 20:10 hello.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><ul><li>5、使用 bash 命令解释器执行 hello.sh 脚本文件。 </li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript">root<span class="hljs-meta">@local</span> ~ % <span class="hljs-regexp">/bin/</span>bash hello.<span class="hljs-property">sh</span><br>hello world<br></code></pre></td></tr></table></figure><p>注：u+x 表示增加属主的执行权限，u 表示属主，g 表示属组，o 表示其他，a 表示所有用户</p><h3 id="2-chown"><a href="#2-chown" class="headerlink" title="2.chown"></a>2.chown</h3><p>chown 命令修改文件的属主和属组；-R 参数以递归方式对子目录和文件进行修改；ls -l 命令显示的第三列和第四列就是文件的属主和属组信息。</p><p>命令使用示例： </p><ul><li>1、新建一个文本文件 test.txt，用 ll 命令可以看到该文件的属主和属组是 root。whoami 命令可以查看当前 Shell 环境登录的用户名。 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">whomi<br><span class="hljs-built_in">touch</span> text.txt<br><span class="hljs-built_in">ls</span> -l<br></code></pre></td></tr></table></figure><ul><li>2、创建两个用户。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">useradd <span class="hljs-built_in">test</span> <br>useradd admin<br></code></pre></td></tr></table></figure><ul><li>3、修改 test.txt 文件的属主用户为 test。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> <span class="hljs-built_in">test</span> test.txt <br><span class="hljs-built_in">ls</span> -l<br></code></pre></td></tr></table></figure><ul><li>4、修改 test.txt 文件的属主和属组为 admin。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> admin:admin test.txt <br><span class="hljs-built_in">ls</span> -l<br></code></pre></td></tr></table></figure><h3 id="3-chgrp"><a href="#3-chgrp" class="headerlink" title="3.chgrp"></a>3.chgrp</h3><p>chgrp 命令用于修改文件的属组。 </p><p>命令使用示例： </p><ul><li>将 test.txt 文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chgrp</span> root test.txt <br><span class="hljs-built_in">ls</span> -l<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis常用命令</title>
    <link href="/2022/03/04/Redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/03/04/Redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="1-全局命令"><a href="#1-全局命令" class="headerlink" title="1.全局命令"></a>1.全局命令</h2><figure class="highlight lsl"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs lsl">获取redis配置信息：config get &lt;pattern&gt; <br>pattern设置匹配字符串，*号表示所有<br>修改配置：config set &lt;param&gt; &lt;value&gt;<br>健总数：dbsize<br>切换数据库（index：<span class="hljs-number">0</span> ~ <span class="hljs-number">15</span>）： select index<br>设置键值<span class="hljs-type">key</span>：set <span class="hljs-type">key</span> value [EX seconds] [PX milliseconds] [NX|XX]<br>返回指定查询模式的Key：keys &lt;pattern&gt;<br>判断指定一个或多个<span class="hljs-type">key</span>是否存在：exists <span class="hljs-type">key</span> [<span class="hljs-type">key</span> ...]<br>设置指定的<span class="hljs-type">key</span>过期：expire <span class="hljs-type">key</span> seconds(秒)<br>通过设置过期时间清除缓存： expire <span class="hljs-type">key</span> seconds 或者 set <span class="hljs-type">key</span> value [EX seconds] [PX milliseconds] [NX|XX]<br>移除<span class="hljs-type">key</span>的过期时间：pexpire <span class="hljs-type">key</span> milliseconds(毫秒)<br>获取指定KEY的过期时间：ttl <span class="hljs-type">key</span>(秒) 或 pttl <span class="hljs-type">key</span>(毫秒)<br>判断指定<span class="hljs-type">key</span>的数据类型（<span class="hljs-type">string</span>,<span class="hljs-type">list</span>,hash,set,zset,...）：type <span class="hljs-type">key</span><br>删除指定的一个或多个<span class="hljs-type">key</span>：del <span class="hljs-type">key</span> [<span class="hljs-type">key</span> ...]<br>删除当前数据库所有数据：flushdb<br>删除所有数据库的数据：flushall<br>查询内部编码：object encoding <span class="hljs-type">key</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">内部编码：<span class="hljs-keyword">object</span> <span class="hljs-keyword">encoding</span> key<br>停掉Redis服务：shutdown save<br>查询信息：<span class="hljs-keyword">info</span> memory<br></code></pre></td></tr></table></figure><h2 id="2-字符串string"><a href="#2-字符串string" class="headerlink" title="2.字符串string"></a>2.字符串string</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xquery">设置值：set<span class="hljs-built_in"> key</span> <span class="hljs-keyword">value</span> [ex seconds] [px milliseconds] [nx|xx]<br>ex seconds：为键设置秒级过期时间。 <br>px milliseconds：为键设置毫秒级过期时间。 <br>nx：键必须不存在，才可以设置成功，用于添加。 <br>xx：与nx相反，键必须存在，才可以设置成功，用于更新。<br>键必须不存在，才可以设置成功，用于添加：setnx<span class="hljs-built_in"> key</span> <span class="hljs-keyword">value</span> <br>键必须不存在，才可以设置成功，为键设置秒级过期时间：setex<span class="hljs-built_in"> key</span> seconds <span class="hljs-keyword">value</span><br>键必须存在，才可以设置成功，用于更新：set<span class="hljs-built_in"> key</span> <span class="hljs-keyword">value</span> xx<br>获取键值：get<span class="hljs-built_in"> key</span><br>批量设置值：mset<span class="hljs-built_in"> key</span> <span class="hljs-keyword">value</span> <span class="hljs-built_in">[key</span> <span class="hljs-keyword">value</span> ...]<br>批量获取值：mget<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[key</span> ...]<br>自增：incr<span class="hljs-built_in"> key</span> | incrby<span class="hljs-built_in"> key</span> long(数)<br>自减：decr<span class="hljs-built_in"> key</span> <br>自增指定数字：incrby<span class="hljs-built_in"> key</span> increment <br>自减指定数字：decrby<span class="hljs-built_in"> key</span> decrement <br>自增浮点数：incrbyfloat<span class="hljs-built_in"> key</span> increment<br><br>追加值：append<span class="hljs-built_in"> key</span> <span class="hljs-keyword">value</span><br>字符串长度：strlen<span class="hljs-built_in"> key</span><br>设置并返回原值：getset<span class="hljs-built_in"> key</span> <span class="hljs-keyword">value</span><br>设置指定位置的字符：setrange<span class="hljs-built_in"> key</span> offeset <span class="hljs-keyword">value</span><br>获取部分字符串：getrange<span class="hljs-built_in"> key</span> <span class="hljs-keyword">start</span> <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="3-列表（按索引排序，元素可重复）list"><a href="#3-列表（按索引排序，元素可重复）list" class="headerlink" title="3.列表（按索引排序，元素可重复）list"></a>3.列表（按索引排序，元素可重复）list</h2><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs tcl">从左边插入元素：lpush key value [value ...] <br>从右边插入元素：rpush key value [value ...] <br>向某个元素前或者后插入元素：<span class="hljs-keyword">linsert</span> key before|<span class="hljs-keyword">after</span> pivot value<br>从左到右获取列表的所有元素：<span class="hljs-keyword">lrange</span> key <span class="hljs-number">0</span> <span class="hljs-number">-1</span><br>获取指定范围内的元素列表：<span class="hljs-keyword">lrange</span> key start stop<br>获取列表指定索引下标的元素：<span class="hljs-keyword">lindex</span> key index<br>从左端移除一个元素：lpop key<br>从右端移除一个元素：rpop key<br>删除指定元素：lrem key count value<br>按照索引范围修剪列表：ltrim key start end<br>修改指定索引下标的元素：<span class="hljs-keyword">lset</span> key index newValue<br>获取列表长度（大小）：llen key<br><br>阻塞式弹出如下：blpop key [key ...] timeout <br> brpop key [key ...] timeout<br>  <br>  <br>·lpush+lpop=Stack（栈）<br>·lpush+rpop=Queue（队列） <br>·lpsh+ltrim=Capped Collection（有限集合）<br>·lpush+brpop=Message Queue（消息队列）<br></code></pre></td></tr></table></figure><h2 id="4-哈希（字段名称不能重复）hash"><a href="#4-哈希（字段名称不能重复）hash" class="headerlink" title="4.哈希（字段名称不能重复）hash"></a>4.哈希（字段名称不能重复）hash</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lsl">设置单个字段值：hset <span class="hljs-type">key</span> field value<br>设置多个字段值：hmset <span class="hljs-type">key</span> field value [field value ...]<br>字段值自增：hincrby <span class="hljs-type">key</span> field increment<br>判断哈希中是否有某个字段：hexists <span class="hljs-type">key</span> field<br>删除哈希中field：hdel <span class="hljs-type">key</span> field [field ...]<br>获取某个字段值：hget <span class="hljs-type">key</span> field<br>获取多个字段值：hmget <span class="hljs-type">key</span> field [field ...]<br>获取哈希的所有内容field-value：hgetall <span class="hljs-type">key</span><br>获取哈希的所有字段名称：hkeys <span class="hljs-type">key</span><br>获取哈希的所有字段值：hvals <span class="hljs-type">key</span><br>获取哈希元素个数：hlen <span class="hljs-type">key</span><br>判断field是否存在：hexists <span class="hljs-type">key</span> field<br>计算value的字符串长度：hstrlen <span class="hljs-type">key</span> field<br></code></pre></td></tr></table></figure><h2 id="5-集合（元素不可重复，无效）set"><a href="#5-集合（元素不可重复，无效）set" class="headerlink" title="5.集合（元素不可重复，无效）set"></a>5.集合（元素不可重复，无效）set</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xquery">添加：sadd<span class="hljs-built_in"> key</span> member [member ...]<br>返回集合中的所有元素：smembers<span class="hljs-built_in"> key</span><br>判断元素是否在集合中：sismember<span class="hljs-built_in"> key</span> member<br>随机从集合返回指定个数元素：srandmember<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[count</span>]<br>删除指定的元素：srem<span class="hljs-built_in"> key</span> member [member ...]<br>从集合随机弹出元素：spop<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[count</span>]<br>随机移<span class="hljs-built_in">除count</span>个元素，返回被移除的元素列表：spop<span class="hljs-built_in"> key</span><span class="hljs-built_in"> count</span><br>返回集合元素个数：scard<span class="hljs-built_in"> key</span><br><br><br>集合间操作：交集（sinter/sinterstore）、并集（sunion/sunionstore）、差集（sdiff/sdiffstore） <br>交集，返回集合间的共同元素：sinter<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[key</span> ...]<br>交集，将交集元素存储到目标集合中：sinterstore destination<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[key</span> ...]<br>并集，返回多个集合去重后的所有元素：sunion<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[key</span> ...]<br>并集，并将并集元素存储到目标集合中：sunionstore destination<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[key</span> ...]<br>差集（A - B，结果：把A、B的共同元素从A集合中移除）：sdiff<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[key</span> ...]<br>差集：sdiffstore destination<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[key</span> ...]<br><br><br>·sadd=Tagging（标签）<br>·spop/srandmember=Random <span class="hljs-type">item</span>（生成随机数，比如抽奖）<br>·sadd+sinter=Social Graph（社交需求）<br></code></pre></td></tr></table></figure><h2 id="6-有序集合（元素不可重复，可根据分值score进行排序）sorted-set"><a href="#6-有序集合（元素不可重复，可根据分值score进行排序）sorted-set" class="headerlink" title="6.有序集合（元素不可重复，可根据分值score进行排序）sorted set"></a>6.有序集合（元素不可重复，可根据分值score进行排序）sorted set</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xquery">添加元素：zadd<span class="hljs-built_in"> key</span> [NX|XX] [CH] [INCR] score member [score member ...]<br>·nx：member必须不存在，才可以设置成功，用于添加。 <br>·xx：member必须存在，才可以设置成功，用于更新。<br>        ·ch：返回此次操作后，有序集合元素和分数发生变化的个数 <br>        ·incr：对score做增加，相当于后面介绍的zincrby<br> <br>计算成员个数：zcard<span class="hljs-built_in"> key</span><br>范围查询（按分值升序）：zrange<span class="hljs-built_in"> key</span> <span class="hljs-keyword">start</span> stop [withscores]<br>范围查询（按分值倒序）：zrevrange<span class="hljs-built_in"> key</span> <span class="hljs-keyword">start</span> stop [withscores]<br>返回指定分数范围的成员（升序）：zrangebyscore<span class="hljs-built_in"> key</span><span class="hljs-built_in"> min</span><span class="hljs-built_in"> max</span> [WITHSCORES] [LIMIT offset<span class="hljs-built_in"> count</span>]<br>返回指定分数范围的成员（倒序）：zrevrangebyscore<span class="hljs-built_in"> key</span><span class="hljs-built_in"> max</span><span class="hljs-built_in"> min</span> [WITHSCORES] [LIMIT offset<span class="hljs-built_in"> count</span>]<br>注<span class="hljs-built_in">：min</span><span class="hljs-built_in">和max</span>还支持开区间（小括号）和闭区间（中括号），-inf和 +inf分别代表无限小和无限大<br>获取某个成员的分数：zscore<span class="hljs-built_in"> key</span> member<br>获取指定元素的排行（升序）：zrank<span class="hljs-built_in"> key</span> member<br>          （降序）：zrevrank<span class="hljs-built_in"> key</span> member<br>增加某个元素分值：zincrby<span class="hljs-built_in"> key</span> increment member (increment指定要增、减（负数）的分值)<br>删除指定排名内的升序元素：zremrangebyrank<span class="hljs-built_in"> key</span> <span class="hljs-keyword">start</span> <span class="hljs-keyword">end</span><br>删除指定的元素：zrem<span class="hljs-built_in"> key</span> member [member ...]<br>根据分值范围删除元素：zremrangebyscore<span class="hljs-built_in"> key</span><span class="hljs-built_in"> min</span><span class="hljs-built_in"> max</span><br>获取指定分值范围的元素个数：zcount<span class="hljs-built_in"> key</span><span class="hljs-built_in"> min</span><span class="hljs-built_in"> max</span><br><br><br>集合间操作：<br>交集：zinterstore destination numkeys<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[key</span> ...] [weights weight [weight ...]] [aggregate<span class="hljs-built_in"> sum</span><span class="hljs-built_in">|min</span><span class="hljs-built_in">|max</span>]<br>·destination：交集计算结果保存到这个键<br>·numkeys：需要做交集计算键的个数<br><span class="hljs-built_in">·key</span><span class="hljs-built_in">[key</span>...]：需要做交集计算的键<br>·weights weight[weight...]：每个键的权重，在做交集计算时，每个键中的每个member会将自己分数乘以这个权重，每个键的权重默认是<span class="hljs-number">1</span><br>·aggregate<span class="hljs-built_in"> sum</span><span class="hljs-built_in">|min</span><span class="hljs-built_in">|max</span>：计算成员交集后，分值可以按<span class="hljs-built_in">照sum</span>（和）、<span class="hljs-built_in"> min</span>（最小值）<span class="hljs-built_in">、max</span>（最大值）做汇总，默认值<span class="hljs-built_in">是sum</span><br>并集：zunionstore destination numkeys<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[key</span> ...] [weights weight [weight ...]] [aggregate<span class="hljs-built_in"> sum</span><span class="hljs-built_in">|min</span><span class="hljs-built_in">|max</span>]<br></code></pre></td></tr></table></figure><h2 id="7-键管理"><a href="#7-键管理" class="headerlink" title="7.键管理"></a>7.键管理</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xquery">键重命名：<span class="hljs-keyword">rename</span><span class="hljs-built_in"> key</span> newkey<br>保只有newKey 不存在时候才被覆盖：renamenx<span class="hljs-built_in"> key</span> newkey<br>随机返回一个键：randomkey<br>键过期：expire<span class="hljs-built_in"> key</span> seconds：键在seconds秒后过期<br>expireat<span class="hljs-built_in"> key</span> timestamp：键在秒级时间戳timestamp后过期<br>    注：对于字符串类型键，执行set命令会去掉过期时间，这个问题很容易 在开发中被忽视<br><br>移<span class="hljs-built_in">除key</span>的过期时间：pexpire<span class="hljs-built_in"> key</span> milliseconds(毫秒)<br>迁移键：把指定的键从源数据库移动到目标数据库：move<span class="hljs-built_in"> key</span> db<br>dump+restore可以实现在不同的Redis实例之间进行数据迁移的功能：<br><span class="hljs-number">1</span>）在源Redis上，dump命令会将键值序列化，格式采用的是RDB格式：dump<span class="hljs-built_in"> key</span><br><span class="hljs-number">2</span>）在目标Redis上，restore命令将上面序列化的值进行复原：restore<span class="hljs-built_in"> key</span> ttl <span class="hljs-keyword">value</span><br><span class="hljs-number">3</span>）用于在Redis实例间进行数据迁移：migrate host port<span class="hljs-built_in"> key</span>|<span class="hljs-string">&quot;&quot;</span> destination-db timeout [<span class="hljs-keyword">copy</span>] <span class="hljs-built_in">[replace</span>] [keys<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[key</span> ...]]<br><br>遍历键：<br>全量遍历键：keys pattern<br>渐进式遍历：scan cursor [match pattern] <span class="hljs-built_in">[count</span><span class="hljs-built_in"> number</span>]<br>hscan、sscan、zscan渐进式地遍历hash、set、zset<br>数据库管理：<br>切换数据库：select dbIndex<br>清除数据库：flushdb(当前数据库)<br>flushall命(所有数据库)<br></code></pre></td></tr></table></figure><h2 id="8-慢查询分析"><a href="#8-慢查询分析" class="headerlink" title="8.慢查询分析"></a>8.慢查询分析</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel">获取慢查询日志：slowlog get [<span class="hljs-built_in">n</span>]<br>获取慢查询日志列表当前的长度：slowlog <span class="hljs-built_in">len</span><br>慢查询日志重置：slowlog reset实际是对列表做清理操作<br></code></pre></td></tr></table></figure><h2 id="9-Redis-Shell"><a href="#9-Redis-Shell" class="headerlink" title="9.Redis Shell"></a>9.Redis Shell</h2><h3 id="1-redis-cli"><a href="#1-redis-cli" class="headerlink" title="(1)redis-cli"></a>(1)redis-cli</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">-r（repeat）选项代表将命令执行n次：redis-cli -r n 操作<span class="hljs-params">(比如ping)</span><br>-i（interval）选项代表每隔n秒执行一次命令，但是-i选项必须和-r选项一起使用：redis-cli -r n -i n 操作<span class="hljs-params">(比如ping)</span><br>注意-i的单位是秒，不支持毫秒为单位，但是如果想以每隔10毫秒执行 一次，可以用-i0.01，例如：redis-cli -r 5 -i 0.01 ping<br>利用-r和-i选项，每隔1秒输出内存的使用量：redis-cli -r n -i n info | grep used_memory_human<br>-x选项代表从标准输入（stdin）读取数据作为redis-cli的最后一个参数：<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;键值&quot;</span> | redis-cli -x <span class="hljs-keyword">set</span> key<br>-c（cluster）选项是连接Redis Cluster节点时需要使用的，-c选项可以防 止moved和ask异常<br>如果Redis配置了密码，可以用-a（auth）选项，有了这个选项就不需要 手动输入auth命令<br><span class="hljs-params">--scan</span>选项和<span class="hljs-params">--pattern</span>选项用于扫描指定模式的键，相当于使用scan命令<br><span class="hljs-params">--slave</span>选项是把当前客户端模拟成当前Redis节点的从节点，可以用来 获取当前Redis节点的更新操作<br><span class="hljs-params">--rdb</span>选项会请求Redis实例生成并发送RDB持久化文件，保存在本地。 可使用它做持久化文件的定期备份<br><span class="hljs-params">--pipe</span>选项用于将命令封装成Redis通信协议定义的数据格式，批量发送 给Redis执行<br><span class="hljs-params">--bigkeys</span>选项使用scan命令对Redis的键进行采样，从中找到内存占用比 较大的键值，这些键可能是系统的瓶颈<br><span class="hljs-params">--eval</span>选项用于执行指定Lua脚本<br>latency有三个选项，分别是<span class="hljs-params">--latency</span>、<span class="hljs-params">--latency-history</span>、<span class="hljs-params">--latency-dist</span> 可以检测网络延迟，对于Redis的开发和运维非常有帮助<br><span class="hljs-params">--stat</span>选项可以实时获取Redis的重要统计信息，虽然info命令中的统计信 息更全，但是能实时看到一些增量的数据<br><span class="hljs-params">--no-raw</span>选项是要求命令的返回结果必须是原始的格式，<span class="hljs-params">--raw</span>恰恰相反，返回格式化后的结果<br></code></pre></td></tr></table></figure><h3 id="2-redis-benchmark"><a href="#2-redis-benchmark" class="headerlink" title="(2)redis-benchmark"></a>(2)redis-benchmark</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-c（clients）选项代表客户端的并发数量（默认是50）</span><br><span class="hljs-deletion">-n（num）选项代表客户端请求总量（默认是100000）</span><br><span class="hljs-deletion">-q选项仅仅显示redis-benchmark的requests per second信息</span><br><span class="hljs-deletion">-P选项代表每个请求pipeline的数据量（默认为1）</span><br><span class="hljs-deletion">-k选项代表客户端是否使用keepalive，1为使用，0为不使用，默认值为 1</span><br><span class="hljs-deletion">-t选项可以对指定命令进行基准测试</span><br><span class="hljs-deletion">--csv选项会将结果按照csv格式输出，便于后续处理，如导出到Excel 等</span><br><br></code></pre></td></tr></table></figure><h2 id="10-事务与Lua"><a href="#10-事务与Lua" class="headerlink" title="10.事务与Lua"></a>10.事务与Lua</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">multi命令代表事务开始，exec命令代表事务结束，它们之间的命令是原子顺序执行</span><br><span class="hljs-keyword"></span>如果要停止事务的执行，可以使用<span class="hljs-keyword">discard命令代替exec命令即可</span><br><span class="hljs-keyword"></span>Redis如何管理Lua脚本：<br>将Lua脚本加载到Redis内存中：<span class="hljs-keyword">script </span>load <span class="hljs-keyword">script</span><br><span class="hljs-keyword"></span>判断<span class="hljs-keyword">sha1是否已经加载到Redis内存中：scripts </span>exists <span class="hljs-keyword">sha1 </span>[<span class="hljs-keyword">sha1 </span>…]<br>清除Redis内存已经加载的所有Lua脚本：<span class="hljs-keyword">script </span>flush<br>杀掉正在执行的Lua脚本：<span class="hljs-keyword">script </span>kill<br></code></pre></td></tr></table></figure><h2 id="11-Bitmaps"><a href="#11-Bitmaps" class="headerlink" title="11.Bitmaps"></a>11.Bitmaps</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xquery">设置值：setbit<span class="hljs-built_in"> key</span> offset <span class="hljs-keyword">value</span><br>获取值：getbit<span class="hljs-built_in"> key</span> offset<br>获取Bitmaps指定范围值为<span class="hljs-number">1</span>的个数：bitcount [<span class="hljs-keyword">start</span>][<span class="hljs-keyword">end</span>]<br>Bitmaps间的运算：bitop op destkey<span class="hljs-built_in"> key</span><span class="hljs-built_in">[key</span>....]<br>op为<span class="hljs-keyword">and</span>（交集）、<span class="hljs-keyword">or</span>（并 集）<span class="hljs-built_in">、not</span>（非）、xor（异或）操作并将结果保存在destkey<br>计算Bitmaps中第一个值为targetBit的偏移量：bitpos<span class="hljs-built_in"> key</span> targetBit [<span class="hljs-keyword">start</span>] [<span class="hljs-keyword">end</span>]<br></code></pre></td></tr></table></figure><h2 id="12-HyperLogLog"><a href="#12-HyperLogLog" class="headerlink" title="12.HyperLogLog"></a>12.HyperLogLog</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">添加：pfadd key element <span class="hljs-selector-attr">[element …]</span><br>计算独立用户数：pfcount key <span class="hljs-selector-attr">[key …]</span><br>合并：pfmerge destkey sourcekey <span class="hljs-selector-attr">[sourcekey ...]</span><br><br></code></pre></td></tr></table></figure><h2 id="13-发布订阅"><a href="#13-发布订阅" class="headerlink" title="13.发布订阅"></a>13.发布订阅</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs inform7">发布消息：publish channel message<br>订阅消息：subscribe channel <span class="hljs-comment">[channel ...]</span><br>客户端在执行订阅命令之后进入了订阅状态，只能接收subscribe、 psubscribe、unsubscribe、punsubscribe的四个命令<br>取消订阅：unsubscribe <span class="hljs-comment">[channel <span class="hljs-comment">[channel ...]</span>]</span><br>按照模式订阅和取消订阅：psubscribe pattern <span class="hljs-comment">[pattern...]</span> <br>punsubscribe <span class="hljs-comment">[pattern <span class="hljs-comment">[pattern ...]</span>]</span><br>查询订阅：<br>查看活跃的频道：pubsub channels <span class="hljs-comment">[pattern]</span><br>查看频道订阅数：pubsub numsub <span class="hljs-comment">[channel ...]</span><br>查看模式订阅数：pubsub numpat<br></code></pre></td></tr></table></figure><h2 id="14-GEO"><a href="#14-GEO" class="headerlink" title="14.GEO"></a>14.GEO</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs inform7">增加地理位置信息：geoadd key longitude latitude member <span class="hljs-comment">[longitude latitude member ...]</span><br>获取地理位置信息：geopos key member <span class="hljs-comment">[member ...]</span><br>获取两个地理位置的距离：geodist key member1 member2 <span class="hljs-comment">[unit]</span><br>unit代表返回结果的单位，包含四种： ·m（meters）代表米<br>  ·km（kilometers）代表公里<br>                                        ·mi（miles）代表英<br>  ·ft（feet）代表尺<br><br>获取指定位置范围内的地理信息位置集合：georadius key longitude latitude radiusm|km|ft|mi <span class="hljs-comment">[withcoord]</span> <span class="hljs-comment">[withdist]</span> <span class="hljs-comment">[withhash]</span> <span class="hljs-comment">[COUNT count]</span> <span class="hljs-comment">[asc|desc]</span> <span class="hljs-comment">[store key]</span> <span class="hljs-comment">[storedist key]</span> <br>     georadiusbymember key member radiusm|km|ft|mi <span class="hljs-comment">[withcoord]</span> <span class="hljs-comment">[withdist]</span> <span class="hljs-comment">[withhash]</span> <span class="hljs-comment">[COUNT count]</span> <span class="hljs-comment">[asc|desc]</span> <span class="hljs-comment">[store key]</span> <span class="hljs-comment">[storedist key]</span><br><br>注：georadius命令 的中心位置给出了具体的经纬度，georadiusbymember只需给出成员<br>      ·withcoord：返回结果中包含经纬度。 <br>      ·withdist：返回结果中包含离中心节点位置的距离。<br>                      ·withhash：返回结果中包含geohash，有关geohash后面介绍。<br>                      ·COUNT count：指定返回结果的数量。<br>                      ·asc|desc：返回结果按照离中心节点的距离做升序或者降序。 <br>                      ·store key：将返回结果的地理位置信息保存到指定键。<br>                      ·storedist key：将返回结果离中心节点的距离保存到指定键。<br>获取geohash：geohash key member <span class="hljs-comment">[member ...]</span><br>删除地理位置信息：zrem key member<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub+Hexo个人博客</title>
    <link href="/2022/03/04/GitHub-Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/03/04/GitHub-Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="1-GitHub创建仓库"><a href="#1-GitHub创建仓库" class="headerlink" title="1.GitHub创建仓库"></a>1.GitHub创建仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">username/usernme.github.io<br></code></pre></td></tr></table></figure><p>注：因为我已经有这个仓库，所以显示重复</p><h3 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2.安装Hexo"></a>2.安装Hexo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">sudo npm install hexo-cli -g</span><br></code></pre></td></tr></table></figure><h3 id="3-编写、发布"><a href="#3-编写、发布" class="headerlink" title="3.编写、发布"></a>3.编写、发布</h3><h4 id="1-创建博客"><a href="#1-创建博客" class="headerlink" title="1.创建博客"></a>1.创建博客</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">hexo init blog</span><br></code></pre></td></tr></table></figure><h4 id="2-更改配置"><a href="#2-更改配置" class="headerlink" title="2.更改配置"></a>2.更改配置</h4><p><strong>主题安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> username.github.io</span><br><span class="hljs-meta">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></code></pre></td></tr></table></figure><p><strong>基础配置</strong></p><p>打开文件位置 blog/_config.yml 修改几个键值对</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">title:</span> <span class="hljs-string">Latiy博客</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">山上的清风</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-Hans</span><br><br><span class="hljs-attr">theme:</span> <span class="hljs-string">next</span><br><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/Latiy-125/Latiy-125.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><h4 id="3-写博客"><a href="#3-写博客" class="headerlink" title="3.写博客"></a>3.写博客</h4><p>在 blog/source/_posts 下创建你的第一个博客，例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">author@authordeMacBook-Pro _posts % hexo new &quot;GitHub+Hexo个人博客&quot;<br>INFO  Validating config<br>INFO  Created: ~/blog/source/_posts/GitHub-Hexo个人博客.md<br></code></pre></td></tr></table></figure><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">hexo s</span><br></code></pre></td></tr></table></figure><p>测试服务启动，你可以在浏览器中输入<a href="https://link.jianshu.com/?t=https://localhost:4000">https://localhost:4000</a> 访问了。</p><h4 id="5-安装hexo-deployer-git自动部署发布工具"><a href="#5-安装hexo-deployer-git自动部署发布工具" class="headerlink" title="5.安装hexo-deployer-git自动部署发布工具"></a>5.安装<a href="https://link.jianshu.com/?t=https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>自动部署发布工具</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">npm install hexo-deployer-git --save</span><br></code></pre></td></tr></table></figure><h4 id="6-生成静态文件"><a href="#6-生成静态文件" class="headerlink" title="6.生成静态文件"></a>6.生成静态文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">hexo generate</span><br></code></pre></td></tr></table></figure><h4 id="7-发布"><a href="#7-发布" class="headerlink" title="7.发布"></a>7.发布</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">hexo deploy</span><br></code></pre></td></tr></table></figure><p>这是第一次，终端会让你输入Github 的邮箱和密码，正确输入后，骚等片刻，就会把你的博客上传至Github 了。以后在每次把博客写完后，执行一下这个命令就可以直接发布了</p>]]></content>
    
    
    
    <tags>
      
      <tag>GitHub</tag>
      
      <tag>node</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合Shrio</title>
    <link href="/2021/07/01/SpringBoot+Shrio/"/>
    <url>/2021/07/01/SpringBoot+Shrio/</url>
    
    <content type="html"><![CDATA[<h2 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!--Spring MVC--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-spring-boot-web-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!--MySQL--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!--Mybatis--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!-- Redis --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 对象池工具包 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!--JWT--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.auth0<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>java-jwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--编码解码类库--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-codec<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-codec<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.14<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-lang<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>   <br>   <br>   <br>   <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--配置的目的是可以使得UserMapper.xml文件可以放在java中--&gt;</span><br>       <span class="hljs-comment">&lt;!--重新指定Mybatis配置文件的位置--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resource<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--打包插件--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                       <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                       <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                   <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-配置application-yml"><a href="#2-配置application-yml" class="headerlink" title="2.配置application.yml"></a>2.配置application.yml</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-comment"># 端口号</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-comment"># 数据源配置</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/ssm_v15?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">hikari:</span><br>      <span class="hljs-attr">pool-name:</span> <span class="hljs-string">hikariPool</span><br>      <span class="hljs-attr">minimum-idle:</span> <span class="hljs-number">5</span><br>      <span class="hljs-attr">maximum-pool-size:</span> <span class="hljs-number">10</span><br>      <span class="hljs-attr">connection-timeout:</span> <span class="hljs-number">5000</span><br><br><br><span class="hljs-attr">shiro:</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-comment"># true，会自动配置（默认）</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><br><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-comment"># 配置Mapper映射文件</span><br>  <span class="hljs-comment"># mapper-locations: classpath:/mapper/*Mapper.xml</span><br>  <span class="hljs-comment"># 配置MyBatis数据返回类型别名（默认别名是类名）</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.example.demo.model.entity</span><br><br><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">com:</span><br>      <span class="hljs-attr">example:</span><br>        <span class="hljs-attr">mapper:</span> <span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure><h2 id="3-Shiro配置"><a href="#3-Shiro配置" class="headerlink" title="3.Shiro配置"></a>3.Shiro配置</h2><h3 id="1-Shrio全局配置"><a href="#1-Shrio全局配置" class="headerlink" title="(1)Shrio全局配置"></a>(1)Shrio全局配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.config;<br><br><span class="hljs-keyword">import</span> com.example.demo.constants.AppConstants;<br><span class="hljs-keyword">import</span> com.example.demo.security.DemoAuthorizingRealm;<br><span class="hljs-keyword">import</span> com.example.demo.security.MyShiroFilterChainDefinition;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.credential.CredentialsMatcher;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.credential.HashedCredentialsMatcher;<br><span class="hljs-keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;<br><span class="hljs-keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;<br><span class="hljs-keyword">import</span> org.apache.shiro.spring.web.config.ShiroFilterChainDefinition;<br><span class="hljs-keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;<br><span class="hljs-keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.filter.DelegatingFilterProxy;<br><br><span class="hljs-keyword">import</span> javax.servlet.DispatcherType;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Shiro配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShiroConfiguration</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册过滤器（会自动配置，默认bean名称：filterShiroFilterRegistrationBean）</span><br><span class="hljs-comment">     * （见：org.apache.shiro.spring.config.web.autoconfigure.ShiroWebFilterConfiguration）</span><br><span class="hljs-comment">     * filterShiroFilterRegistrationBean</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">/*@Bean</span><br><span class="hljs-comment">    public FilterRegistrationBean filterShiroFilterRegistrationBean(ShiroFilterFactoryBean shiroFilterFactoryBean) throws Exception &#123;</span><br><span class="hljs-comment">      FilterRegistrationBean filterRegistration = new FilterRegistrationBean();</span><br><span class="hljs-comment">      filterRegistration.setDispatcherTypes(DispatcherType.REQUEST, new DispatcherType[]&#123;</span><br><span class="hljs-comment">                  DispatcherType.FORWARD,</span><br><span class="hljs-comment">                  DispatcherType.INCLUDE,</span><br><span class="hljs-comment">                  DispatcherType.ERROR</span><br><span class="hljs-comment">          &#125;);</span><br><span class="hljs-comment">      filterRegistration.setFilter(new DelegatingFilterProxy(&quot;shiroFilterFactoryBean&quot;));</span><br><span class="hljs-comment">      filterRegistration.addInitParameter(&quot;targetFilterLifecycle&quot;,&quot;true&quot;);</span><br><span class="hljs-comment">      filterRegistration.setOrder(1);</span><br><span class="hljs-comment">      filterRegistration.addUrlPatterns(&quot;/*&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">      return filterRegistration;</span><br><span class="hljs-comment">    &#125;*/</span><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Shiro 过滤器（会自动配置，bean名称：shiroFilterFactoryBean）</span><br><span class="hljs-comment">     * （见：org.apache.shiro.spring.config.web.autoconfigure.ShiroWebFilterConfiguration;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> securityManager</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">/*@Bean</span><br><span class="hljs-comment">    public ShiroFilterFactoryBean shiroFilterFactoryBean(DefaultSecurityManager securityManager,</span><br><span class="hljs-comment">                                                         ShiroFilterChainDefinition filterChainDefinition)&#123;</span><br><span class="hljs-comment">        ShiroFilterFactoryBean shiroFilter = new ShiroFilterFactoryBean();</span><br><span class="hljs-comment">        // 设置安全管理器</span><br><span class="hljs-comment">        shiroFilter.setSecurityManager(securityManager);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 前后端分离应用，如下参数无需配置</span><br><span class="hljs-comment">        // shiroFilter.setLoginUrl(&quot;/login&quot;);</span><br><span class="hljs-comment">        // shiroFilter.setSuccessUrl(&quot;&quot;);</span><br><span class="hljs-comment">        // shiroFilter.setUnauthorizedUrl(&quot;&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 注册自定义过滤器</span><br><span class="hljs-comment">        // shiroFilter.setFilters();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 设置过滤器链定义图</span><br><span class="hljs-comment">        shiroFilter.setFilterChainDefinitionMap(filterChainDefinition.getFilterChainMap());</span><br><span class="hljs-comment">        return shiroFilter;</span><br><span class="hljs-comment">    &#125;*/</span><br><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 安全管理器（会自动配置，bean名称：securityManager）</span><br><span class="hljs-comment">     * 见：org.apache.shiro.spring.config.web.autoconfigur.ShiroWebAutoConfiguration</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">/*@Bean</span><br><span class="hljs-comment">    public DefaultSecurityManager securityManager()&#123;</span><br><span class="hljs-comment">        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class="hljs-comment">        // 设置Realm</span><br><span class="hljs-comment">        securityManager.setRealm(authorizer());</span><br><span class="hljs-comment">        return securityManager;</span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置过滤器链（会自动配置，bean名称：shiroFilterChainDefinition）</span><br><span class="hljs-comment">     * 见：org.apache.shiro.spring.config.web.autoconfigur.ShiroWebAutoConfiguration</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ShiroFilterChainDefinition <span class="hljs-title function_">shiroFilterChainDefinition</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-comment">/* DefaultShiroFilterChainDefinition chainDefinition = new DefaultShiroFilterChainDefinition();</span><br><span class="hljs-comment">        chainDefinition.addPathDefinition(&quot;/login&quot;, DefaultFilter.anon.name());</span><br><span class="hljs-comment">        chainDefinition.addPathDefinition(&quot;/**&quot;, DefaultFilter.authc.name());</span><br><span class="hljs-comment">        return chainDefinition;*/</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyShiroFilterChainDefinition</span>();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 认证+授权</span><br><span class="hljs-comment">     * 权限数据（会自动配置，默认bean名称：authorizer）</span><br><span class="hljs-comment">     * 见：org.apache.shiro.spring.config.web.autoconfigur.ShiroWebAutoConfiguration</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> AuthorizingRealm <span class="hljs-title function_">authorizer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DemoAuthorizingRealm</span> <span class="hljs-variable">realm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DemoAuthorizingRealm</span>();<br>        <span class="hljs-comment">// 设置凭证匹配器</span><br>        realm.setCredentialsMatcher(credentialsMatcher());<br>        <span class="hljs-keyword">return</span> realm;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  凭证匹配器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CredentialsMatcher <span class="hljs-title function_">credentialsMatcher</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 基于哈希算法凭证匹配器</span><br>        <span class="hljs-type">HashedCredentialsMatcher</span> <span class="hljs-variable">credentialsMatcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedCredentialsMatcher</span>();<br>        <span class="hljs-comment">// hashAlgorithmName，指定哈希算法名称，必须和用户密码的加密算法保持一致</span><br>        <span class="hljs-comment">// 常用哈希算法: MD5、SHA-1、SHA-256、SHA-512</span><br>        credentialsMatcher.setHashAlgorithmName(AppConstants.ENCRYPTION_ALG_MD5);<br>        <span class="hljs-comment">// 哈希迭代次数，必须和用户密码的加密算法保持一致</span><br>        credentialsMatcher.setHashIterations(AppConstants.ENCRYPTION_HASH_ITERATIONS);<br>        <span class="hljs-comment">// 是否存储为16进制代码，必须和用户密码的加密算法保持一致</span><br>        credentialsMatcher.setStoredCredentialsHexEncoded(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-keyword">return</span> credentialsMatcher;<br>    &#125;<br><br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-Shiro过滤器链，定义访问资源所需的权限"><a href="#2-Shiro过滤器链，定义访问资源所需的权限" class="headerlink" title="(2)Shiro过滤器链，定义访问资源所需的权限"></a>(2)Shiro过滤器链，定义访问资源所需的权限</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.security;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.spring.web.config.ShiroFilterChainDefinition;<br><span class="hljs-keyword">import</span> org.apache.shiro.web.filter.mgt.DefaultFilter;<br><br><span class="hljs-keyword">import</span> java.util.LinkedHashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Shiro过滤器链，定义访问资源所需的权限</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// @Component(&quot;myShiroFilterChainDefinition&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyShiroFilterChainDefinition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ShiroFilterChainDefinition</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置过滤器链</span><br><span class="hljs-comment">     * Shiro内置过滤，见org.apache.shiro.web.filter.mgt.DefaultFilter枚举类</span><br><span class="hljs-comment">     * AnonymousFilter（anon），匿名过滤器，允许直接访问资源，无需进行任何的安全检查</span><br><span class="hljs-comment">     * FormAuthenticationFilter（authc），请求需要进行认证方可继续访问，如果没有认证将跳转到认证页面（loginUrl）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Map&lt;String,String&gt; <span class="hljs-title function_">getFilterChainMap</span><span class="hljs-params">()</span>&#123;<br><br>        Map&lt;String,String&gt; filterChainDefinition = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>        filterChainDefinition.put(<span class="hljs-string">&quot;/login&quot;</span>, DefaultFilter.anon.name());<br>        filterChainDefinition.put(<span class="hljs-string">&quot;/**&quot;</span>, DefaultFilter.anon.name());<br><br>        <span class="hljs-keyword">return</span> filterChainDefinition;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-认证-授权"><a href="#3-认证-授权" class="headerlink" title="(3)认证+授权"></a>(3)认证+授权</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.security;<br><br><br><span class="hljs-keyword">import</span> com.example.demo.constants.AppConstants;<br><span class="hljs-keyword">import</span> com.example.demo.constants.UserStatusEnum;<br><span class="hljs-keyword">import</span> com.example.demo.model.dto.UserDTO;<br><span class="hljs-keyword">import</span> com.example.demo.service.UserService;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.*;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.credential.CredentialsMatcher;<br><span class="hljs-keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.PrincipalCollection;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.SimpleByteSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 提供安全数据：认证信息（如账号、密码）、授权信息（角色、权限）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// @Component(&quot;authorizer&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoAuthorizingRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizingRealm</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 认证信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> AuthenticationException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title function_">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken token)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>        <span class="hljs-comment">// 账号、密码</span><br>        <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">usernamePasswordToken</span> <span class="hljs-operator">=</span> (UsernamePasswordToken)token;<br><br>       <span class="hljs-comment">/* char[] passwordCharArray = usernamePasswordToken.getPassword();</span><br><span class="hljs-comment">        String passwordString = new String(passwordCharArray);</span><br><span class="hljs-comment">        String md5Password = MD5Utils.md5(passwordString);</span><br><span class="hljs-comment">        char[] md5PasswordCharArray = md5Password.toCharArray();</span><br><span class="hljs-comment">        usernamePasswordToken.setPassword(md5PasswordCharArray);*/</span><br><br>        <span class="hljs-comment">// 用户认证（登录）时输入的账号</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> usernamePasswordToken.getUsername();<br>        <span class="hljs-comment">// 数据库中真实的密码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">UserDTO</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 查询用户</span><br>            user = userService.findByUsername(username);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthenticationException</span>(<span class="hljs-string">&quot;认证失败&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnknownAccountException</span>(<span class="hljs-string">&quot;账号不存在&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(user.getStatus() == <span class="hljs-literal">null</span> ||<br>                user.getStatus().equals(UserStatusEnum.DISABLE.value()))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LockedAccountException</span>(<span class="hljs-string">&quot;账号已被锁定&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 真实密码</span><br>        password = user.getPassword();<br><br>        <span class="hljs-comment">// 认证信息（没加盐，密码：明码或者加密的密码）</span><br>        <span class="hljs-comment">// 密码在凭证匹配器的doCredentialsMatch方法中进行验证</span><br>        <span class="hljs-comment">// 凭证匹配器，如：org.apache.shiro.authc.credential.HashedCredentialsMatcher</span><br>        <span class="hljs-comment">/*SimpleAuthenticationInfo authenticationInfo =</span><br><span class="hljs-comment">                new SimpleAuthenticationInfo(username,password,getName());*/</span><br><br>        <span class="hljs-comment">// 盐</span><br>        <span class="hljs-type">ByteSource</span> <span class="hljs-variable">salt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleByteSource</span>(AppConstants.ENCRYPTION_SALT);<br>        <span class="hljs-type">SimpleAuthenticationInfo</span> <span class="hljs-variable">authenticationInfo</span> <span class="hljs-operator">=</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthenticationInfo</span>(username,password,salt,getName());<br><br>        <span class="hljs-keyword">return</span> authenticationInfo;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 授权信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 角色判断（多个角色，默认是AND关系）：RolesAuthorizationFilter#isAccessAllowed、AuthorizingRealm#hasAllRoles和hasRole</span><br><span class="hljs-comment">     * 权限判断（多个权限，默认是AND关系）：PermissionsAuthorizationFilter#isAccessAllowed、WildcardPermission#implies</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> principals</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title function_">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principals)</span> &#123;<br>        <span class="hljs-type">SimpleAuthorizationInfo</span> <span class="hljs-variable">authorizationInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthorizationInfo</span>();<br>        <span class="hljs-comment">// authorizationInfo.addRole(&quot;test&quot;);</span><br>        <span class="hljs-comment">// authorizationInfo.addRole(&quot;user&quot;);</span><br>        authorizationInfo.addStringPermission(<span class="hljs-string">&quot;user:query&quot;</span>);<br>        authorizationInfo.addStringPermission(<span class="hljs-string">&quot;user:update&quot;</span>);<br>        authorizationInfo.addStringPermission(<span class="hljs-string">&quot;user:export&quot;</span>);<br><br><br>        <span class="hljs-keyword">return</span> authorizationInfo;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注入凭证匹配器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> credentialsMatcher</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCredentialsMatcher</span><span class="hljs-params">(CredentialsMatcher credentialsMatcher)</span> &#123;<br>        <span class="hljs-built_in">super</span>.setCredentialsMatcher(credentialsMatcher);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-web配置"><a href="#4-web配置" class="headerlink" title="4.web配置"></a>4.web配置</h2><h3 id="1-web全局配置"><a href="#1-web全局配置" class="headerlink" title="(1)web全局配置"></a>(1)web全局配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.config;<br><br><br><span class="hljs-keyword">import</span> com.example.demo.interceptor.AuthInterceptor;<br><span class="hljs-keyword">import</span> com.example.demo.web.filter.CorsFilter;<br><span class="hljs-keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: DingLong</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 2021/6/30 下午3:09</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfiguration</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加拦截器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> registry</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthInterceptor</span>())<br>                <span class="hljs-comment">// 添加路径模式</span><br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<br>                <span class="hljs-comment">// 排除路径模式</span><br>                .excludePathPatterns(<span class="hljs-string">&quot;/login&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * cors过滤器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title function_">corsFilter</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">FilterRegistrationBean</span> <span class="hljs-variable">registrationBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>();<br>        <span class="hljs-comment">// 设置过滤器</span><br>        registrationBean.setFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsFilter</span>());<br>        <span class="hljs-comment">// 添加网址模式</span><br>        registrationBean.addUrlPatterns(<span class="hljs-string">&quot;/*&quot;</span>);<br>        <span class="hljs-comment">// 设置名称</span><br>        registrationBean.setName(<span class="hljs-string">&quot;corsFilter&quot;</span>);<br>        <span class="hljs-comment">// 设置顺序</span><br>        registrationBean.setOrder(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">return</span> registrationBean;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-认证拦截器"><a href="#2-认证拦截器" class="headerlink" title="(2)认证拦截器"></a>(2)认证拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.interceptor;<br><br><span class="hljs-keyword">import</span> com.example.demo.constants.AppConstants;<br><span class="hljs-keyword">import</span> com.example.demo.exception.AuthException;<br><span class="hljs-keyword">import</span> com.example.demo.utils.JWTUtils;<br><span class="hljs-keyword">import</span> com.example.demo.web.utils.WebUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.lang.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 认证拦截器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HandlerInterceptorAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(AppConstants.ACCESS_TOKEN);<br><br>        <span class="hljs-keyword">if</span>(StringUtils.isBlank(token))&#123;<br>            <span class="hljs-comment">// 未授权（错误代码：401）错误提示</span><br>            WebUtils.sendError(HttpStatus.UNAUTHORIZED.value(),<span class="hljs-string">&quot;缺失token参数&quot;</span>,response);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 核实</span><br>            JWTUtils.verify(token);<br>        &#125; <span class="hljs-keyword">catch</span> (AuthException e) &#123;<br>            <span class="hljs-comment">// 未授权（错误代码：401）错误提示</span><br>            WebUtils.sendError(HttpStatus.UNAUTHORIZED.value(),e.getMessage(),response);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.preHandle(request, response, handler);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-跨域处理过滤器-cors过滤器"><a href="#3-跨域处理过滤器-cors过滤器" class="headerlink" title="(3)跨域处理过滤器(cors过滤器)"></a>(3)跨域处理过滤器(cors过滤器)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.web.filter;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 跨域处理过滤器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CorsFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest)servletRequest;<br>        <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> (HttpServletResponse)servletResponse;<br><br>        <span class="hljs-comment">// 请求方法</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> request.getMethod();<br><br>        <span class="hljs-comment">// 响应头指定了该响应的资源是否被允许与给定的origin共享</span><br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br>        <span class="hljs-comment">// 响应头表示是否可以将对请求的响应暴露给页面。返回true则可以，其他值均不可以。</span><br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Credentials&quot;</span>,<span class="hljs-string">&quot;true&quot;</span>);<br>        <span class="hljs-comment">// 客户端所要访问的资源允许使用的方法或方法列表</span><br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>,<span class="hljs-string">&quot;GET,POST,PUT,DELETE,OPTIONS&quot;</span>);<br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>,<span class="hljs-string">&quot;Content-type,X-Access-Token,Authorization&quot;</span>);<br><br>        <span class="hljs-comment">// 前端HTTP框架Axios会进行两次请求，第一次是OPTIONS请求，判断是否允许跨域</span><br>        <span class="hljs-keyword">if</span>(method.equals(RequestMethod.OPTIONS.name()))&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        filterChain.doFilter(request,response);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="5-工具类utils"><a href="#5-工具类utils" class="headerlink" title="5.工具类utils"></a>5.工具类utils</h2><h3 id="1-AES加密"><a href="#1-AES加密" class="headerlink" title="(1)AES加密"></a>(1)AES加密</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.utils;<br><br><br><span class="hljs-keyword">import</span> javax.crypto.*;<br><span class="hljs-keyword">import</span> javax.crypto.spec.SecretKeySpec;<br><span class="hljs-keyword">import</span> java.security.InvalidKeyException;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><span class="hljs-keyword">import</span> java.security.SecureRandom;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * AES加密</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AESUtils</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ALGORITHM</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;AES&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 秘钥</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SECRET_BASE64</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MdI5+CuqWggBVrqW7BVRzw==&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> text 明文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] encrypt(<span class="hljs-type">byte</span>[] text)&#123;<br>        <span class="hljs-keyword">return</span> encrypt(text,getDefaultSecret());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> text 明文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> secret 加密秘钥</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] encrypt(<span class="hljs-type">byte</span>[] text,<span class="hljs-type">byte</span>[] secret)&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(ALGORITHM);<br><br>            <span class="hljs-comment">// 将秘钥字符串转换成SecretKey对象</span><br>            <span class="hljs-type">SecretKey</span> <span class="hljs-variable">secretKey</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(secret,ALGORITHM);<br>            <span class="hljs-comment">// 初始化，指定模式：加密，并设置加密秘钥</span><br>            cipher.init(Cipher.ENCRYPT_MODE,secretKey);<br><br>            <span class="hljs-comment">// 加密</span><br>            <span class="hljs-keyword">return</span> cipher.doFinal(text);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchPaddingException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InvalidKeyException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalBlockSizeException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (BadPaddingException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> encryptedText 密文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] decrypt(<span class="hljs-type">byte</span>[] encryptedText)&#123;<br>        <span class="hljs-keyword">return</span> decrypt(encryptedText,getDefaultSecret());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> encryptedText 密文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> secret 解密秘钥</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] decrypt(<span class="hljs-type">byte</span>[] encryptedText,<span class="hljs-type">byte</span>[] secret)&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(ALGORITHM);<br><br>            <span class="hljs-comment">// 将秘钥字符串转换成SecretKey对象</span><br>            <span class="hljs-type">SecretKey</span> <span class="hljs-variable">secretKey</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(secret,ALGORITHM);<br>            <span class="hljs-comment">// 初始化，指定模式：解密，并设置解密秘钥</span><br>            cipher.init(Cipher.DECRYPT_MODE,secretKey);<br><br>            <span class="hljs-comment">// 解密</span><br>            <span class="hljs-keyword">return</span> cipher.doFinal(encryptedText);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchPaddingException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InvalidKeyException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalBlockSizeException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (BadPaddingException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成秘钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] generateSecretKey()&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">KeyGenerator</span> <span class="hljs-variable">keyGenerator</span> <span class="hljs-operator">=</span> KeyGenerator.getInstance(ALGORITHM);<br>            <span class="hljs-comment">// 初始化，设置秘钥长度和随机数</span><br>            keyGenerator.init(<span class="hljs-number">128</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureRandom</span>());<br>            <span class="hljs-comment">// 生成秘钥</span><br>            <span class="hljs-type">SecretKey</span> <span class="hljs-variable">secretKey</span> <span class="hljs-operator">=</span> keyGenerator.generateKey();<br><br>            <span class="hljs-keyword">return</span> secretKey.getEncoded();<br><br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成秘钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Base64字符串格式秘钥</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateSecretKeyAsBase64String</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">byte</span>[] secret = generateSecretKey();<br>        <span class="hljs-keyword">return</span> Base64.getEncoder().encodeToString(secret);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取默认秘钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getDefaultSecret()&#123;<br>        <span class="hljs-keyword">return</span> Base64.getDecoder().decode(SECRET_BASE64);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将Base64字符串格式的秘钥还原成字节数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> secretBase64String</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] secretBase64StringToBytes(String secretBase64String)&#123;<br>        <span class="hljs-keyword">return</span> Base64.getDecoder().decode(secretBase64String);<br>    &#125;<br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 明文</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJwYXNzd29yZCI6ImFiYzEyMyEiLCJleHAiOjE1OTk4MjA3MzksInVzZXJJZCI6IjEyMzMyMTQ1NjY1NCIsInVzZXJuYW1lIjoiYWRtaW4ifQ.oLAnZ8WdW1NRJ5tTbQK6sC-Xpr_SHU3HiiYkOwco5wmak6vROg3ubwn1g0pxRz54JrJ-zPP8KCL4b0ABBU3nRg&quot;</span>;<br>            <span class="hljs-comment">// 密文</span><br>            <span class="hljs-type">byte</span>[] encryptedText = encrypt(text.getBytes());<br><br>            <span class="hljs-comment">// 解密</span><br>            <span class="hljs-type">byte</span>[]  decryptedText = decrypt(encryptedText);<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(decryptedText));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-MD5加密工具类"><a href="#2-MD5加密工具类" class="headerlink" title="(2)MD5加密工具类"></a>(2)MD5加密工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.utils;<br><br><span class="hljs-keyword">import</span> com.example.demo.constants.AppConstants;<br><span class="hljs-keyword">import</span> org.apache.shiro.crypto.hash.SimpleHash;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * MD5加密工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MD5Utils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(md5(<span class="hljs-string">&quot;123&quot;</span>));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">md5</span><span class="hljs-params">(String str)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 简单哈希(算法名称,来源,盐,哈希迭代)</span><br>            <span class="hljs-type">SimpleHash</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleHash</span>(AppConstants.ENCRYPTION_ALG_MD5,<br>                    str, AppConstants.ENCRYPTION_SALT,<br>                    AppConstants.ENCRYPTION_HASH_ITERATIONS);<br>            <span class="hljs-keyword">return</span> hash.toHex();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-JWT工具类"><a href="#3-JWT工具类" class="headerlink" title="(3)JWT工具类"></a>(3)JWT工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.utils;<br><br><span class="hljs-keyword">import</span> com.auth0.jwt.JWT;<br><span class="hljs-keyword">import</span> com.auth0.jwt.JWTVerifier;<br><span class="hljs-keyword">import</span> com.auth0.jwt.algorithms.Algorithm;<br><span class="hljs-keyword">import</span> com.auth0.jwt.exceptions.AlgorithmMismatchException;<br><span class="hljs-keyword">import</span> com.auth0.jwt.exceptions.SignatureVerificationException;<br><span class="hljs-keyword">import</span> com.auth0.jwt.exceptions.TokenExpiredException;<br><span class="hljs-keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;<br><span class="hljs-keyword">import</span> com.example.demo.exception.AuthException;<br><span class="hljs-keyword">import</span> org.apache.commons.codec.binary.Base64;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JWT工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JWTUtils</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 签名算法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ALGORITHM</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HMAC512&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * CLAIM</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CLAIM_USER_ID</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;userId&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CLAIM_USERNAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;username&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CLAIM_PASSWORD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;password&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 过期时间（分钟）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">EXPIRE_TIME</span> <span class="hljs-operator">=</span> <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span> ;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * token签名算法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> secret 签名秘钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Algorithm <span class="hljs-title function_">getAlgorithm</span><span class="hljs-params">(String secret)</span>&#123;<br>        <span class="hljs-keyword">return</span> Algorithm.HMAC512(secret);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">createToken</span><span class="hljs-params">(String userId,String username,String password)</span>&#123;<br>        <span class="hljs-comment">// 头信息（JWT头）</span><br>        Map&lt;String,Object&gt; header = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        header.put(<span class="hljs-string">&quot;alg&quot;</span>,ALGORITHM);<br>        header.put(<span class="hljs-string">&quot;typ&quot;</span>,<span class="hljs-string">&quot;JWT&quot;</span>);<br><br>        <span class="hljs-comment">// 过期时间</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">expireTime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + EXPIRE_TIME);<br><br>        <span class="hljs-comment">// 创建token</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> JWT.create().withHeader(header)<br>                <span class="hljs-comment">// userId、username、password为有效荷载部分</span><br>                .withClaim(CLAIM_USER_ID,userId)<br>                .withClaim(CLAIM_USERNAME,username)<br>                .withClaim(CLAIM_PASSWORD,password)<br>                .withExpiresAt(expireTime)<br>                .sign(getAlgorithm(password));<br><br>        <span class="hljs-comment">// 对token进行加密</span><br>        <span class="hljs-keyword">return</span> encryptToken(token);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对token进行加密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encryptToken</span><span class="hljs-params">(String token)</span>&#123;<br>        <span class="hljs-comment">// 对token进行加密</span><br>        <span class="hljs-type">byte</span>[] encryptedToken = AESUtils.encrypt(token.getBytes());<br>        <span class="hljs-comment">// 返回Base64格式字符串</span><br>        <span class="hljs-keyword">return</span> Base64.encodeBase64URLSafeString(encryptedToken);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解密token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> encryptedBase64Token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">decryptToken</span><span class="hljs-params">(String encryptedBase64Token)</span>&#123;<br>        <span class="hljs-comment">// Base64解码，还原成字节数组</span><br>        <span class="hljs-type">byte</span>[] decodeBase64Token = Base64.decodeBase64(encryptedBase64Token);<br>        <span class="hljs-comment">// 解密</span><br>        <span class="hljs-type">byte</span>[] decryptedToken = AESUtils.decrypt(decodeBase64Token);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(decryptedToken);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * token校验</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">verify</span><span class="hljs-params">(String token)</span> <span class="hljs-keyword">throws</span> AuthException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 解密token</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">decryptedToken</span> <span class="hljs-operator">=</span> decryptToken(token);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">secret</span> <span class="hljs-operator">=</span> getPayload(decryptedToken,CLAIM_PASSWORD);<br><br>            <span class="hljs-comment">// 获取secret的算法</span><br>            <span class="hljs-type">JWTVerifier</span> <span class="hljs-variable">verifier</span> <span class="hljs-operator">=</span>JWT.require(getAlgorithm(secret)).build();<br>            <span class="hljs-comment">// 核实</span><br>            verifier.verify(decryptedToken);<br>        &#125; <span class="hljs-keyword">catch</span> (AlgorithmMismatchException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthException</span>(<span class="hljs-string">&quot;token算法不匹配&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (SignatureVerificationException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthException</span>(<span class="hljs-string">&quot;token签名无效&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (TokenExpiredException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthException</span>(<span class="hljs-string">&quot;token已经过期&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthException</span>(<span class="hljs-string">&quot;token无效&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从token中获取claim信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getPayload</span><span class="hljs-params">(String token,String name)</span>&#123;<br>        <span class="hljs-type">DecodedJWT</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> JWT.decode(token);<br>        <span class="hljs-keyword">return</span> jwt.getClaim(name).asString();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-ID生成器"><a href="#4-ID生成器" class="headerlink" title="(4)ID生成器"></a>(4)ID生成器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.utils;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ID生成器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IdGenerator</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">TwitterSnowflakeIdGenerator</span> <span class="hljs-variable">generator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TwitterSnowflakeIdGenerator</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">generate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> generator.nextId2();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.utils;<br><br><span class="hljs-comment">/** twitter Snowflake */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TwitterSnowflakeIdGenerator</span> &#123;<br>    <span class="hljs-comment">//基准时间</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">twepoch</span> <span class="hljs-operator">=</span> <span class="hljs-number">1288834974657L</span>;<br>    <span class="hljs-comment">//机器标识位数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">workerIdBits</span> <span class="hljs-operator">=</span> <span class="hljs-number">5L</span>;<br>    <span class="hljs-comment">//机器ID最大值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">maxWorkerId</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; workerIdBits);<br>    <span class="hljs-comment">//数据中心标识位数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">datacenterIdBits</span> <span class="hljs-operator">=</span> <span class="hljs-number">5L</span>;<br>    <span class="hljs-comment">//数据中心ID最大值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">maxDatacenterId</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; datacenterIdBits);<br>    <span class="hljs-comment">//序列号识位数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">sequenceBits</span> <span class="hljs-operator">=</span> <span class="hljs-number">12L</span>;<br>    <span class="hljs-comment">//机器ID左移位数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">workerIdShift</span> <span class="hljs-operator">=</span> sequenceBits;<br>    <span class="hljs-comment">//数据中心ID左移位数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">datacenterIdShift</span> <span class="hljs-operator">=</span> sequenceBits + workerIdBits;<br>    <span class="hljs-comment">//时间毫秒左移位数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">timestampLeftShift</span> <span class="hljs-operator">=</span> sequenceBits + workerIdBits + datacenterIdBits;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">sequenceMask</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; sequenceBits);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> workerId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> datacenterId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">sequence</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">lastTimestamp</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TwitterSnowflakeIdGenerator</span><span class="hljs-params">(<span class="hljs-type">long</span> workerId, <span class="hljs-type">long</span> datacenterId)</span> &#123;<br>        <span class="hljs-keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(String.format(<span class="hljs-string">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxWorkerId));<br>        &#125;<br>        <span class="hljs-keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(String.format(<span class="hljs-string">&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxDatacenterId));<br>        &#125;<br>        <span class="hljs-built_in">this</span>.workerId = workerId;<br>        <span class="hljs-built_in">this</span>.datacenterId = datacenterId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">long</span> <span class="hljs-title function_">nextId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> timeGen();<br>        <span class="hljs-keyword">if</span> (timestamp &lt; lastTimestamp) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(String.format(<span class="hljs-string">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span>, lastTimestamp - timestamp));<br>        &#125;<br>        <span class="hljs-keyword">if</span> (lastTimestamp == timestamp) &#123;<br>            sequence = (sequence + <span class="hljs-number">1</span>) &amp; sequenceMask;<br>            <span class="hljs-keyword">if</span> (sequence == <span class="hljs-number">0</span>) &#123;<br>                timestamp = tilNextMillis(lastTimestamp);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            sequence = <span class="hljs-number">0L</span>;<br>        &#125;<br><br>        lastTimestamp = timestamp;<br><br>        <span class="hljs-keyword">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) | (datacenterId &lt;&lt; datacenterIdShift) | (workerId &lt;&lt; workerIdShift) | sequence;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">long</span> <span class="hljs-title function_">nextId2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> nextId();<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-title function_">tilNextMillis</span><span class="hljs-params">(<span class="hljs-type">long</span> lastTimestamp)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> timeGen();<br>        <span class="hljs-keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;<br>            timestamp = timeGen();<br>        &#125;<br>        <span class="hljs-keyword">return</span> timestamp;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-title function_">timeGen</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> System.currentTimeMillis();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">14</span>; i++) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.example.demo.utils.TwitterSnowflakeIdGenerator(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>).nextId());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-验证工具类"><a href="#5-验证工具类" class="headerlink" title="(5)验证工具类"></a>(5)验证工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.utils;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">copyProperties</span><span class="hljs-params">(Object source, Class&lt;T&gt; targetClass)</span>&#123;<br>        <span class="hljs-keyword">if</span>(source == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">T</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> targetClass.newInstance();<br>            org.springframework.beans.BeanUtils.copyProperties(source,target);<br>            <span class="hljs-keyword">return</span> target;<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6-WebUtils"><a href="#6-WebUtils" class="headerlink" title="(6)WebUtils"></a>(6)WebUtils</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.web.utils;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * WebUtils</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebUtils</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断是否是AJAX请求</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAjax</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">xRequestWith</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;X-Requested-With&quot;</span>);<br>        <span class="hljs-keyword">if</span>(xRequestWith != <span class="hljs-literal">null</span> &amp;&amp; !<span class="hljs-string">&quot;&quot;</span>.equals(xRequestWith.trim())<br>                &amp;&amp; <span class="hljs-string">&quot;XMLHttpRequest&quot;</span>.equals(xRequestWith))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送错误消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> errorMessage 错误消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response 响应对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendError</span><span class="hljs-params">(String errorMessage, HttpServletResponse response)</span>&#123;<br>        sendError(HttpStatus.INTERNAL_SERVER_ERROR.value(),errorMessage,response);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送错误消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code 错误码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> errorMessage 错误消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response 响应对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendError</span><span class="hljs-params">(<span class="hljs-type">int</span> code,String errorMessage, HttpServletResponse response)</span>&#123;<br>        <span class="hljs-type">ResponseResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> ResponseResult.get();<br>        result.error(code,errorMessage);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 将Java对象转换为JSON字符串</span><br>            <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">jsonErrorMessage</span> <span class="hljs-operator">=</span> objectMapper.writeValueAsString(result);<br><br>            <span class="hljs-comment">// 响应</span><br>            response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            response.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>            response.getWriter().write(jsonErrorMessage);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-响应结果类ResponseResult"><a href="#7-响应结果类ResponseResult" class="headerlink" title="(7)响应结果类ResponseResult"></a>(7)响应结果类ResponseResult</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.web.utils;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 响应结果</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseResult</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_CODE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;code&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_MESSAGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;message&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_DATA</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;data&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_DATA_TOTAL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;total&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">CODE_DEFAULT</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_SUCCESS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;操作成功&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_FAILURE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;操作失败&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 状态码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> CODE_DEFAULT;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 状态消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> MESSAGE_SUCCESS;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 响应数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> T data;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数据条数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer total;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> com.example.demo.web.utils.ResponseResult <span class="hljs-title function_">get</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.example.demo.web.utils.ResponseResult();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">success</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.code = CODE_DEFAULT;<br>        <span class="hljs-built_in">this</span>.message = MESSAGE_SUCCESS;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">success</span><span class="hljs-params">(String message)</span>&#123;<br>        <span class="hljs-built_in">this</span>.code = CODE_DEFAULT;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.code = <span class="hljs-number">500</span>;<br>        <span class="hljs-built_in">this</span>.message = MESSAGE_FAILURE;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(String error)</span>&#123;<br>        <span class="hljs-built_in">this</span>.code = <span class="hljs-number">500</span>;<br>        <span class="hljs-built_in">this</span>.message = error;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(<span class="hljs-type">int</span> code,String error)</span>&#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.message = error;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(T data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getTotal</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> total;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTotal</span><span class="hljs-params">(Integer total)</span> &#123;<br>        <span class="hljs-built_in">this</span>.total = total;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-处理控制器响应的json数据"><a href="#6-处理控制器响应的json数据" class="headerlink" title="6.处理控制器响应的json数据"></a>6.处理控制器响应的json数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.config;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.<span class="hljs-keyword">module</span>.SimpleModule;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ser.std.ToStringSerializer;<br><span class="hljs-keyword">import</span> org.springframework.boot.jackson.JsonComponent;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理控制器响应的json数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@JsonComponent</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonSerializerConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ObjectMapper <span class="hljs-title function_">jacksonObjectMapper</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>        <span class="hljs-comment">// 设置日期格式：yyyy-MM-dd HH:mm:ss</span><br>        objectMapper.setDateFormat(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br><br>        <span class="hljs-comment">// 序列化时，允许null值</span><br>        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);<br>        <span class="hljs-comment">// 结果为null时不抛异常</span><br>        objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="hljs-literal">false</span>);<br><br>        <span class="hljs-comment">// 序列换成json时,将所有的long变成string,因为js中数的字类型不能包含所有的java long值</span><br>        <span class="hljs-type">SimpleModule</span> <span class="hljs-variable">simpleModule</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleModule</span>();<br>        <span class="hljs-comment">// Long的封装类型</span><br>        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);<br>        <span class="hljs-comment">// Long的原始类型</span><br>        simpleModule.addSerializer(Long.TYPE, ToStringSerializer.instance);<br>        objectMapper.registerModule(simpleModule);<br><br>        <span class="hljs-keyword">return</span> objectMapper;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="7-属性文件配置项AppConstants"><a href="#7-属性文件配置项AppConstants" class="headerlink" title="7.属性文件配置项AppConstants"></a>7.属性文件配置项AppConstants</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.constants;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Value</span> 引用属性文件中的配置项</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppConstants</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 哈希算法：MD5</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ENCRYPTION_ALG_MD5</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MD5&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加密盐</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ENCRYPTION_SALT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spreadk123!&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 哈希迭代次数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">ENCRYPTION_HASH_ITERATIONS</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * HTTP请求token字段名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ACCESS_TOKEN</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;X-Access-Token&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-Mybatis配置"><a href="#8-Mybatis配置" class="headerlink" title="8.Mybatis配置"></a>8.Mybatis配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.config;<br><br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Mybatis配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(&quot;com.example.demo.dao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisConfiguration</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>⚠️如果Mybatis的配置文件不放在resources文件夹，需要在pom.xml文件中指定说明</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>Shrio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合Mybatis</title>
    <link href="/2021/06/05/SpringBoot%E6%95%B4%E5%90%88Mybatis/"/>
    <url>/2021/06/05/SpringBoot%E6%95%B4%E5%90%88Mybatis/</url>
    
    <content type="html"><![CDATA[<h2 id="1、创建SpringBoot项目"><a href="#1、创建SpringBoot项目" class="headerlink" title="1、创建SpringBoot项目"></a>1、创建SpringBoot项目</h2><p><img src="/2021/06/05/SpringBoot%E6%95%B4%E5%90%88Mybatis/%E6%88%AA%E5%B1%8F2021-06-05%2021.28.19.png"></p><p><img src="/2021/06/05/SpringBoot%E6%95%B4%E5%90%88Mybatis/%E6%88%AA%E5%B1%8F2021-06-05%2021.29.45.png"></p><p><img src="/2021/06/05/SpringBoot%E6%95%B4%E5%90%88Mybatis/%E6%88%AA%E5%B1%8F2021-06-05%2021.30.24.png" alt="截屏2021-06-05 21.30.24"></p><p><img src="/2021/06/05/SpringBoot%E6%95%B4%E5%90%88Mybatis/%E6%88%AA%E5%B1%8F2021-06-05%2021.30.45.png" alt="截屏2021-06-05 21.30.45"></p><h2 id="2、导入依赖-pom-xml"><a href="#2、导入依赖-pom-xml" class="headerlink" title="2、导入依赖(pom.xml)"></a>2、导入依赖(pom.xml)</h2><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3、配置application-yml"><a href="#3、配置application-yml" class="headerlink" title="3、配置application.yml"></a>3、配置application.yml</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-comment"># 端口号</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-comment"># 数据源配置</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/blog?characterEncoding=UTF-8</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><br><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-comment"># 配置Mapper映射文件</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:/mapper/*Mapper.xml</span><br>  <span class="hljs-comment"># 配置MyBatis数据返回类型别名（默认别名是类名）</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.example.demo.entity</span><br><br><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">com:</span><br>      <span class="hljs-attr">example:</span><br>        <span class="hljs-attr">mapper:</span> <span class="hljs-string">debug</span><br><br></code></pre></td></tr></table></figure><h2 id="4、数据模型层-entity-User-java"><a href="#4、数据模型层-entity-User-java" class="headerlink" title="4、数据模型层(entity)    User.java"></a>4、数据模型层(entity)    User.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.entity;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: DingLong</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 2021/6/5 下午5:51</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String nickname;<br>    <span class="hljs-keyword">private</span> String account;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> status;<br><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getNickname</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> nickname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNickname</span><span class="hljs-params">(String nickname)</span> &#123;<br>        <span class="hljs-built_in">this</span>.nickname = nickname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAccount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> account;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAccount</span><span class="hljs-params">(String account)</span> &#123;<br>        <span class="hljs-built_in">this</span>.account = account;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getStatus</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> status;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStatus</span><span class="hljs-params">(<span class="hljs-type">int</span> status)</span> &#123;<br>        <span class="hljs-built_in">this</span>.status = status;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, nickname=&#x27;&quot;</span> + nickname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, account=&#x27;&quot;</span> + account + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, status=&quot;</span> + status +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="5-数据访问层-mapper或dao-UserMapper-java"><a href="#5-数据访问层-mapper或dao-UserMapper-java" class="headerlink" title="5.数据访问层(mapper或dao)    UserMapper.java"></a>5.数据访问层(mapper或dao)    UserMapper.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.mapper;<br><br><span class="hljs-keyword">import</span> com.example.demo.entity.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: DingLong</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 2021/6/5 下午5:52</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br><br>    List&lt;User&gt; <span class="hljs-title function_">select</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="6、业务逻辑层-service"><a href="#6、业务逻辑层-service" class="headerlink" title="6、业务逻辑层(service)"></a>6、业务逻辑层(service)</h2><h3 id="UserService-java"><a href="#UserService-java" class="headerlink" title="UserService.java"></a>UserService.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.service;<br><br><span class="hljs-keyword">import</span> com.example.demo.entity.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: DingLong</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 2021/6/5 下午8:53</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    List&lt;User&gt; <span class="hljs-title function_">select</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="UserServiceImpl-java"><a href="#UserServiceImpl-java" class="headerlink" title="UserServiceImpl.java"></a>UserServiceImpl.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.service.impl;<br><br><span class="hljs-keyword">import</span> com.example.demo.entity.User;<br><span class="hljs-keyword">import</span> com.example.demo.mapper.UserMapper;<br><span class="hljs-keyword">import</span> com.example.demo.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: DingLong</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 2021/6/5 下午8:54</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">select</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.userMapper.select();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="7、业务处理层-controller或web-UserController-java"><a href="#7、业务处理层-controller或web-UserController-java" class="headerlink" title="7、业务处理层(controller或web)    UserController.java"></a>7、业务处理层(controller或web)    UserController.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.controller;<br><br><span class="hljs-keyword">import</span> com.example.demo.entity.User;<br><span class="hljs-keyword">import</span> com.example.demo.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: DingLong</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 2021/6/5 下午8:56</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/userList&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">select</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.userService.select();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8、UserMapper-xml"><a href="#8、UserMapper-xml" class="headerlink" title="8、UserMapper.xml"></a>8、UserMapper.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-meta">    http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.example.demo.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.example.demo.entity.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;nickname&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;nickname&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;account&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;account&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;status&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;status&quot;</span> /&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;select&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.example.demo.entity.User&quot;</span>&gt;</span><br>        select * from user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="9、启动类Application-java"><a href="#9、启动类Application-java" class="headerlink" title="9、启动类Application.java"></a>9、启动类Application.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Application.class, args);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="10、运行后访问地址：http-localhost-8080-user-userList"><a href="#10、运行后访问地址：http-localhost-8080-user-userList" class="headerlink" title="10、运行后访问地址：http://localhost:8080/user/userList"></a>10、运行后访问地址：<a href="http://localhost:8080/user/userList">http://localhost:8080/user/userList</a></h2><h2 id="11、项目结构"><a href="#11、项目结构" class="headerlink" title="11、项目结构"></a>11、项目结构</h2><p><img src="/2021/06/05/SpringBoot%E6%95%B4%E5%90%88Mybatis/%E6%88%AA%E5%B1%8F2021-06-05%2021.46.38.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
