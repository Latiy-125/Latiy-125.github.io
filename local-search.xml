<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Influxdb 2.x 快速入门</title>
    <link href="/2022/09/17/Influxdb-2-x-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <url>/2022/09/17/Influxdb-2-x-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><h2 id="Organization"><a href="#Organization" class="headerlink" title="Organization"></a>Organization</h2><p><code>organization</code> 是一组用户的工作空间，一个组下用户可以创建多个bucket</p><h3 id="bucket"><a href="#bucket" class="headerlink" title="bucket"></a>bucket</h3><p>所有的 influxdb数据都存储在bucket中，<code>bucket</code>结合了数据库和保存期限（每条数据会被保留的时间）的概念，类似于RDMS的database的概念。<code>bucket</code>属于一个<code>organization</code></p><h3 id="Measurement"><a href="#Measurement" class="headerlink" title="Measurement"></a>Measurement</h3><p><code>measurement</code>是所有 tags fields 和时间的容器和RDMS的table的概念类似,是一个数据集的容器</p><h3 id="Fields"><a href="#Fields" class="headerlink" title="Fields"></a>Fields</h3><p>数据属性包括field key 和 field value 分别存储在 <code>_field</code>和 <code>_value</code>当中, 并且一个measurement中必须包含至少一个filed</p><h3 id="Field-key"><a href="#Field-key" class="headerlink" title="Field key"></a>Field key</h3><p>field key 是一个代表属性名称的字段，在示例数据中<code>bees</code>和<code>ants</code>就是field key</p><h3 id="Field-value"><a href="#Field-value" class="headerlink" title="Field value"></a>Field value</h3><p>field value 是对应 field key 的值,在示例数据中在<code>2019-08-18T00:00:00Z</code>该时间点 <code>bees</code>的值为23，而<code>ants</code>的值为30</p><h3 id="Field-set"><a href="#Field-set" class="headerlink" title="Field set"></a>Field set</h3><p>field set 表示在同一时间内 所有fields的集合</p><h3 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h3><p>和Fields类似，Tags也有 key value。但与Fields不同的是，field key存储在<code>_field</code>列中 而tag key则是本省就是列</p><h3 id="tag-key-和-tag-value"><a href="#tag-key-和-tag-value" class="headerlink" title="tag key 和 tag value"></a>tag key 和 tag value</h3><p>即tag 的 key 和 value 在Line Protocl中有更为直观的体现</p><h3 id="timestamp"><a href="#timestamp" class="headerlink" title="timestamp"></a>timestamp</h3><p>所有存储在influxdb中的数据都有一个<code>_time</code>列用来记录时间，在磁盘中以纳秒之间戳存储，但客户端查询时返回的是格式化的更易读的 <a href="https://links.jianshu.com/go?to=https://docs.influxdata.com/influxdb/v2.1/reference/glossary/%23rfc3339-timestamp">RFC3339</a> UTC时间格式</p><p>注：</p><ul><li>对于Fields 和 Tags 简单来说他们都是一组键值对的集合。在存储形式上，field 的key 被存储在一个名为<code>_field</code>的列中,而tag 的key则是以列头的形式存在的,该列的内容即为tag value。可以从示例数据中直观的看出其区别。</li><li>另外值得注意的是，field 和 tag 都可以用来存储数据，但tag只能存储字符串类型数据，而filed既可以存储字符串类型又可以存储数值类型数据。</li><li>那么我是否可以在tag中存储字符串形式的数据呢？</li><li>当然可以但其不可以参与flux查询中的<code>mean()</code> <code>max()</code> 等聚合函数的计算。所以field 和 tag 还是有着本质上的区别的。</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><p>influxdb 安装比较简单直接下载可执行文件运行即可</p><p><a href="https://links.jianshu.com/go?to=https://dl.influxdata.com/influxdb/releases/influxdb2-2.1.1-windows-amd64.zip">Windows下载链接</a></p><p><a href="https://links.jianshu.com/go?to=https://dl.influxdata.com/influxdb/releases/influxdb2-2.1.1-linux-amd64.tar.gz">Linux下载链接</a></p><p>解压后直接运行<code>influxd</code>即可，服务启动后访问 localhost:8086 进行首次配置。</p><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><p>使用docker方式运行时可直接<code>docker run</code>访问IP:8086进行初始化，也可在启动容器时初始化。</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">docker run -d -p 8086:8086 \<br>      -e DOCKER_INFLUXDB_INIT_MODE=setup \<br>      -e DOCKER_INFLUXDB_INIT_USERNAME=dev \  <br>      -e DOCKER_INFLUXDB_INIT_PASSWORD=dev12345678 \      <br>      -e DOCKER_INFLUXDB_INIT_ORG=dev \  <br>      -e DOCKER_INFLUXDB_INIT_BUCKET=dev \  <br>      influxdb:2.2.0<br>docker run -d -p 8086:8086 --name influxdb <br>-e DOCKER_INFLUXDB_INIT_MODE=setup <br>-e DOCKER_INFLUXDB_INIT_USERNAME=dev <br>-e DOCKER_INFLUXDB_INIT_PASSWORD=dev12345678 <br>-e DOCKER_INFLUXDB_INIT_ORG=dev <br>-e DOCKER_INFLUXDB_INIT_BUCKET=dev <br>-e DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=spreadk-dev-networkmonitor<br>influxdb:2.2.0<br></code></pre></td></tr></table></figure><ul><li><p><code>-e DOCKER_INFLUXDB_INIT_MODE=setup</code> 指其定为初始化模式。</p></li><li><p><code>-e DOCKER_INFLUXDB_INIT_USERNAME=dev</code> 指定用户名</p></li><li><p><code>-e DOCKER_INFLUXDB_INIT_PASSWORD=dev12345678</code> 指定密码</p></li><li><p><code>-e DOCKER_INFLUXDB_INIT_ORG=dev</code> 创建初始org</p></li><li><p><code>-e DOCKER_INFLUXDB_INIT_BUCKET=dev</code> 创建初始bucket</p></li><li><p><code>DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=spreadk-dev-networkmonitor</code> 创建初始管理员token</p></li></ul><h1 id="influx-CLI"><a href="#influx-CLI" class="headerlink" title="influx CLI"></a>influx CLI</h1><p>注：以docker容器为例</p><p>进入容器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it 容器ID /bin/bash<br></code></pre></td></tr></table></figure><h2 id="通用设置"><a href="#通用设置" class="headerlink" title="通用设置"></a>通用设置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">COMMON OPTIONS:<br>   --host value                     HTTP address of InfluxDB [$INFLUX_HOST]<br>   --skip-verify                    Skip TLS certificate chain and host name verification [$INFLUX_SKIP_VERIFY]<br>   --configs-path value             Path to the influx CLI configurations [$INFLUX_CONFIGS_PATH]<br>   --active-config value, -c value  Config name to use for command [$INFLUX_ACTIVE_CONFIG]<br>   --http-debug                     <br>   --json                           Output data as JSON [$INFLUX_OUTPUT_JSON]<br>   --hide-headers                   Hide the table headers in output data [$INFLUX_HIDE_HEADERS]<br>   --token value, -t value          Token to authenticate request [$INFLUX_TOKEN]<br></code></pre></td></tr></table></figure><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">influx user create -n &lt;username&gt; -p &lt;password&gt; -o &lt;org-name&gt;<br>例如：<br><span class="hljs-meta">$ </span><span class="language-bash">influx user create -n <span class="hljs-built_in">test</span> -p test123456</span> <br>IDName<br>094275ec20e77000test<br></code></pre></td></tr></table></figure><h3 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">influx user list</span><br>IDName<br>09426e1deb8d3000dev<br>094275ec20e77000test<br></code></pre></td></tr></table></figure><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">influx user delete --<span class="hljs-built_in">id</span> &lt;user-id&gt;</span> <br>例：<br><span class="hljs-meta">$ </span><span class="language-bash">influx user delete --<span class="hljs-built_in">id</span> 094275ec20e77000</span><br>IDNameDeleted<br>094275ec20e77000testtrue<br></code></pre></td></tr></table></figure><h3 id="更新用户-修改用户名"><a href="#更新用户-修改用户名" class="headerlink" title="更新用户(修改用户名)"></a>更新用户(修改用户名)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">influx user update -i &lt;user-id&gt; -n &lt;new-username&gt;</span><br>例：<br><span class="hljs-meta">$ </span><span class="language-bash">influx user update -i 09426e1deb8d3000 -n dev123</span><br>IDName<br>09426e1deb8d3000dev123<br></code></pre></td></tr></table></figure><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">influx user password -n &lt;username&gt;</span><br>例：<br><span class="hljs-meta">$ </span><span class="language-bash">influx user password -n dev</span><br>? Please type new password for &quot;dev&quot; *********<br>? Please type new password for &quot;dev&quot; again *********<br>Successfully updated password for user &quot;dev&quot;<br></code></pre></td></tr></table></figure><p>注：新密码为 dev123456</p><h2 id="oganization管理"><a href="#oganization管理" class="headerlink" title="oganization管理"></a>oganization管理</h2><p>官方建议一个influxdb实例中建组不超过20个，因为influxdb支持大约20个bucket的写入或查询，超过这个值将会对influxdb性能造成影响</p><h4 id="创建oganization"><a href="#创建oganization" class="headerlink" title="创建oganization"></a>创建oganization</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">USAGE:<br>   influx org create [command options] [arguments...] <br>OPTIONS:<br>   --name value, -n value         Name to set on the new organization<br>   --description value, -d value  Description to set on the new organization<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">influx org create -n &lt;org-name&gt;</span><br>例：<br><span class="hljs-meta">$ </span><span class="language-bash">influx org create -n <span class="hljs-built_in">test</span></span><br>IDName<br>ecde102dc2554476test<br></code></pre></td></tr></table></figure><h4 id="查看oganization"><a href="#查看oganization" class="headerlink" title="查看oganization"></a>查看oganization</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">influx org list</span><br>IDName<br>c69da0352db9db73dev<br>ecde102dc2554476test<br></code></pre></td></tr></table></figure><h4 id="更新oganization"><a href="#更新oganization" class="headerlink" title="更新oganization"></a>更新oganization</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">USAGE:<br>   influx org update [command options] [arguments...]<br>OPTIONS:<br>   --id value, -i value           The organization ID [$INFLUX_ORG_ID]<br>   --name value, -n value         New name to set on the organization [$INFLUX_ORG]<br>   --description value, -d value  New description to set on the organization [$INFLUX_ORG_DESCRIPTION]<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">influx org update -i &lt;org-id&gt; -n &lt;new-org-name&gt;</span><br>例：<br><span class="hljs-meta">$ </span><span class="language-bash">influx org update -i ecde102dc2554476 -n test123</span><br>IDName<br>ecde102dc2554476test123<br></code></pre></td></tr></table></figure><h4 id="删除oganization"><a href="#删除oganization" class="headerlink" title="删除oganization"></a>删除oganization</h4><figure class="highlight shell"><figcaption><span>l</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">influx org delete -i &lt;org-id&gt;</span><br>例：<br><span class="hljs-meta">$ </span><span class="language-bash">influx org delete -i ecde102dc2554476</span><br>IDNameDeleted<br>ecde102dc2554476test123true<br></code></pre></td></tr></table></figure><h2 id="bucket管理"><a href="#bucket管理" class="headerlink" title="bucket管理"></a>bucket管理</h2><p>bucket内的数据是有保存期限的influxdb称之为<code>retention-period-duration</code>,bucket在创建之初就会指定</p><h3 id="bucket创建"><a href="#bucket创建" class="headerlink" title="bucket创建"></a>bucket创建</h3><figure class="highlight shell"><figcaption><span>l</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">USAGE:<br>   influx bucket create [command options] [arguments...]<br>OPTIONS:<br>   --org-id value                 The ID of the organization [$INFLUX_ORG_ID]<br>   --org value, -o value          The name of the organization [$INFLUX_ORG]<br>   --name value, -n value         New bucket name [$INFLUX_BUCKET_NAME]<br>   --description value, -d value  Description of the bucket that will be created<br>   --retention value, -r value    Duration bucket will retain data, or 0 for infinite<br>   --shard-group-duration value   Shard group duration used internally by the storage engine<br>   --schema-type value            The schema type (implicit, explicit) (default: implicit)<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">influx bucket create -n &lt;bucket-name&gt; -o &lt;org-name&gt; -r &lt;retention-period-duration&gt;</span><br><span class="hljs-meta"># </span><span class="language-bash">-o 指定organization名称，-r指定数据保留时间(保留时间最少为1h0m0s)</span><br><span class="hljs-meta"># </span><span class="language-bash">数据保留时间单位在以下单位中取值:</span><br><span class="hljs-meta">#</span><span class="language-bash">纳秒 (ns)</span><br><span class="hljs-meta">#</span><span class="language-bash">微秒 (us or µs)</span><br><span class="hljs-meta">#</span><span class="language-bash">毫秒 (ms)</span><br><span class="hljs-meta">#</span><span class="language-bash">秒 (s)</span><br><span class="hljs-meta">#</span><span class="language-bash">分 (m)</span><br><span class="hljs-meta">#</span><span class="language-bash">时 (h)</span><br><span class="hljs-meta">#</span><span class="language-bash">日 (d)</span><br><span class="hljs-meta">#</span><span class="language-bash">周 (w)</span><br><span class="hljs-meta">$ </span><span class="language-bash">influx bucket create -n test-bucket -o dev -r 1h</span> <br>IDNameRetentionShard group durationOrganization IDSchema Type<br>99d78521560d9539test-bucket1h0m0s1h0m0sc69da0352db9db73implicit<br></code></pre></td></tr></table></figure><h3 id="bucket更新"><a href="#bucket更新" class="headerlink" title="bucket更新"></a>bucket更新</h3><h4 id="更新bucket名称"><a href="#更新bucket名称" class="headerlink" title="更新bucket名称"></a><strong>更新bucket名称</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">influx bucket update -i &lt;bucket-id&gt; -n &lt;new-bucket-name&gt;</span><br>例：<br><span class="hljs-meta">$ </span><span class="language-bash">influx bucket update -i 99d78521560d9539 -n bucket-test</span><br>IDNameRetentionShard group durationOrganization IDSchema Type<br>99d78521560d9539bucket-test1h0m0s1h0m0sc69da0352db9db73implicit<br></code></pre></td></tr></table></figure><h4 id="更新数据保存时间"><a href="#更新数据保存时间" class="headerlink" title="更新数据保存时间"></a><strong>更新数据保存时间</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">influx bucket update -i &lt;bucket-id&gt; -r &lt;retention period with units&gt;</span><br>例：<br><span class="hljs-meta">$ </span><span class="language-bash">influx bucket update -i 99d78521560d9539 -r 1h</span>         <br>IDNameRetentionShard group durationOrganization IDSchema Type<br>99d78521560d9539bucket-test1h0m0s1h0m0sc69da0352db9db73implicit<br></code></pre></td></tr></table></figure><h3 id="bucket查看"><a href="#bucket查看" class="headerlink" title="bucket查看"></a>bucket查看</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">influx bucket list -o &lt;org-name or org-id&gt;</span><br>例：<br><span class="hljs-meta">$ </span><span class="language-bash">influx bucket list -o dev</span><br>IDNameRetentionShard group durationOrganization IDSchema Type<br>d34ed88bdd12bfb4_monitoring168h0m0s24h0m0sc69da0352db9db73implicit<br>81d3b260385551ce_tasks72h0m0s24h0m0sc69da0352db9db73implicit<br>99d78521560d9539bucket-test1h0m0s1h0m0sc69da0352db9db73implicit<br>829767b95b2d5186devinfinite168h0m0sc69da0352db9db73implicit<br></code></pre></td></tr></table></figure><h4 id="bucket删除"><a href="#bucket删除" class="headerlink" title="bucket删除"></a>bucket删除</h4><h4 id="通过名称删除"><a href="#通过名称删除" class="headerlink" title="通过名称删除"></a><strong>通过名称删除</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">influx bucket delete -n &lt;bucket-name&gt; -o &lt;org-name&gt;</span><br>例：<br><span class="hljs-meta">$ </span><span class="language-bash">influx bucket delete -n bucket-test -o dev</span><br>IDNameRetentionShard group durationOrganization IDSchema TypeDeleted<br>99d78521560d9539bucket-test1h0m0s1h0m0sc69da0352db9db73implicittrue<br></code></pre></td></tr></table></figure><h4 id="通过id删除"><a href="#通过id删除" class="headerlink" title="通过id删除"></a><strong>通过id删除</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">influx bucket delete -i &lt;bucket-id&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Flux查询语言"><a href="#Flux查询语言" class="headerlink" title="Flux查询语言"></a>Flux查询语言</h1><p>大多数Flux查询遵循如下几个步骤</p><ul><li><p>指定数据源</p></li><li><p>过滤数据</p></li><li><p>对数据整形（重新组织数据结构）</p></li><li><p>数据内容计算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">//例<br>from(bucket: &quot;example-bucket&quot;)            // ── Source<br>  |&gt; range(start: -1d)                    // ── Filter on time<br>  |&gt; filter(fn: (r) =&gt; r._field == &quot;foo&quot;) // ── Filter on column values<br>  |&gt; group(columns: [&quot;sensorID&quot;])         // ── Shape<br>  |&gt; mean()                               // ── Process<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>influxdb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL14开发指南</title>
    <link href="/2022/09/11/PostgreSQL14%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    <url>/2022/09/11/PostgreSQL14%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="1、终端启动psql"><a href="#1、终端启动psql" class="headerlink" title="1、终端启动psql"></a>1、终端启动psql</h1><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="language-bash">进入容器</span><br>admin@localhost % docker exec -it psql /bin/bash<br>root@06ee4b912368:/# su - postgres<br>postgres@06ee4b912368:~$ psql<br>psql (14.2 (Debian 14.2-1.pgdg110+1))<br>Type &quot;help&quot; for help.<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="language-bash">连接数据库</span><br>postgres=# \c testdb;<br>You are now connected to database &quot;testdb&quot; as user &quot;postgres&quot;.<br>testdb=# <br></code></pre></td></tr></table></figure><h1 id="2、用户和角色"><a href="#2、用户和角色" class="headerlink" title="2、用户和角色"></a>2、用户和角色</h1><h2 id="1-创建角色"><a href="#1-创建角色" class="headerlink" title="1.创建角色"></a>1.创建角色</h2><p>使用 CREATE ROLE 语句创建角色：name 指定了要创建的角色名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> ROLE name;<br></code></pre></td></tr></table></figure><p>psql 中的\du 命令，即显示当前数据库集群中已有的角色</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> rolname <span class="hljs-keyword">FROM</span> pg_roles;<br></code></pre></td></tr></table></figure><h2 id="2-删除角色"><a href="#2-删除角色" class="headerlink" title="2.删除角色"></a>2.删除角色</h2><p>删除角色的语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> ROLE name;<br></code></pre></td></tr></table></figure><h1 id="3、数据库"><a href="#3、数据库" class="headerlink" title="3、数据库"></a>3、数据库</h1><h2 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h2><p>\l 命令，即 查看已有的数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> datname <span class="hljs-keyword">FROM</span> pg_database;<br></code></pre></td></tr></table></figure><p>注：其中 template0 和 template1 是模板数据库，创建新的数据库时默认基于 template1 进行复制；postgres 数据库是为 postgres 用户创建的默认数据库。</p><p>创建一个数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE name;<br></code></pre></td></tr></table></figure><h2 id="2-修改数据库"><a href="#2-修改数据库" class="headerlink" title="2.修改数据库"></a>2.修改数据库</h2><p>修改数据库的属性和配置：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> DATABASE name action;<br></code></pre></td></tr></table></figure><p>action 指定了要执行的修改操作，例如修改数据库的名称、所有者、默认表空间、数据库会话变量的默认值等等。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">修改数据库的名称：<br><span class="hljs-keyword">ALTER</span> DATABASE dbname RENAME <span class="hljs-keyword">TO</span> newdb;<br>修改数据库的拥有者：<br><span class="hljs-keyword">ALTER</span> DATABASE dbname OWNER <span class="hljs-keyword">TO</span> username;<br>设置指定数据库的配置：<br><span class="hljs-keyword">ALTER</span> DATABASE dbname <span class="hljs-keyword">SET</span> configuration_parameter &#123; <span class="hljs-keyword">TO</span> <span class="hljs-operator">|</span> <span class="hljs-operator">=</span> &#125; &#123; <span class="hljs-keyword">value</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">DEFAULT</span> &#125;<br>还原默认配置：<br><span class="hljs-keyword">ALTER</span> DATABASE newdb RESET enable_indexscan;<br></code></pre></td></tr></table></figure><h2 id="3-删除数据库"><a href="#3-删除数据库" class="headerlink" title="3.删除数据库"></a>3.删除数据库</h2><p>删除一个数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> DATABASE [ IF <span class="hljs-keyword">EXISTS</span>] name;<br></code></pre></td></tr></table></figure><h2 id="4-管理模式"><a href="#4-管理模式" class="headerlink" title="4.管理模式"></a>4.管理模式</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql">创建一个新的模式：<br><span class="hljs-keyword">CREATE</span> SCHEMA name;<br>创建模式并指定它的拥有者：<br><span class="hljs-keyword">CREATE</span> SCHEMA name <span class="hljs-keyword">AUTHORIZATION</span> username;<br>注：以 pg_开头的名称是系统保留的模式名称，用户无法创建这样的模式。<br><br>修改模式的名称：<br><span class="hljs-keyword">ALTER</span> SCHEMA name RENAME <span class="hljs-keyword">TO</span> new_name<br>修改模式的拥有者：<br><span class="hljs-keyword">ALTER</span> SCHEMA name OWNER <span class="hljs-keyword">TO</span> &#123; new_owner <span class="hljs-operator">|</span> <span class="hljs-built_in">CURRENT_USER</span> <span class="hljs-operator">|</span> <span class="hljs-built_in">SESSION_USER</span> &#125;<br><br>删除一个模式：<br><span class="hljs-keyword">DROP</span> SCHEMA name;<br>如果模式中存在其他对象，以上语句无法执行；需要先删除该模式中所有的对象，或者使用以下语句级联删除这些对象：<br><span class="hljs-keyword">DROP</span> SCHEMA name CASCADE;<br></code></pre></td></tr></table></figure><h1 id="4、管理数据表"><a href="#4、管理数据表" class="headerlink" title="4、管理数据表"></a>4、管理数据表</h1><h2 id="1-创建表"><a href="#1-创建表" class="headerlink" title="1.创建表"></a>1.创建表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> table_name<br>(<br>column_name data_type column_constraint,<br>column_name data_type,<br>...,<br>table_constraint<br>);<br></code></pre></td></tr></table></figure><p>该语句包含以下内容：</p><ul><li>首先，table_name 指定了新表的名称。</li><li>括号内是字段的定义， column_name 是字段的名称， data_type 是它的类型，column_constraint 是可选的字段约束；多个字段使用逗号进行分隔。</li><li>最后，table_constraint 是可选的表级约束。</li></ul><p>除了自己定义表的结构之外，PostgreSQL 还提供了另一个创建表的方法，就是通过一个查询的结果创建新表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> table_name<br><span class="hljs-keyword">AS</span> query;<br>或者<br><span class="hljs-keyword">SELECT</span> ...<br><span class="hljs-keyword">INTO</span> new_table<br><span class="hljs-keyword">FROM</span> ...;<br></code></pre></td></tr></table></figure><h3 id="模式搜索路径"><a href="#模式搜索路径" class="headerlink" title="模式搜索路径"></a>模式搜索路径</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">当前的搜索路径：<br><span class="hljs-keyword">SHOW</span> search_path;<br>修改默认的搜索路径：<br><span class="hljs-keyword">SET</span> search_path <span class="hljs-keyword">TO</span> 用户,模式名;<br></code></pre></td></tr></table></figure><p>注：不指定的时候默认为当前用户的public模式下</p><h2 id="2-修改表"><a href="#2-修改表" class="headerlink" title="2.修改表"></a>2.修改表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> name action;<br></code></pre></td></tr></table></figure><p>其中的 action 表示要执行的操作。</p><h3 id="1-添加字段"><a href="#1-添加字段" class="headerlink" title="(1)添加字段"></a>(1)添加字段</h3><p>命令如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> column_name data_type [column_constraint];<br></code></pre></td></tr></table></figure><p>添加字段与创建表时的字段选项相同，包含字段名称、字段类型以及可选的约束(column_constraint)。</p><h3 id="2-删除字段"><a href="#2-删除字段" class="headerlink" title="(2)删除字段"></a>(2)删除字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name<br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span> column_name;<br></code></pre></td></tr></table></figure><p>注：如果该字段被其他对象（例如外键引用、</p><p>视图、存储过程等）引用，无法直接删除；在 DROP 的最后加上 CASCADE 选项即可级联删除依赖的对象。</p><h3 id="3-添加约束"><a href="#3-添加约束" class="headerlink" title="(3)添加约束"></a>(3)添加约束</h3><p>添加约束时通常使用表级约束语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ADD</span> table_constraint;<br></code></pre></td></tr></table></figure><p>对于非空约束（NOT NULL），可以使用以下语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">COLUMN</span> column_name <span class="hljs-keyword">SET</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><h3 id="4-删除约束"><a href="#4-删除约束" class="headerlink" title="(4)删除约束"></a>(4)删除约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">CONSTRAINT</span> constraint_name [ RESTRICT <span class="hljs-operator">|</span> CASCADE ];<br></code></pre></td></tr></table></figure><p>删除非空约束需要使用单独的语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">COLUMN</span> column_name <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><h3 id="5-修改字段默认值"><a href="#5-修改字段默认值" class="headerlink" title="(5)修改字段默认值"></a>(5)修改字段默认值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">COLUMN</span> column_name <span class="hljs-keyword">SET</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">value</span>;<br></code></pre></td></tr></table></figure><p>删除已有的默认值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">COLUMN</span> column_name <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DEFAULT</span>;<br></code></pre></td></tr></table></figure><h3 id="6-修改字段数据类型"><a href="#6-修改字段数据类型" class="headerlink" title="(6)修改字段数据类型"></a>(6)修改字段数据类型</h3><p>隐式转换：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">COLUMN</span> column_name TYPE new_data_type;<br></code></pre></td></tr></table></figure><p>使用 USING 执行显式转换：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">COLUMN</span> column_name TYPE new_data_type <span class="hljs-keyword">USING</span> expression;<br>注：expression<span class="hljs-operator">=</span><span class="hljs-operator">=</span>column_name::new_data_type<br></code></pre></td></tr></table></figure><h3 id="7-重命名字段"><a href="#7-重命名字段" class="headerlink" title="(7)重命名字段"></a>(7)重命名字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name RENAME <span class="hljs-keyword">COLUMN</span> column_name <span class="hljs-keyword">TO</span> new_column_name;<br></code></pre></td></tr></table></figure><h3 id="8-重命名表"><a href="#8-重命名表" class="headerlink" title="(8)重命名表"></a>(8)重命名表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name RENAME <span class="hljs-keyword">TO</span> new_name;<br></code></pre></td></tr></table></figure><h2 id="3-删除表"><a href="#3-删除表" class="headerlink" title="3.删除表"></a>3.删除表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> [ IF <span class="hljs-keyword">EXISTS</span> ] name [ CASCADE <span class="hljs-operator">|</span> RESTRICT ];<br></code></pre></td></tr></table></figure><p>如果被删除的表存在依赖于它的视图或外键约束，需要指定 CASCADE 选项执行级联删除</p><h1 id="5、管理表空间"><a href="#5、管理表空间" class="headerlink" title="5、管理表空间"></a>5、管理表空间</h1><h2 id="1-创建表空间"><a href="#1-创建表空间" class="headerlink" title="1.创建表空间"></a>1.创建表空间</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span>SPACE tablespace_name<br>OWNER user_name<br>LOCATION <span class="hljs-string">&#x27;directory&#x27;</span>;<br></code></pre></td></tr></table></figure><p>表空间的名称不能以 pg_开头，它们是系统表空间的保留名称；LOCATION 参数必须指定绝对路径名，指定的目录必须是一个已经存在的空目录，PostgreSQL 操作系统用户（postgres）必须是该目录的拥有者，以便能够进行文件的读写。</p><h2 id="2-修改表空间"><a href="#2-修改表空间" class="headerlink" title="2.修改表空间"></a>2.修改表空间</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">表空间的重命名：<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span>SPACE name RENAME <span class="hljs-keyword">TO</span> new_name;<br>修改表空间的拥有者：<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span>SPACE name OWNER <span class="hljs-keyword">TO</span> &#123; new_owner <span class="hljs-operator">|</span> <span class="hljs-built_in">CURRENT_USER</span> <span class="hljs-operator">|</span> <span class="hljs-built_in">SESSION_USER</span> &#125;;<br>设置表空间的参数：<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span>SPACE name <span class="hljs-keyword">SET</span> ( tablespace_option <span class="hljs-operator">=</span> <span class="hljs-keyword">value</span> [, ... ] );<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span>SPACE name RESET ( tablespace_option [, ... ] );<br></code></pre></td></tr></table></figure><h2 id="3-删除表空间"><a href="#3-删除表空间" class="headerlink" title="3.删除表空间"></a>3.删除表空间</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> TABLESPACE [ IF <span class="hljs-keyword">EXISTS</span> ] name;<br></code></pre></td></tr></table></figure><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>简单事务实例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 开启事务</span><br><span class="hljs-keyword">begin</span>;<br><span class="hljs-comment">-- 插入一条数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> accounts(user_name, balance)<br><span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;UserC&#x27;</span>, <span class="hljs-number">2000</span>);<br><span class="hljs-comment">-- 查询表</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> accounts;<br><span class="hljs-comment">-- 新建保存点sv1</span><br><span class="hljs-keyword">savepoint</span> sv1;<br><span class="hljs-comment">-- 插入数据</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> accounts(user_name, balance)<br><span class="hljs-keyword">values</span> (<span class="hljs-string">&#x27;UserD&#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">-- 回滚到保存点sv1</span><br><span class="hljs-keyword">ROLLBACK</span> <span class="hljs-keyword">TO</span> sv1;<br><span class="hljs-comment">-- 提交事务</span><br><span class="hljs-keyword">COMMIT</span>;<br></code></pre></td></tr></table></figure><p>演示 PostgreSQL 默认级别（READ COMMITTED）时不会发生脏读，但是存在不可重复读、幻读和更新丢失问题：</p><table><thead><tr><th>事务1</th><th>事务2</th></tr></thead><tbody><tr><td>begin;<br>SELECT balance<br>FROM accounts <br>WHERE id = 1;– 返回 6000</td><td></td></tr><tr><td></td><td>begin;<br>UPDATE accounts set balance = balance + 1000 <br>WHERE id = 1;<br>SELECT balance<br>FROM accounts<br>WHERE id = 1; – 返回 7000</td></tr><tr><td>SELECT balance<br>FROM accounts<br>WHERE id = 1; – 仍然返回 6000，没有脏读</td><td></td></tr><tr><td></td><td>commit; – 提交事务</td></tr><tr><td>SELECT balance<br>FROM accounts<br>WHERE id = 1; – 此时返回 7000，出现不可重复读</td><td></td></tr><tr><td></td><td></td></tr><tr><td>SELECT * FROM accounts WHERE id=4;– 返回UserC</td><td>begin;<br>DELETE FROM accounts WHERE id = 4;<br>commit;– 删除 UserC 并提交事务</td></tr><tr><td>SELECT * FROM accounts WHERE id=4; – 没有结果，出现幻读</td><td></td></tr><tr><td></td><td></td></tr><tr><td>SELECT balance<br>FROM accounts<br>WHERE id = 1; – 此时返回 7000</td><td></td></tr><tr><td></td><td>begin;<br>SELECT balance<br>FROM accounts<br>WHERE id = 1; – 此时返回 7000</td></tr><tr><td>UPDATE accounts set balance = 6000 WHERE id = 1; – 更新为 6000</td><td></td></tr><tr><td></td><td>UPDATE accounts set balance = 8000 WHERE id = 1; – 等待事务 1 提交</td></tr><tr><td>commit;</td><td></td></tr><tr><td></td><td>commit;</td></tr><tr><td>SELECT balance<br>FROM accounts<br>WHERE id = 1; – 返回 8000，而不是自己修改成的6000，更新丢失</td><td></td></tr></tbody></table><h1 id="psql常用命令"><a href="#psql常用命令" class="headerlink" title="psql常用命令"></a>psql常用命令</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sql">  \l  查看所有数据库<br>  \d [ <span class="hljs-keyword">pattern</span> ] 该命令将显示每个匹配关系（表、视图、索引、序列）的信息，可以加上 <span class="hljs-operator">+</span> 查看更多的信息，如 \d<span class="hljs-operator">+</span><br><span class="hljs-number">1</span>、不加任何参数表示查看当前数据库的所有表。<br><span class="hljs-number">2</span>、\d tablename 后面跟一个表名，表示显示这个表的结构定义<br><span class="hljs-number">3</span>、\d indexname 也可以显示索引的信息，如 \d 索引名称<br><span class="hljs-number">4</span>、\d <span class="hljs-operator">*</span> 后面也可以跟通配符如 &quot;*&quot; 或 &quot;?&quot;，\d x<span class="hljs-operator">*</span><br><span class="hljs-number">5</span>、\d<span class="hljs-operator">+</span> 将显示比 \d 更详细的信息，还会显示任何与表关系的注释，以及表中出现的 OID <br><span class="hljs-number">6</span>、\dt 只显示匹配的表  <br>   \di 只显示索引<br>   \ds  只显示序列<br>   \dv 只显示视图<br>   \df 只显示函数<br><span class="hljs-number">7</span>、\timing <span class="hljs-keyword">on</span>或off 显示 <span class="hljs-keyword">SQL</span> 已执行的时间，默认情况下是 off         <br><span class="hljs-number">8</span>、\dn 列出所有的 schema <br><span class="hljs-number">9</span>、 \du 或 \dg 列出所有的数据库用户和角色<br><span class="hljs-number">10</span>、\db 显示所有的表空间，表空间其实是一个目录，放在这个表空间的表，就是把表的数据文件发到这个表空间下。<br><span class="hljs-number">11</span>、\dp 或 \z 显示表的权限分配情况<br><span class="hljs-number">12</span>、\encoding 指定客户端的字符编码，如 \encoding UTF8; <br><span class="hljs-number">13</span>、\pset 设置输出的格式，\pset border <span class="hljs-number">0</span> : 表示输出内容无边框。 border <span class="hljs-number">1</span> ：表示边框只在内部。border <span class="hljs-number">2</span> ：内外都有边框<br><span class="hljs-number">14</span>、\x 把表中的每一行的每列数据都拆分为单行展示，与 MySQL 中的 &quot;\G&quot; 的功能类似。<br><span class="hljs-number">15</span>、\echo 用于输出一行信息，通常用于在 .<span class="hljs-keyword">sql</span> 文件中输出一些提示信息。 <br><span class="hljs-number">16</span>、\password 设置密码<br><span class="hljs-number">17</span>、\conninfo 列出当前数据库连接的信息<br><span class="hljs-number">18</span>、\dx 查看数据库中安装的扩展 或 <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> pg_extension;<br>注：更多的命令可以用 \? 来显示  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PostgreSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac中docker安装Redis步骤</title>
    <link href="/2022/09/09/Mac%E4%B8%ADdocker%E5%AE%89%E8%A3%85Redis%E6%AD%A5%E9%AA%A4/"/>
    <url>/2022/09/09/Mac%E4%B8%ADdocker%E5%AE%89%E8%A3%85Redis%E6%AD%A5%E9%AA%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Mac安装docker"><a href="#1-Mac安装docker" class="headerlink" title="1.Mac安装docker"></a>1.Mac安装docker</h2><h2 id="2-搜寻镜像：docker-search-–filter-is-official-true-redis"><a href="#2-搜寻镜像：docker-search-–filter-is-official-true-redis" class="headerlink" title="2.搜寻镜像：docker search –filter=is-official=true redis"></a>2.搜寻镜像：docker search –filter=is-official=true redis</h2><h2 id="3-拉取镜像：docker-pull-redis"><a href="#3-拉取镜像：docker-pull-redis" class="headerlink" title="3.拉取镜像：docker pull redis"></a>3.拉取镜像：docker pull redis</h2><h2 id="4-查看镜像：docker-images"><a href="#4-查看镜像：docker-images" class="headerlink" title="4.查看镜像：docker images"></a>4.查看镜像：docker images</h2><h2 id="5-运行容器：docker-run-p-6379-6379-v-PWD-data-data-d-redis-latest-redis-server-–appendonly-yes"><a href="#5-运行容器：docker-run-p-6379-6379-v-PWD-data-data-d-redis-latest-redis-server-–appendonly-yes" class="headerlink" title="5.运行容器：docker run -p 6379:6379 -v $PWD/data:/data -d redis:latest redis-server –appendonly yes"></a>5.运行容器：docker run -p 6379:6379 -v $PWD/data:/data -d redis:latest redis-server –appendonly yes</h2><h2 id="docker-run-itd-–name-名称-p-6379-6379-redis"><a href="#docker-run-itd-–name-名称-p-6379-6379-redis" class="headerlink" title="docker run -itd –name 名称 -p 6379:6379 redis"></a>docker run -itd –name 名称 -p 6379:6379 redis</h2><h2 id="6-重新命名redis容器名称为redis：docker-rename-原名称-redis"><a href="#6-重新命名redis容器名称为redis：docker-rename-原名称-redis" class="headerlink" title="6.重新命名redis容器名称为redis：docker rename 原名称 redis"></a>6.重新命名redis容器名称为redis：docker rename 原名称 redis</h2><h2 id="7-查看容器运行信息：docker-ps"><a href="#7-查看容器运行信息：docker-ps" class="headerlink" title="7.查看容器运行信息：docker ps"></a>7.查看容器运行信息：docker ps</h2><h2 id="8-连接启动Redis：docker-exec-it-容器ID-bin-bash，然后输入：redis-cli-–raw"><a href="#8-连接启动Redis：docker-exec-it-容器ID-bin-bash，然后输入：redis-cli-–raw" class="headerlink" title="8.连接启动Redis：docker exec -it 容器ID /bin/bash，然后输入：redis-cli –raw"></a>8.连接启动Redis：docker exec -it 容器ID /bin/bash，然后输入：redis-cli –raw</h2><figure class="highlight ada"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs ada">停止Redis：<br><span class="hljs-comment">---- docker stop redis</span><br>开启Redis：<br><span class="hljs-comment">---- docker start redis</span><br>重启redis：<br><span class="hljs-comment">---- docker restart redis</span><br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs vim">服务端:<br><span class="hljs-number">1</span>、前台启动<br>　　./redis-server (ctrl + <span class="hljs-keyword">c</span>   退出前台启动)<br><br><span class="hljs-number">2</span>、后台启动<br>　　./redis-server redis.<span class="hljs-keyword">conf</span><br><br><span class="hljs-number">3</span>、查看redis后台是否正常启动<br>　　方式一:　　<span class="hljs-keyword">ps</span> -ef |<span class="hljs-keyword">grep</span> redis<br>　　方式二:　　<span class="hljs-keyword">ps</span> aux | <span class="hljs-keyword">grep</span> redis<br>　　方式三:　　客户端登录之后输入ping,如果能显示pong则代表后台启动成功.<br><br><span class="hljs-number">4</span>关闭redis后台<br>　　方式一:  先使用<span class="hljs-keyword">ps</span> -ef|<span class="hljs-keyword">grep</span> redis  或者是 <span class="hljs-keyword">ps</span> aux|<span class="hljs-keyword">grep</span> redis来查看redis的端口,然后输入kill redis端口号来关闭redis后台.<br>　　方式二:  ./redis-cli shutdown<br><br><br>客户端:<br><span class="hljs-number">1</span>、登录客户端<br>　　./redis-cli -h <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> -<span class="hljs-keyword">p</span> <span class="hljs-number">6379</span><br>　　注: 客户端登录之后输入ping,如果能显示pong则代表后台启动成功.<br><br><span class="hljs-number">2</span>、退出客户端<br>　　方式一:  ctrl + <span class="hljs-keyword">c</span><br>　　方式二:  <span class="hljs-keyword">quit</span><br>　　方式三:  <span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><h2 id="docker-commit命令"><a href="#docker-commit命令" class="headerlink" title="docker commit命令"></a>docker commit命令</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">docker commit -a<span class="hljs-operator">=</span><span class="hljs-string">&quot;作者&quot;</span> -m<span class="hljs-operator">=</span><span class="hljs-string">&quot;名称/备注&quot;</span> 原容器ID 包/新镜像<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>Mac</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker学习笔记</title>
    <link href="/2022/09/03/Docker%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2022/09/03/Docker%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h2><p>​    <a href="https://hub.docker.com/editions/community/docker-ce-desktop-mac">https://hub.docker.com/editions/community/docker-ce-desktop-mac</a></p><h2 id="2、验证"><a href="#2、验证" class="headerlink" title="2、验证"></a>2、验证</h2><h3 id="1-验证Docker是否安装，及其版本"><a href="#1-验证Docker是否安装，及其版本" class="headerlink" title="(1)验证Docker是否安装，及其版本"></a>(1)验证Docker是否安装，及其版本</h3><figure class="highlight applescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs applescript">$ docker <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><h3 id="2-启动一个-Nginx-容器，检查能正确获取镜像并运行"><a href="#2-启动一个-Nginx-容器，检查能正确获取镜像并运行" class="headerlink" title="(2)启动一个 Nginx 容器，检查能正确获取镜像并运行"></a>(2)启动一个 Nginx 容器，检查能正确获取镜像并运行</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">$ docker <span class="hljs-built_in">run</span> -d -p <span class="hljs-number">80</span>:<span class="hljs-number">80</span> <span class="hljs-comment">--name webserver nginx</span><br></code></pre></td></tr></table></figure><h3 id="3-使用-docker-ps-指令查看运行的容器"><a href="#3-使用-docker-ps-指令查看运行的容器" class="headerlink" title="(3)使用 docker ps 指令查看运行的容器"></a>(3)使用 docker ps 指令查看运行的容器</h3><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xl">$ docker ps<br><br>CONTAINER ID   IMAGE     COMMAND                  CREATED       STATUS          PORTS                               NAMES<br><span class="hljs-function"><span class="hljs-title">c191261bc878</span>   nginx     &quot;/docker-entrypoint.…&quot;   3 hours ago   Up 10 seconds   0.0.0.0:80-&gt;</span><span class="hljs-number">80</span>/<span class="hljs-function"><span class="hljs-title">tcp</span>, :::80-&gt;</span><span class="hljs-number">80</span>/tcp   webserver<br></code></pre></td></tr></table></figure><h5 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker run <span class="hljs-literal">-it</span> NAME[:<span class="hljs-type">TAG</span>] 启动容器<br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-a</span> 查看所有的容器命令<br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">start</span> &lt;容器 ID&gt;启动容器<br><span class="hljs-variable">$</span> docker stop &lt;容器 ID&gt;停止容器<br><span class="hljs-variable">$</span> docker restart &lt;容器 ID&gt;   重启容器<br></code></pre></td></tr></table></figure><h3 id="4-Nginx-容器已经在-0-0-0-0-80-启动，并映射到-80-端口，打开浏览器访问此地址"><a href="#4-Nginx-容器已经在-0-0-0-0-80-启动，并映射到-80-端口，打开浏览器访问此地址" class="headerlink" title="(4) Nginx 容器已经在 0.0.0.0:80 启动，并映射到 80 端口，打开浏览器访问此地址"></a>(4) Nginx 容器已经在 0.0.0.0:80 启动，并映射到 80 端口，打开浏览器访问此地址</h3><h2 id="3、下载-Kitematic-Mac-zip并解压"><a href="#3、下载-Kitematic-Mac-zip并解压" class="headerlink" title="3、下载 Kitematic-Mac.zip并解压"></a>3、下载 Kitematic-Mac.zip并解压</h2><p>​    Gitee地址：<a href="https://github.com/docker/kitematic/releases">https://github.com/docker/kitematic/releases</a></p><p>​    百度网盘地址：链接: <a href="https://pan.baidu.com/s/1l99Qg2TPLKPUgeXdmNtuxA">https://pan.baidu.com/s/1l99Qg2TPLKPUgeXdmNtuxA</a>  密码: nsqg</p><h2 id="4、使用-Kitematic"><a href="#4、使用-Kitematic" class="headerlink" title="4、使用 Kitematic"></a>4、使用 Kitematic</h2><p>​    (1)进入 Docker Hub 登录页面，用户可以选择暂时不登录 ，点击右下角Skip For Now直接进入主页面</p><p>​    (2)主页面可见多种常用镜像，点击 CREATE 即可直接创建容器</p><p>​    (3)以hello-world-nginx 镜像为例，点击 CREA 后进入下载页面</p><p>​    (4)容器运行后，在主页可见运行日志 挂载磁盘（双击可以直接打开）、浏览器预览 以及容器配置（ settings ）等</p><p>​    (5)进入配置页面，可见 hostname/port ，以及卷、网络等配置</p><p>​    (6)可以在hostname/port更改端口号(以端口号55000为例)</p><p>​    (7)用户此时可以打开浏览器访问 <a href="http://localhost:55000/">http://localhost:55000</a></p><h2 id="5、使用Docker镜像"><a href="#5、使用Docker镜像" class="headerlink" title="5、使用Docker镜像"></a>5、使用Docker镜像</h2><h3 id="1-获取镜像"><a href="#1-获取镜像" class="headerlink" title="(1)获取镜像"></a>(1)获取镜像</h3><p>​    命令格式： docker [image] pull NAME [ :TAG] ， NAME 是镜像仓库名称（用来区分镜像）， TAG 是镜像的标签（往往用来表示版本信息）通常情况下， 描述一个镜像需要包括 “名称＋标签“ 信息</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crystal">例如， 获取一个 Ubuntu 系统的基础镜像可以使用如下的命令：<br><span class="hljs-variable">$ </span>docker pull <span class="hljs-symbol">ubuntu:</span><span class="hljs-number">18.04</span><br>注：如果不显式指定TAG, 则默认会选择la迳釭标签，这会下载仓库中最新版本的镜像<br>例：下载一个最新版本的Ubuntu操作系统的镜像，该命令实际上下载的就是 <span class="hljs-symbol">ubuntu:</span>latest镜像<br><span class="hljs-variable">$ </span>docker pull ubuntu<br></code></pre></td></tr></table></figure><p>​        注意：一般来说， 镜像的latest 标签意味着该镜像的内容会跟踪最新版本的变更而变化， 内容是不稳定的。因此，从稳定性上考虑，不要在生产环境中忽略镜像的标签信息或使用默认的latest 标记的镜像。</p><p>镜像仓库：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">网易镜像中心：http:<span class="hljs-regexp">//</span>hub-mirror.c.<span class="hljs-number">163</span>.com<br>阿里镜像中心：https:<span class="hljs-regexp">//</span>dev.aliyun.com<br>Docker 官方中国区：https:<span class="hljs-regexp">//</span>registry.docker-cn.com<br>ustc： https:<span class="hljs-regexp">//</span>docker.mirrors.ustc.edu.cn<br>daocloud：https:<span class="hljs-regexp">//</span>hub.daocloud.io/<br></code></pre></td></tr></table></figure><h3 id="2-查看镜像信息"><a href="#2-查看镜像信息" class="headerlink" title="(2)查看镜像信息"></a>(2)查看镜像信息</h3><h4 id="1-使用images命令列出镜像"><a href="#1-使用images命令列出镜像" class="headerlink" title="1. 使用images命令列出镜像"></a>1. 使用images命令列出镜像</h4><p>列出本地主机上已有镜像的基本信息</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker images<br><span class="hljs-variable">$</span> docker images <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><h4 id="2-使用tag命令添加镜像标签"><a href="#2-使用tag命令添加镜像标签" class="headerlink" title="2. 使用tag命令添加镜像标签"></a>2. 使用tag命令添加镜像标签</h4><p>​    为了方便在后续工作中使用特定镜像，还可以使用 docker tag 命令来为本地镜像任意添加新的标签</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">格式：docker <span class="hljs-keyword">tag</span> <span class="hljs-title">NAME</span>[:<span class="hljs-keyword">TAG</span>] 别名[:<span class="hljs-keyword">TAG</span>]<br>例如，添加 一个新的myubuntu:latest镜像标签：<br>$ docker <span class="hljs-keyword">tag</span> <span class="hljs-title">ubuntu</span>:latest myubuntu:latest<br></code></pre></td></tr></table></figure><p>​    注：docker tag命令添加的标签实际上起到了类似链接的作用</p><h4 id="3-使用inspect命令查看详细信息"><a href="#3-使用inspect命令查看详细信息" class="headerlink" title="3.使用inspect命令查看详细信息"></a>3.使用inspect命令查看详细信息</h4><p>​    使用 docker [image] inspect 命令可以获取该镜像的详细信息，包括制作者 、适应架构、各层的数字摘要等</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs prolog">格式：docker [image] inspect <span class="hljs-symbol">NAME</span>[:<span class="hljs-symbol">TAG</span>]<br>$ docker [image] inspect ubuntu:latest<br>返回的是一个 <span class="hljs-symbol">JSON</span> 格式的消息,如果我们只要其中一项内容时， 可以使用 -f 来指定<br>格式：docker [image] inspect -f &#123;&#123;<span class="hljs-string">&quot;.内容名&quot;</span>&#125;&#125; <span class="hljs-symbol">NAME</span>[:<span class="hljs-symbol">TAG</span>]<br>例：例如， 获取镜像的 <span class="hljs-symbol">Arch</span>让ecture:<br>$ docker [image] inspect -f &#123;&#123;<span class="hljs-string">&quot;.Architecture&quot;</span>&#125;&#125; ubuntu:latest <br></code></pre></td></tr></table></figure><h4 id="4-使用-history-命令查看镜像历史"><a href="#4-使用-history-命令查看镜像历史" class="headerlink" title="4. 使用 history 命令查看镜像历史"></a>4. 使用 history 命令查看镜像历史</h4><p>​    使用 history 子命令， 该命令将列出各层的创建信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">格式：docker <span class="hljs-built_in">history</span> NAME[:TAG]<br></code></pre></td></tr></table></figure><h3 id="3-搜寻镜像"><a href="#3-搜寻镜像" class="headerlink" title="(3)搜寻镜像"></a>(3)搜寻镜像</h3><p>​    使用 docker search 命令可以搜索Docker Hub 官方仓库中的镜像，语法为 docker search [option] keyword。 支持的</p><p>命令选项主要包括：</p><p>​             –f, –filter filter: 过滤输出内容；</p><p>​             –format string: 格式化输出内容；</p><p>​             –limit int：限制输出结果个数， 默认为 25 个；</p><p>​             –no-trunc: 不截断输出结果。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">例如， 搜索官方提供的带 nginx关键字的镜像， 如下所示：<br>$ docker <span class="hljs-built_in">search</span> --<span class="hljs-built_in">filter</span>=<span class="hljs-keyword">is</span>-official=true nginx<br>再比如， 搜索所有收藏数超过 <span class="hljs-number">4</span> 的关键词包括 tensorflow 的镜像：<br>$ docker <span class="hljs-built_in">search</span> --<span class="hljs-built_in">filter</span>=stars=<span class="hljs-number">4</span> tensorflow<br></code></pre></td></tr></table></figure><h3 id="4-删除和清理镜像"><a href="#4-删除和清理镜像" class="headerlink" title="(4)删除和清理镜像"></a>(4)删除和清理镜像</h3><h4 id="1-使用标签删除镜像"><a href="#1-使用标签删除镜像" class="headerlink" title="1 使用标签删除镜像"></a>1 使用标签删除镜像</h4><p>​    使用 docker rmi 或 docker image rm 命令可以删除镜像, 命令格式为 docker rmi IMAGE [IMAGE … ], 其中 IMAGE可以为标签或 ID</p><p>​    支持选项包括：</p><p>​             -f, -force: 强制删除镜像， 即使有容器依赖它；</p><p>​             -no-prune: 不要清理未带标签的父镜像</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crystal">例如， 要删除掉 <span class="hljs-symbol">myubuntu:</span>latest镜像， 可以使用如下命令：<br><span class="hljs-variable">$ </span>docker rmi <span class="hljs-symbol">myubuntu:</span>latest<br>注：当同一个镜像拥有多个标签的时候，docker rmi 命令只是删除了该镜像多个标签中的指定标签而巳，并不影响镜像文件，但当镜像只剩下一个标签的时候就要小心了， 此时再使用 docker rmi 命令会彻底删除镜像<br></code></pre></td></tr></table></figure><h4 id="2-使用镜像ID来删除镜像"><a href="#2-使用镜像ID来删除镜像" class="headerlink" title="2. 使用镜像ID来删除镜像"></a>2. 使用镜像ID来删除镜像</h4><p>​    当使用 docker rmi 命令， 并且后面跟上镜像的 ID (也可以是能进行区分的部分 ID 串前缀）时， 会先尝试删除所有指向该镜像的标签，然后删除该镜像文件本身。</p><p>​    注意：当有该镜像创建的容器存在时， 镜像文件默认是无法被删除的</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell">例如： 先利用ubuntu:latest镜像创建一个简单的容器来输出一段话：<br><span class="hljs-variable">$</span> docker run ubuntu:latest <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;hello! I am here!&#x27;</span><br>使用docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-a</span>命令可以看到本机上存在的所有容器：<br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-a</span><br>首先删除容器<br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">rm</span> <span class="hljs-number">740</span>b79cb85bf(容器ID)<br>然后使用ID来删除镜像<br><span class="hljs-variable">$</span> docker rmi <span class="hljs-number">3</span>dd93a811c95(镜像ID)<br>强行删除镜像,可以使用<span class="hljs-operator">-f</span>参数：<br><span class="hljs-variable">$</span> docker rmi <span class="hljs-operator">-f</span> NAME[:<span class="hljs-type">TAG</span>]<br></code></pre></td></tr></table></figure><p>​    注意：通常并不推荐使用 -f 参数来强制删除一个存在容器依赖的镜像。正确的做法是，先删除依赖该镜像的所有容器，再来删除镜像。</p><h4 id="3-清理镜像"><a href="#3-清理镜像" class="headerlink" title="3. 清理镜像"></a>3. 清理镜像</h4><p>​    使用Docker一段时间后，系统中可能会遗留一些临时的镜像文件，以及一些没有被使用的镜像，可以通过docker image prune命令来进行清理。</p><p>​    支待选项包括：</p><p>​         -a, -all: 删除所有无用镜像， 不光是临时镜像；</p><p>​         -filter filter: 只清理符合给定过滤器的镜像；</p><p>​         -f, -force: 强制删除镜像， 而不进行提示确认。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">例如， 如下命令会自动清理临时的遗留镜像文件层， 最后会提示释放的存储空间：<br><span class="hljs-variable">$</span> docker image prune <span class="hljs-operator">-f</span><br></code></pre></td></tr></table></figure><h3 id="5-创建镜像"><a href="#5-创建镜像" class="headerlink" title="(5)创建镜像"></a>(5)创建镜像</h3><p>​    创建镜像的方法主要有三种： 基于已有镜像的容器创建、 基千本地模板导入、 基于Dockerfile 创建。</p><h4 id="1-基于已有容器创建"><a href="#1-基于已有容器创建" class="headerlink" title="1.基于已有容器创建"></a>1.基于已有容器创建</h4><p>​    该方法主要是使用 docker [container] commit命令。命令格式为 docker [container] commit [OPTIONS] CONTAINER [REPOSITORY </p><p>[:TAG]], 主要选项包括：</p><p>​            -a, –author=””: 作者信息；</p><p>​            -c, - -change=[] : 提交的时候执行Dockerfile指令， 包括 CMD | ENTRYPOINT | ENV | EXPOSE | LABEL | ONBUILD | USER | VOLUME | WORKDIR等；</p><p>​            -m, - -message= “”: 提交消息；</p><p>​            -p, –pause=true: 提交时暂停容器运行。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs elixir">下面将演示如何使用该命令创建一个新镜像。<br><span class="hljs-number">1</span>、首先， 启动一个镜像， 并在其中进行修改操作。 例如，创建一个test文件，之后退出，代码如下：<br><span class="hljs-variable">$ </span>docker run -it <span class="hljs-symbol">ubuntu:</span>latest<br>root<span class="hljs-variable">@69a07111b6e2</span><span class="hljs-symbol">:/</span><span class="hljs-comment"># touch test </span><br>root<span class="hljs-variable">@69a07111b6e2</span><span class="hljs-symbol">:/</span><span class="hljs-comment"># exit</span><br><span class="hljs-number">2</span>、使用 docke [container] commit命令来提交为一个新的镜像。提交时可以使用 ID 或名称来指定容器：<br><span class="hljs-variable">$ </span>docker commit -m <span class="hljs-string">&quot;Added a new file&quot;</span> -a <span class="hljs-string">&quot;Docker Newbee&quot;</span> <span class="hljs-number">69</span>a07111b6e2 <span class="hljs-symbol">test:</span><span class="hljs-number">0.1</span><br>顺利的话， 会返回新创建镜像的 ID 信息， 例如<span class="hljs-symbol">sha256:</span>d204e29f522389df58f6098a9c74786960622d65903fc7bb7658dd41c63298f1<br><span class="hljs-number">3</span>、查看本地镜像列表， 会发现新创建的镜像已经存在了：<br><span class="hljs-variable">$ </span>docker images<br>REPOSITORY                    TAG       IMAGE ID       CREATED          SIZE<br>test                          <span class="hljs-number">0.1</span>       d204e29f5223   <span class="hljs-number">56</span> seconds ago   <span class="hljs-number">72.7</span>MB<br>nginx                         latest    f0b8a9a54136   <span class="hljs-number">28</span> hours ago     <span class="hljs-number">133</span>MB<br>ubuntu                        latest    <span class="hljs-number">7</span>e0aa2d69a15   <span class="hljs-number">2</span> weeks ago      <span class="hljs-number">72.7</span>MB<br>kitematic/hello-world-nginx   latest    <span class="hljs-number">03</span>b4557ad7b9   <span class="hljs-number">5</span> years ago      <span class="hljs-number">7.91</span>MB<br></code></pre></td></tr></table></figure><h4 id="2-基于本地模板导入"><a href="#2-基于本地模板导入" class="headerlink" title="2.基于本地模板导入"></a>2.基于本地模板导入</h4><p>​    直接从 个操作系统模板文件导人一个镜像，主要使用 docker [container]  import 命令 ，命令格式为 docker [image]  import    [OPTIONS]  file|URL|-[REPOSITORY[:TAG] ] </p><p>​    要直接导人一个镜像，可以使用 OpenVZ 提供的模板来创建，或者用其他已导出的镜像模板来创建 OPENVZ 模板的下载地址为<a href>http: //openvz.org/Download/templates/precreated</a></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">例如，下载了 ubuntu-<span class="hljs-number">18.04</span> 的模板压缩包，之后使用以下命令导人即可：<br>$ cat ubuntu-<span class="hljs-number">18.04</span>-x86_64-minimal.tar.gz | docker import - ubuntu:<span class="hljs-number">18.04</span> <br>然后查看新导人的镜像，已经在本地存在了<br>$ docker images <br>REPOSITORY <span class="hljs-keyword">TAG</span> <span class="hljs-title">IMAGE</span> ID CREATED VIRTUAL SIZE <br>ubuntu <span class="hljs-number">18.04</span> <span class="hljs-number">05</span>ac7c0b9383 <span class="hljs-number">17</span> seconds ago <span class="hljs-number">215.5</span> MB<br></code></pre></td></tr></table></figure><h4 id="3-基于-Dockefile创建"><a href="#3-基于-Dockefile创建" class="headerlink" title="3.基于 Dockefile创建"></a>3.基于 Dockefile创建</h4><p>​    基于 ocke file 创建是最常见的方式 Dockerfile是一 个文本文件，利用给定的指令描述基于某个父镜像创建新镜像的过程</p><h3 id="6-存出和载人镜像"><a href="#6-存出和载人镜像" class="headerlink" title="(6)存出和载人镜像"></a>(6)存出和载人镜像</h3><h4 id="1-存出镜像"><a href="#1-存出镜像" class="headerlink" title="1.存出镜像"></a>1.存出镜像</h4><p>​    如果要导出镜像到本地文件，可以使用 docker [image] save 命令。该命令支持-o、-output string 参数导出镜像到指定的文件中</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit">例如，导出本地的 ubuntu:l8.04 镜像为文件 ubuntu 18.04.tar 如下所示：<br>1、$ docker images <br>REPOSITORY                    TAG       IMAGE ID       CREATED          SIZE<br><span class="hljs-keyword">test                          </span>0.1       d204e29f5223   56 seconds ago   72.7MB<br>2、$ docker save -o test_0.1.tar test:0.1<br>之后，用户就可以通过复制 ubuntu 18.04.tar 文件将该镜像分享给他人<br></code></pre></td></tr></table></figure><h4 id="2-载入镜像"><a href="#2-载入镜像" class="headerlink" title="2.载入镜像"></a>2.载入镜像</h4><p>​    可以使用 docker [image] load 将导出的tar文件再导人到本地镜像库。支持 -i、-input string 选项，从指定文件中读人镜像内容</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">例如，从文件 test_0.<span class="hljs-number">1</span><span class="hljs-selector-class">.tar</span> 导人镜像到本地镜像列表，如下所示：<br>$ docker load -<span class="hljs-selector-tag">i</span> test_0.<span class="hljs-number">1</span><span class="hljs-selector-class">.tar</span><br>或者<br>$ docker load &lt; test_0.<span class="hljs-number">1</span>.tar<br></code></pre></td></tr></table></figure><h3 id="7-上传镜像"><a href="#7-上传镜像" class="headerlink" title="(7)上传镜像"></a>(7)上传镜像</h3><p>​    可以使用 docker [image] push 命令上传镜像到仓库，默认上传到 Docker Hub 官方仓库（需要登录） 命令格式为 docker [image] </p><p>push NAME[:TAG] | [REGISTRY_HOST [ :REGISTRY_PORT] / ]NAME [:TAG]</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">例如，用户 user 上传本地的 <span class="hljs-keyword">test</span> :latest 镜像，可以先添加新的标签 user/<span class="hljs-keyword">test</span>:latest 然后 docker [image] <span class="hljs-keyword">push</span> 令上传镜像<br>$ docker tag <span class="hljs-keyword">test</span>:latest user/<span class="hljs-keyword">test</span> : latest <br><br>docker <span class="hljs-keyword">push</span> user/<span class="hljs-keyword">test</span>:latest <br>The <span class="hljs-keyword">push</span> refers to a repository [docker<span class="hljs-number">.</span>io/user/<span class="hljs-keyword">test</span>] <br>Sending image list <br>Please login prior to <span class="hljs-keyword">push</span>: <br><span class="hljs-symbol">Username:</span> <br><span class="hljs-symbol">Password:</span> <br><span class="hljs-symbol">Email:</span><br></code></pre></td></tr></table></figure><p>​    注意：第一次上传时，会提示输入登录信息或进行注册，之后登录信息会记录到本地～/.docker目录下</p><h2 id="6、操作-Docker-容器"><a href="#6、操作-Docker-容器" class="headerlink" title="6、操作 Docker 容器"></a>6、操作 Docker 容器</h2><h3 id="1-创建容器"><a href="#1-创建容器" class="headerlink" title="(1)创建容器"></a>(1)创建容器</h3><h4 id="1-新建容器"><a href="#1-新建容器" class="headerlink" title="1. 新建容器"></a>1. 新建容器</h4><p>​        使用docker [container]  create [–name 别名]  NAME[:TAG]   命令新建一个容器，例如：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">$ docker <span class="hljs-built_in">create</span> -<span class="hljs-keyword">it</span> <span class="hljs-comment">--name myubuntu ubuntu:latest</span><br>$ docker ps -<span class="hljs-keyword">a</span><br><br><span class="hljs-comment">--name: 指定容器名称</span><br>-p:指定容器端口号<br>-d:指定容器后台运行<br></code></pre></td></tr></table></figure><p>注意：使用 docker [container] create 命令新建的容器处于停止状态，可以使用 docker [container] start 命令来启动它</p><h4 id="2-启动容器"><a href="#2-启动容器" class="headerlink" title="2.启动容器"></a>2.启动容器</h4><p>​    使用 docker [container] start 命令来启动一个已经创建的容器</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">例如，启动创建的 ubuntu 容器<br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">start</span> 容器ID｜NAMES<br>通过 docker <span class="hljs-built_in">ps</span> 命令，可以查看到运行中的容器<br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">ps</span><br></code></pre></td></tr></table></figure><h4 id="3-新建井启动容器"><a href="#3-新建井启动容器" class="headerlink" title="3.新建井启动容器"></a>3.新建井启动容器</h4><p>​    除了创建容器后通 start 令来启动 也可直接新建并启动容器，所需要的命令主要为 docker [container ］run [-d -p 端口号 –name 别名]  NAME[:TAG] ，等价于先执行 docker [container] create 命令，再执行 docker [container] start 命令</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs stata">命令格式：docker [container］<span class="hljs-keyword">run</span> [-<span class="hljs-keyword">d</span> -p 端口号 --name 别名] NAME[:TAG] <br>例如，下面的命令输出一个“ Hello World&quot;,之后容器自动终止：<br>$ docker <span class="hljs-keyword">run</span> ubuntu /bin/echo ’Hello world&#x27; <br>Hello world<br><br>下面的命令启动一个 bash 终端，允许用户进行交互：<br>$ docker <span class="hljs-keyword">run</span> -it ubuntu:latest /bin/bash <br>root@afBbae53bdd3 /#<br>在交互模式下，用户可以通过所创建的终端来输人命令，例如：<br>root@13b5ba31fdde:/# <span class="hljs-keyword">pwd</span><br>/<br>root@13b5ba31fdde:/# <span class="hljs-keyword">ls</span><br>bin  <span class="hljs-keyword">boot</span>  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  <span class="hljs-keyword">run</span>  sbin  srv  sys  tmp  usr  <span class="hljs-keyword">var</span><br>root@13b5ba31fdde:/# ps<br>  PID TTY          TIME CMD<br>    1 pts/0    00:00:00 bash<br>   12 pts/0    00:00:00 ps<br>在容器内用 ps 命令查看进程，可以看到，只运行了 bash 应用，并没有运行其他无关的进程<br>用户可以按 Ctrl+<span class="hljs-keyword">d</span> 或输入 <span class="hljs-keyword">exit</span> 命令来退出容器：<br>root@13b5ba31fdde:/# <span class="hljs-keyword">exit</span><br><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p>注：对于所创建的 bash 容器，当用户使用 exit 命令退出 bash 进程之后，容器也会自动退出。这是因为对于容器来说，当其中的应用退出后，容器的使命完成，也就没有继续运行的必要了。可以使用 docker container wait CONTAINER [CONTAINER . .. ］子命令来等待容器退出，并打印退出返回结果</p><h4 id="4-守护态运行"><a href="#4-守护态运行" class="headerlink" title="4.守护态运行"></a>4.守护态运行</h4><p>​    更多的时候，需要让 Docker 容器在后台以守护态（ Daemonized ）形式运行,此时，可以通过添加 -d 参数来实现</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">例如，下面的命令会在后台运行容器:<br>$ docker <span class="hljs-built_in">run</span> -d ubuntu:latest<br></code></pre></td></tr></table></figure><h4 id="5-查看容器输出"><a href="#5-查看容器输出" class="headerlink" title="5.查看容器输出"></a>5.查看容器输出</h4><p>​    要获取容器的输出信息，可以通过 docker [container] logs命令</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crystal">例如，查看某容器的输出可以使用如下命令<br><span class="hljs-variable">$ </span>docker logs 容器ID <br></code></pre></td></tr></table></figure><h3 id="2-停止容器"><a href="#2-停止容器" class="headerlink" title="(2)停止容器"></a>(2)停止容器</h3><h4 id="1-暂停容器"><a href="#1-暂停容器" class="headerlink" title="1. 暂停容器"></a>1. 暂停容器</h4><p>​    可以使用 docker [container] pause CONTAINER [CONTAINER … ］命令来暂停一个运行中的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">格式：docker pause 容器名｜容器ID<br>例如，启动一个容器，并将其暂停：<br><span class="hljs-meta">$ </span><span class="language-bash">docker run --name <span class="hljs-built_in">test</span> --<span class="hljs-built_in">rm</span> -it ubuntu bash</span> <br><span class="hljs-meta">$ </span><span class="language-bash">docker pause <span class="hljs-built_in">test</span></span> <br><span class="hljs-meta">$ </span><span class="language-bash">docker ps</span><br></code></pre></td></tr></table></figure><p>注意：处于 paused 状态的容器，可以使用 docker [contaier] unpause CONTAINER [CONTAINER …] 命令来恢复到运行状态</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell">格式：docker unpause 容器名｜容器ID<br><span class="hljs-variable">$</span> docker unpause fervent_black<br>fervent_black<br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">ps</span><br>CONTAINER ID   IMAGE           COMMAND       CREATED          STATUS                   PORTS     NAMES<br>cee3155beed9   ubuntu:latest   <span class="hljs-string">&quot;/bin/bash&quot;</span>   <span class="hljs-number">37</span> minutes ago   Up <span class="hljs-number">30</span> minutes (Paused)             suspicious_bhabha<br><span class="hljs-number">69</span>a07111b6e2   ubuntu:latest   <span class="hljs-string">&quot;/bin/bash&quot;</span>   <span class="hljs-number">2</span> hours ago      Up <span class="hljs-number">26</span> minutes                      fervent_black<br></code></pre></td></tr></table></figure><h4 id="2-终止容器"><a href="#2-终止容器" class="headerlink" title="2.终止容器"></a>2.终止容器</h4><p>​    可以使用 docker [container] stop 来终止一个运行中的容器 该命令的格式为 docker stop  容器名｜容器ID</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs axapta">格式：docker stop 容器名｜容器ID<br>执行 docker <span class="hljs-built_in">container</span> prune 命令，会自动清除掉所有处于停止状态的容器<br>还可以通过 docker [<span class="hljs-built_in">container</span>] kill 直接发送 SIGKILL 信号来强行终止容器<br>处于终止状态的容器，可以通过 docker [<span class="hljs-built_in">container</span>] start 命令来重新启动<br>通过 docker [<span class="hljs-built_in">container</span>] restart 命令会将一个运行态的容器先终止，然后再重新启动<br></code></pre></td></tr></table></figure><h3 id="3-进人容器"><a href="#3-进人容器" class="headerlink" title="(3)进人容器"></a>(3)进人容器</h3><p>​    在使用 -d 参数时，容器启动后会进入后台，用户无法看到容器中的信息，也无法进行操作,这个时候如果需要进入容器进行操作，推荐使用官方的 attach 或 exec 命令</p><h4 id="1-attach命令"><a href="#1-attach命令" class="headerlink" title="1.attach命令"></a>1.attach命令</h4><p>​    命令格式为：docker  [container]  attach  [–detach-keys[=[]]]  [–no-stdin]  [–sig-proxy[=true]]  CONTAINER </p><p>​    这个命令支持 个主要选项：</p><p>​        –detach-keys[=[]]：指定退出 attach 模式的快捷键序列， 默认是 CTRL-p、CTRL-q; </p><p>​        –no-stdin=true｜false ：是否关闭标准输入，默认是保持打开；</p><p>​        –sig-proxy=true｜false ：是否代理收到的系统信号给应用进程，默认为 true</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">下面示例如何使用该命令：<br>$ docker run -itd ubuntu<br><span class="hljs-number">3</span>bb7dc9da5b64aac1bf33b2ad7f25195d3cbad40430fa559f89724c7add8b42b<br>$ docker ps<br>CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS          PORTS     NAMES<br><span class="hljs-number">3</span>bb7dc9da5b6   ubuntu    <span class="hljs-string">&quot;/bin/bash&quot;</span>   <span class="hljs-number">32</span> seconds ago   Up <span class="hljs-number">31</span> seconds             nervous_merkle<br>$ docker attach nervous_merkle|<span class="hljs-number">3</span>bb7dc9da5b6<br>root@<span class="hljs-number">3</span>bb7dc9da5b6:/<span class="hljs-comment"># exit</span><br><span class="hljs-keyword">exit</span><br></code></pre></td></tr></table></figure><p>​    注意：使用 attach 命令有时候并不方便 当多个窗口同时 attach 到同一个容器的时候，所有窗口都会同步显示；当某个窗口因命令阻塞时，其他窗口也无法执行操作了</p><h4 id="2-exec-命令"><a href="#2-exec-命令" class="headerlink" title="2.exec 命令"></a>2.exec 命令</h4><p>​    可以在运行中容器内直接执行任意命令该命令的基本格式为：docker  [container]  exec  [-d｜-detach]  [detach-keys[=[]]]  [-i｜–interactive]  [–privileged]  [-t|–tty]  [-u|–user[=USER]]  CONTAINER  COMMAND [ARG… ] </p><p>比较重要的参数有：</p><p>​        -d, –detach 在容器中后台执行命令；</p><p>​        –detach-keys ＝＂＂：指定将容器切回后台的按键；</p><p>​        -e, –env= []：指定环境变量列表</p><p>​        -i, –interactive=true|false ：打开标准输入接受用户输入命令， 默认值为false; </p><p>​        –privileged=trueifalse 是否给执行命令以高权限，默认值为 false;</p><p>​        -t, –tty=true|false 分配伪终端，默认值为 false;</p><p>​        -u, –user ＝＂＂：执行命令的用户名或 ID</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs tap">例如，进入到刚创建的容器中，并启动一个 bash:<br>$ docker exec -it 0e160368aa93 /bin/bash <br>root@0e160368aa93 :/<span class="hljs-comment">#</span><br>可以看到会打开一个新的 bash 终端，在不影响容器内其他应用的前提下，用户可以与容器进行交互<br>进一步地，可以在容器中查看容器中的用户和进程信息：<br>root@0e160368aa93:/<span class="hljs-comment"># w</span><br> 01:38:55 up  9:32, <span class="hljs-number"> 0 </span>users,  load average: 0.12, 0.06, 0.01<br>USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT<br>root@0e160368aa93:/<span class="hljs-comment"># ps -ef</span><br>UID        PID  PPID  C STIME TTY          TIME CMD<br>root        <span class="hljs-number"> 1 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 0 </span>01:36 pts/0    00:00:00 /bin/bash<br>root        <span class="hljs-number"> 9 </span>   <span class="hljs-number"> 0 </span><span class="hljs-number"> 0 </span>01:36 pts/1    00:00:00 /bin/bash<br>root       <span class="hljs-number"> 20 </span>   <span class="hljs-number"> 9 </span><span class="hljs-number"> 0 </span>01:39 pts/1    00:00:00 ps -ef<br></code></pre></td></tr></table></figure><h3 id="4-删除容器"><a href="#4-删除容器" class="headerlink" title="(4)删除容器"></a>(4)删除容器</h3><p>​    可以使用 docker  [container]  rm 命令来删除处于终止或退出状态的容器，命令格式为docker  [container)]  rm [-f|-force]  [-l|- link]  [-v|- volumes]  CONTAINER   [CONTAINER … ]</p><p>主要支持的选项包括:</p><p>​        -f, –force=false 是否强行终止并删除一个运行中的容器</p><p>​        -l, –link=false ：删除容器的连接 ，但保留容器；</p><p>​        -v, –volumes=false ：删除容器挂载的数据卷</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs powershell">例如，查看处于终止状态的容器，并删除:<br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-a</span><br>CONTAINER ID   IMAGE           COMMAND       CREATED          STATUS                        PORTS     NAMES<br><span class="hljs-number">0</span>e160368aa93   ubuntu          <span class="hljs-string">&quot;/bin/bash&quot;</span>   <span class="hljs-number">8</span> minutes ago    Up <span class="hljs-number">8</span> minutes                            jolly_volhard<br><span class="hljs-number">3</span>bb7dc9da5b6   ubuntu          <span class="hljs-string">&quot;/bin/bash&quot;</span>   <span class="hljs-number">24</span> minutes ago   Exited (<span class="hljs-number">127</span>) <span class="hljs-number">18</span> minutes ago             nervous_merkle<br>bcbd19155264   ubuntu:latest   <span class="hljs-string">&quot;/bin/bash&quot;</span>   <span class="hljs-number">11</span> hours ago     Exited (<span class="hljs-number">127</span>) <span class="hljs-number">11</span> hours ago               bold_rosalind<br><br>默认情况下， docker <span class="hljs-built_in">rm</span> 命令只能删除已经处于终止或退出状态的容器，并不能删除还处于运行状态的容器<br>如果要直接删除 个运行中的容器，可以添加 <span class="hljs-operator">-f</span> 参数 Docker 会先发送 SIGKILL号给容器，终止其中的应用，之后强行删除:<br><span class="hljs-variable">$</span> docker run <span class="hljs-literal">-d</span> ubuntu:latest /bin/sh <span class="hljs-literal">-c</span> <span class="hljs-string">&quot;while true; do echo hello world;sleep 1;done&quot;</span><br>eb0ab7f929b0c37686f26925dbf4957b98d39646c67115d49cecc4707701c71c<br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">rm</span> eb0ab7f929b0c37686f26925dbf4957b98d39646c67115d49cecc4707701c71c<br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">rm</span> <span class="hljs-operator">-f</span> eb0ab7f929b0c37686f26925dbf4957b98d39646c67115d49cecc4707701c71c<br>eb0ab7f929b0c37686f26925dbf4957b98d39646c67115d49cecc4707701c71c<br></code></pre></td></tr></table></figure><h3 id="5-导人和导出容器"><a href="#5-导人和导出容器" class="headerlink" title="(5)导人和导出容器"></a>(5)导人和导出容器</h3><h4 id="1-导出容器"><a href="#1-导出容器" class="headerlink" title="1.导出容器"></a>1.导出容器</h4><p>​    导出容器是指，导出一个已经创建的容器到一个文件，不管此时这个容器是否处于运行状态 可以使用 docker [container] export 令，该命令格式为：docker [container]  export [-o|–output [=“”]]  CONTAINER </p><p>其中，可以通过－ 选项来指定导出的 tar 文件名，也可以直接通过重定向来实现</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell">新建一个容器：<br><span class="hljs-variable">$</span> docker run ubuntu:latest <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Hello World!&#x27;</span><br>查看所有的容器：<br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-a</span><br>CONTAINER ID   IMAGE           COMMAND                  CREATED          STATUS                      PORTS     NAMES<br><span class="hljs-number">98635</span>f3ac6fb   ubuntu:latest   <span class="hljs-string">&quot;echo &#x27;hello! I am h…&quot;</span>   <span class="hljs-number">30</span> seconds ago   Exited (<span class="hljs-number">0</span>) <span class="hljs-number">29</span> seconds ago             happy_elion<br>导出<span class="hljs-number">98635</span>f3ac6fb容器到文件test_for_run.tar文件：<br><span class="hljs-variable">$</span> docker export <span class="hljs-literal">-o</span> test_for_run.tar <span class="hljs-number">98635</span>f3ac6fb <br><span class="hljs-variable">$</span> <span class="hljs-built_in">ls</span> <br>test_for_run.tar<br>之后，可将导出的 tar 文件传输到其他机器上，然后再通过导人命令导入到系统中，实现容器的迁移<br></code></pre></td></tr></table></figure><h4 id="2-导入容器"><a href="#2-导入容器" class="headerlink" title="2.导入容器"></a>2.导入容器</h4><p>​    导出的文件又可以使用 docker  [container]  import 命令导人变成镜像，该命令格式为 docker  import  [-c｜–change[=[]]]  [-m｜–message[=MESSAGE]]   file｜URL｜ -[REPOSITORY [:TAG]] </p><p>用户可以通过 c, –change＝[] 选项在导人的同时执行对容器进行修改的 Dockerfile指令</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs maxima">下面将导出的 test_0<span class="hljs-number">.1</span>.tar 文件导人到系统中：<br>$ docker import test_0<span class="hljs-number">.1</span>.tar test/ubuntu:vl.O<br>$ docker images<br>REPOSITORY   TAG       IMAGE ID       CREATED              SIZE<br>test         <span class="hljs-number">0.1</span>       <span class="hljs-number">82420b354058</span>   <span class="hljs-number">7</span> seconds ago        <span class="hljs-number">75.</span>1MB<br></code></pre></td></tr></table></figure><h3 id="6-查看容器"><a href="#6-查看容器" class="headerlink" title="(6)查看容器"></a>(6)查看容器</h3><h4 id="1-查看容器详情"><a href="#1-查看容器详情" class="headerlink" title="1.查看容器详情"></a>1.查看容器详情</h4><p>​        查看容器详情可以使用 docker  container  inspect  [OPTIONS] CONTAINER  [CONTAINER . .. ]子命令</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">例如，查看某容器的具体信息，会以 <span class="hljs-keyword">json </span>格式返回包括容器 Id 创建时间、路径、状态、镜像、配置等在内的各项信息：<br>$ docker container <span class="hljs-keyword">inspect </span>test<br></code></pre></td></tr></table></figure><h4 id="2-查看容器内进程"><a href="#2-查看容器内进程" class="headerlink" title="2. 查看容器内进程"></a>2. 查看容器内进程</h4><p>​    查看容器内进程可以使用 docker  [container]  top  [OPTIONS] CONTAINER  [CONTAINER…] 子命令</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coq">命令格式：docker <span class="hljs-built_in">top</span> NAME|<span class="hljs-type">ID</span><br>例如，查看某容器内的进程信息，命令如下：<br>$ docker <span class="hljs-built_in">top</span> webserver<br></code></pre></td></tr></table></figure><h4 id="3-查看统计信息"><a href="#3-查看统计信息" class="headerlink" title="3.查看统计信息"></a>3.查看统计信息</h4><p>​    查看统计信息可以使用 docker  [container]  stats  [OPTIONS] [CONTAINER … ] 子命令，会显示 CPU、内存、存储、网络等使用情况的统计信息</p><p>​    支持选项包括：</p><p>​        -a, -all ：输出所有容器统计信息，默认仅在运行中；</p><p>​        -format string ：格式化输出信息；</p><p>​        -no-stream ：不持续输出，默认会自动更新持续实时结果；</p><p>​        -no-trunc ：不截断输出信息</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">例如，查看当前运行中容器的系统资源使用统计：<br>$ docker stats<br>CONTAINER ID   NAME        CPU %     MEM USAGE <span class="hljs-regexp">/ LIMIT     MEM %     NET I/</span>O         BLOCK I/O        PIDS<br><span class="hljs-number">698</span>a564c7cce   webserver   <span class="hljs-number">0.00</span>%     <span class="hljs-number">2.227</span>MiB <span class="hljs-regexp">/ 1.942GiB   0.11%     1.74kB /</span> <span class="hljs-number">448</span>B   <span class="hljs-number">700</span>kB / <span class="hljs-number">8.19</span>kB   <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="7-其他容器命令"><a href="#7-其他容器命令" class="headerlink" title="(7)其他容器命令"></a>(7)其他容器命令</h3><h4 id="1-复制文件"><a href="#1-复制文件" class="headerlink" title="1. 复制文件"></a>1. 复制文件</h4><p>​    container cp 命令支持在容器和主机之间复制文件 命令格式为 docker  [container]  cp  [OPTIONS]  CONTAINER:SRC_PATH  DEST_PATH｜-</p><h5 id="命令：docker-cp-容器ID-容器内路径-目的主机路径"><a href="#命令：docker-cp-容器ID-容器内路径-目的主机路径" class="headerlink" title="命令：docker cp 容器ID:容器内路径 目的主机路径"></a>命令：docker cp 容器ID:容器内路径 目的主机路径</h5><p>支持的选项包括：</p><p>​        -a, -ar chive ：打包模式，复制文件会带有原始的 uid/gid 信息；</p><p>​        -L, -follow-link ：跟随软连接。当原路径为软连接时,默认只复制链接信息，使用该选项会复制链接的目标内容</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell">例如，将本地的路径 <span class="hljs-class"><span class="hljs-keyword">data</span> 复制到 myubuntu 容器的／tmp 路径下</span><br>$ docker container cp <span class="hljs-class"><span class="hljs-keyword">data</span> myubuntu:/tmp/</span><br></code></pre></td></tr></table></figure><h4 id="2-查看变更"><a href="#2-查看变更" class="headerlink" title="2. 查看变更"></a>2. 查看变更</h4><p>​    container diff 看容器内文件系统的变更，命令格式为 docker [container] diff CONTAINER</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">例如，查看 myubuntu 容器内的数据修改：<br><span class="hljs-variable">$</span> docker container <span class="hljs-built_in">diff</span> myubuntu<br>C /tmp<br>A /tmp/<span class="hljs-keyword">data</span><br></code></pre></td></tr></table></figure><h4 id="3-查看端口映射"><a href="#3-查看端口映射" class="headerlink" title="3.查看端口映射"></a>3.查看端口映射</h4><p>​    container port 命令可以查看容器的端口映射’情况 命令格式为 docker [container] port NAME|ID  [PRIVATE_PORT[/PROTO]］</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xl">例如，查看 webserver 容器的端口映射情况：<br>$ docker container port webserver<br><span class="hljs-number">80</span>/<span class="hljs-function"><span class="hljs-title">tcp</span> -&gt;</span> <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">80</span><br><span class="hljs-number">80</span>/<span class="hljs-function"><span class="hljs-title">tcp</span> -&gt;</span> :::<span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><h4 id="4-更新配置"><a href="#4-更新配置" class="headerlink" title="4. 更新配置"></a>4. 更新配置</h4><p>​    container update 命令可以更新容器的一些运行时配置，主要是一些资源限制份额。</p><p>​    命令格式为 docker  [container]  update [OPTIONS] CONTAINER  [CONTAINER…]</p><p>支持的选项包括：</p><p>​        －blkio-weight uintl6 ：更新块 IO 限制，101000，默认值为，代表着无限制；</p><p>​        －cpu-period int ：限制 CPU 调度器 CFS (Completely Fair Scheduler ）使用时间，单位为微秒，最小1000;</p><p>​        －cpu-quota int ：限制 CPU 调度器 CFS 配额，单位为微秒，最小 1000;</p><p>​        －cpu-rt period int ：限制 CPU 调度器的实时周期，单位为微秒</p><p>​        －cpu-rt runtime int ：限制 CPU 调度器的实时运行时，单位为微秒；</p><p>​        －c, -cpu-shares in 限制 CPU 使用份额；</p><p>​        －cpus decimal ：限制 CPU 个数；</p><p>​        －cpuset-cpus string ：允许使用的 CPU 核，如 0-3, 0,1; </p><p>​        －cpuset mems string ：允许使用的内存块，如 0-3’ 0, 1; </p><p>​        －kernel-memor bytes ：限制使用的内核内存；</p><p>​        －m, -memory bytes 限制使用的内存；</p><p>​        －memory-reservation bytes ：内存软限制；</p><p>​        －memory-swap bytes ：内存加上缓存区的限制，-1 表示为对缓冲区无限制；</p><p>​        －restart stri 口g 容器退出后的重启策略</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">例如，限制总配额为<span class="hljs-number">1</span>秒，容器 webserver 所占用时间为<span class="hljs-number">10</span><span class="hljs-operator">%</span> ，代码如下所示：<br>$ docker <span class="hljs-keyword">update</span> <span class="hljs-comment">--cpu-quota 1000000 webserver </span><br>webserver <br>$ docker <span class="hljs-keyword">update</span> <span class="hljs-comment">--cpu-period 100000 webserver </span><br>webserver<br></code></pre></td></tr></table></figure><h2 id="7-访问-Docker-仓库"><a href="#7-访问-Docker-仓库" class="headerlink" title="7.访问 Docker 仓库"></a>7.访问 Docker 仓库</h2><h3 id="1-Docker-Hub-公共镜像市场"><a href="#1-Docker-Hub-公共镜像市场" class="headerlink" title="(1)Docker Hub 公共镜像市场"></a>(1)Docker Hub 公共镜像市场</h3><p>​    Docker Hub Docker 官方提供的最大的公共镜像仓库，目前包括了超过 100000像，地址为 <a href="https://hub.docker.com/">https://hub.docker.com/</a></p><h4 id="1-登录"><a href="#1-登录" class="headerlink" title="1. 登录"></a>1. 登录</h4><p>​    可以通过命令行执行 docker login 命令来输入用户名 密码和邮箱来完成注册和登录。注册成功后，本地用户目录下会自动创建 docker config on 文件，保存用户的认证信息。</p><p>​    登录成功的用户可以上传个人制作的镜像到 Docker Hub</p><h4 id="2-基本操作"><a href="#2-基本操作" class="headerlink" title="2. 基本操作"></a>2. 基本操作</h4><p>​    用户无须登录即可通过 docker search 命令来查找官方仓库中的镜像，并利用 docker  [image]  pull 命令来将它下载到本地</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">例如以 centos 为关键词进行搜索<br>$ docker search centos<br><br>根据是否为官方提供，可将这些镜像资源分为两类：<br><span class="hljs-number">1</span>.一种是类似于 centos 这样的基础镜像，也称为根镜像 这些镜像是由 Docker 公司创建、验证、支持、提供 ，这样的镜像往往使用单个单词作为名字；<br><span class="hljs-number">2</span>.一种类型的镜像，比如 an sible centos7-ansible 镜像，是由 Docker 用户ansible 创建并维护的，带有用户名称为前缀，表明是某用户下的某仓库 可以通过用户名称前缀“ <span class="hljs-keyword">user</span> <span class="hljs-title">name</span>／镜像名”来指定使用某个用户提供的镜像<br>下载官方 centos 镜像到本地，代码如下所示：<br>$ docker pull centos<br>用户也可以在登录后通过 docker push 命令来将本地镜像推送到 Docker Hub<br></code></pre></td></tr></table></figure><h4 id="3-自动创建"><a href="#3-自动创建" class="headerlink" title="3. 自动创建"></a>3. 自动创建</h4><p>​    例如，用户构建了某应用镜像，如果应用发布新版本，用户需要手动更新镜像。而自动创建则允许用户通过 Docker Hub 指定跟踪一个目标网站（目前支持 GitHub BitBucket ）上的项目，一旦项目发生新的提交，则自动执行创建。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">要配置自动创建，包括如下的步骤：<br><span class="hljs-number">1</span>）创建并登录 Docker Hub ，以及目标网站如 Github<span class="hljs-comment">;</span><br><span class="hljs-number">2</span>）在目标网站中允许 Docker Hub 访问服务；<br><span class="hljs-number">3</span>）在 Docker Hub 中配置一个“自动创建”类型的项目；<br><span class="hljs-number">4</span>）选取一个目标网站中的项目（需要含 Dockerfile ）和分支；<br><span class="hljs-number">5</span>）指定 Dockerfile 的位置，并提交创建<br>之后，可以在 Docker Hub 的“自动创建”页面中跟踪每次创建的状态<br></code></pre></td></tr></table></figure><h3 id="2-第三方镜像市场"><a href="#2-第三方镜像市场" class="headerlink" title="(2)第三方镜像市场"></a>(2)第三方镜像市场</h3><h4 id="1-查看镜像"><a href="#1-查看镜像" class="headerlink" title="1.查看镜像"></a>1.查看镜像</h4><p>​    访问 <a href="https://hub.tenxcloud.com/">https://hub.tenxcloud.com</a> ，即可看到己存在的仓库和存储的镜像，包括 Ubuntu、Java、Mongo、MySQL、Nginx 等热 门仓库和镜像，时速云官方仓库中的镜像会保持与Docker Hub 中官方镜像的同步</p><h4 id="2-下载镜像"><a href="#2-下载镜像" class="headerlink" title="2. 下载镜像"></a>2. 下载镜像</h4><p>​    下载镜像也是使用 docker pull 命令，但是要在镜像名称前添加注册服务器的具体地址。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">格式为 index.tenxcloud/com/<span class="hljs-tag">&lt;namespace&gt;</span>/<span class="hljs-tag">&lt;repository&gt;</span><span class="hljs-tag">&lt;:tag&gt;</span><br>例如，要下载 Docker 官方仓库中的 <span class="hljs-keyword">node</span><span class="hljs-title">:latest</span> 镜像，可以使用如下命令<br>$ docker pull index.tenxcloud.com/docker_library/<span class="hljs-keyword">node</span><span class="hljs-title">:latest</span><br>下载后，可以更新镜像的标签，与官方标签保持一致，方便使用：<br>$ docker <span class="hljs-keyword">tag</span> <span class="hljs-title">index</span>.tenxcloud.com/docker_library/<span class="hljs-keyword">node</span><span class="hljs-title">:latest</span> <span class="hljs-keyword">node</span><span class="hljs-title">:latest</span><br></code></pre></td></tr></table></figure><h4 id="3-搭建本地私有仓库"><a href="#3-搭建本地私有仓库" class="headerlink" title="3 搭建本地私有仓库"></a>3 搭建本地私有仓库</h4><h4 id="1-使用-registry-镜像创建私有仓库"><a href="#1-使用-registry-镜像创建私有仓库" class="headerlink" title="(1)使用 registry 镜像创建私有仓库"></a>(1)使用 registry 镜像创建私有仓库</h4><p>​    安装 docker 可以通过官方提供的 registry 镜像来简单搭建一套本地私有仓库环境：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ docker run -d -p <span class="hljs-number">5000</span>:<span class="hljs-number">5000</span> registry:<span class="hljs-number">2</span> <br>这将自动下载井启动一个 registry 容器，创建本地的私有仓库服务<br>默认情况下，仓库会被创建在容器的／var<span class="hljs-regexp">/lib/</span>regis町目录下 可以通过 -v 参数来将镜像文件存放在本地的指定路径<br>例如,下面的例子将上传的镜像放到<span class="hljs-regexp">/opt/</span>data/registry 目录：<br>$ docker run -d -p <span class="hljs-number">5000</span>:<span class="hljs-number">5000</span> -v<span class="hljs-regexp">/opt/</span>data<span class="hljs-regexp">/registry:/</span>var<span class="hljs-regexp">/lib/</span>registry registry:<span class="hljs-number">2</span> <br>此时，在本地将启动一个私有仓库服务，监听端口为 <span class="hljs-number">5000</span><br></code></pre></td></tr></table></figure><h4 id="2-管理私有仓库"><a href="#2-管理私有仓库" class="headerlink" title="(2)管理私有仓库"></a>(2)管理私有仓库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">使用 docker tag 命令将这个镜像标记为 10.0.2.2:5000/test（格式为 docker tag IMAGE[:TAG] [REGISTRY.HOST/] [USERNAME/] NAME[:TAG ］）<br><span class="hljs-meta">$ </span><span class="language-bash">docker tag ubuntu:latest 10.0.2.2:5000/test</span><br>使用 docker push 上传标记的镜像：<br><span class="hljs-meta">$ </span><span class="language-bash">docker push 10.0.2.2:5000/test</span><br>使curl 查看仓库工 10.0.2.2:5000 中的镜像：<br><span class="hljs-meta">$ </span><span class="language-bash">curl http://10.0.2.2:5000/v2/search</span><br>在结果中可以看到｛＂ description&quot;: ’t II / II ame11 11library/test11 ｝，表明镜像已经成功上传了<br>现在可以到任意 台能访问到工 0.0.2.2 地址的机器去下载这个镜像了<br>比较新的 Docker 版本对安全性要求较高，会要求仓库支持 SSL/TLS 证书。对于内部使用的私有仓库，可以自行配置证书或关闭对仓库的安全性检查<br>首先，修改 Docker daemon 的启动参数，添加如下参数，表示信任这个私有仓库，不进行安全证书检查：<br>DOCKER_OPTS;”--insecure-registry 10.0.2.2:500 。”<br>之后重启 Docker 服务，并从私有仓库中下载镜像到本地：<br><span class="hljs-meta">$ </span><span class="language-bash">sudo service docker restart</span> <br><span class="hljs-meta">$ </span><span class="language-bash">docker pull 10.0.2.2:5000/test</span><br>下载后，还可以添加一个更通用的标签 ubuntu:18.04 ，方便后续使用<br><span class="hljs-meta">$ </span><span class="language-bash">docker tag 10.0.2.2:5000/test ubuntu:18.04</span><br></code></pre></td></tr></table></figure><h2 id="8-Docker-数据管理"><a href="#8-Docker-数据管理" class="headerlink" title="8.Docker 数据管理"></a>8.Docker 数据管理</h2><h3 id="1-数据卷"><a href="#1-数据卷" class="headerlink" title="(1)数据卷"></a>(1)数据卷</h3><p>​    数据卷 (Data Volumes) 是一个可供容器使用的特殊目录，它将主机操作系统目录直接映射进容器，类似于 Linux 中的 mount 行为</p><p>​    数据卷可以提供很多有用的特性：</p><p>​            数据卷可以在容器之间共事和重用，容器间传递数据将变得高效与方便；</p><p>​            对数据卷内数据的修改会立马生效，无论是容器内操作还是本地操作；</p><p>​            对数据卷的更新不会影响镜像，解摘开应用和数据</p><p>​            卷会一直存在 ，直到没有容器使用，可以安 地卸载它</p><h4 id="1-创建数据卷"><a href="#1-创建数据卷" class="headerlink" title="1. 创建数据卷"></a>1. 创建数据卷</h4><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit">Docker 提供了 volume 子命令来管理数据卷，如下命令可以快速在本地创建一个数据卷：<br>$ docker volume create -d local test<br><span class="hljs-keyword">test</span><br><span class="hljs-keyword"></span>查看 /var/lib/docker/volumes 路径下，会发现所创建的数据卷位置<br>$ ls -l /var/lib/docker/volumes<br>除了 create 子命令外， docker volume 还支持 inspect（查看详细信息）、ls（列出已有数据卷）、prune（清理无用数据卷）、rm（删除数据卷）等<br></code></pre></td></tr></table></figure><h4 id="2-绑定数据卷"><a href="#2-绑定数据卷" class="headerlink" title="2.绑定数据卷"></a>2.绑定数据卷</h4><p>​    除了使用 volume 子命令来管理数据卷外，还可以在创建容器时将主机本地的任意路径挂载到容器内作为数据卷，这种形式创建的数据卷称为绑定数据卷</p><p>​    在用 docker [container] run 命令的时候，可以使用 -mount 选项来使用数据卷</p><p>​    -mount 项支持三种类型的数据卷，包括</p><p>​            volume 普通数据卷，映射到主机 /var/lib/docker/volumes 径下；</p><p>​            bind ：绑定数据卷，映射到主机指定路径下；</p><p>​            tmpfs ：临时数据卷，只存在于内存中</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">使用 training/webapp 镜像创建 Web 容器，并创建一个数据卷挂载到容器的 /opt/webapp 目录：<br>$ docker <span class="hljs-keyword">run</span><span class="language-bash"> -d -p --name web --mount <span class="hljs-built_in">type</span>=<span class="hljs-built_in">bind</span>,<span class="hljs-built_in">source</span>=/webapp,destination=/opt/webapp training/webapp python app.py</span><br>上述命令等同于使用旧的 标记可以在容器内创建一个数据卷：<br>$ docker <span class="hljs-keyword">run</span><span class="language-bash"> -d -p --name web -v /webapp:/opt/webapp training/webapp python app.py</span><br>注：这个功能在进行应用测试的时候十分方便，比如用户可以放置一些程序或数据到本地目录中实时进行更新，然后在容器 运行和使用；另外，本地目录的路径必须是绝对路径，容器内路径可以为相对路径 如果目录不存在， Docker 会自动创建<br>Docker 载数据卷的默认权限是读写 (rw) ，用户也可以通过 ro 指定为只读<br>$ docker <span class="hljs-keyword">run</span><span class="language-bash"> -d -p --name web -v /webapp:/opt/webapp:ro training/webapp python app.py</span><br>加了： ro 之后，容器内对所挂载数据卷内的数据就无法修改了<br>如果直接挂载一个文件到容器，使用文件编辑工具，包括 vi 或者 sed --in-place 的时候，可能会造成文件 inode 的改 Docker <span class="hljs-number">1.1</span>.<span class="hljs-number">0</span> 起，这会导致报错误信息 所以推荐的方式是直接挂载文件所在的目录到容器内。<br></code></pre></td></tr></table></figure><h3 id="2-数据卷容器"><a href="#2-数据卷容器" class="headerlink" title="(2)数据卷容器"></a>(2)数据卷容器</h3><p>​    如果用户需要在多个容器之间共享一些持续更新的数据，最简单的方式是使用数据卷容器。数据卷容器也是一个容器，但是它的目的是专门提供数据卷给其他容器挂载。</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs tcl">首先，创建一个数据卷容器 dbdata 并在其中创建一个数据卷挂载到 /dbdata:<br>$ docker run -it -v /dbdata --name dbdata ubuntu<br>查看／dbdata 目录<br>root@<span class="hljs-number">60</span>b27bcd3b34:/# ls<br>bin  boot  dbdata  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  <span class="hljs-keyword">proc</span><span class="hljs-title">  root</span> <span class="hljs-title"> run</span> <span class="hljs-title"> sbin</span> <span class="hljs-title"> srv</span> <span class="hljs-title"> sys</span> <span class="hljs-title"> tmp</span> <span class="hljs-title"> usr</span> <span class="hljs-title"> var</span><br>然后，可以在其他容器中使用 --volumes-from 来挂载dbdata容器中的数据卷，例如创建dbl和db2两个容器，并从dbdata容器挂载数据卷：<br>$<span class="hljs-title"> docker</span> run -it --volumes-from<span class="hljs-title"> dbdata</span> --name<span class="hljs-title"> dbl</span> ubuntu <br>$<span class="hljs-title"> docker</span> run -it --volumes-from<span class="hljs-title"> dbdata</span> --name<span class="hljs-title"> db2</span> ubuntu<br>此时，容器<span class="hljs-title"> dbl和db2</span> 都挂载同一个数据卷到相同的 /dbdata 目录，三个容器任何一方在该目录下的写人，其他容器都可以看到<br>例如，在<span class="hljs-title"> dbdata</span> 容器中创建一个<span class="hljs-title"> test</span> 文件：<br>进入容器：$<span class="hljs-title"> docker</span> attach<span class="hljs-title"> dbdata</span><br>编译：root@60b27bcd3b34:/#<span class="hljs-title"> cd</span> /dbdata<span class="hljs-title"></span><br><span class="hljs-title"> root@60b27bcd3b34:/dbdata#</span> touch<span class="hljs-title"> test</span><br><span class="hljs-title"> root@60b27bcd3b34:/dbdata#</span> ls<span class="hljs-title"></span><br><span class="hljs-title"> test</span><br> 在<span class="hljs-title"> dbl</span> 容器内查看它：<br> $<span class="hljs-title"> docker</span> attach<span class="hljs-title"> db1的ID</span><br><span class="hljs-title"> root@fc47426f1c5b:/#</span> ls /dbdata<span class="hljs-title"></span><br><span class="hljs-title"> test</span><br>可以多次使用 --volumes-from 参数来从多个容器挂载多个数据卷，还可以从其他已经挂载了容器卷的容器来挂载数据卷<br>$<span class="hljs-title"> docker</span> run -d --name<span class="hljs-title"> db3</span> --volumes-from<span class="hljs-title"> dbl</span> training/postgres<br><br>注意：使用 --volumes-from 参数所挂载数据卷的容器自身并不需要保持在运行状态<br></code></pre></td></tr></table></figure><p>注意：如果删除了挂载的容器（包括 dbdata db 工和 db2 ），数据卷并不会被自动删除，如果删除一个数据卷，必须在删除最后一个还挂载着它的容器时显式使用 docker rm -v 令来指定同时删除关联的容器</p><h3 id="3-利用数据卷容器来迁移数据"><a href="#3-利用数据卷容器来迁移数据" class="headerlink" title="(3)利用数据卷容器来迁移数据"></a>(3)利用数据卷容器来迁移数据</h3><p>​    可以利用数据卷容器对其中的数据卷进行备份、恢复，以实现数据的迁移</p><h4 id="1-备份"><a href="#1-备份" class="headerlink" title="1. 备份"></a>1. 备份</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle">使用下面的命令来备份 dbdata 数据卷容器内的数据卷<br>$ docker run -volumes-<span class="hljs-keyword">from</span> dbdata -v $(pwd):<span class="hljs-regexp">/backup - -name worker ubuntu tar cvf /</span>backup<span class="hljs-regexp">/backup.tar /</span>dbdata<br>这个命令稍微有点复杂，具体分析下:<br>首先利用 buntu 镜像创建了一个容器 worker 使用 --volumes-<span class="hljs-keyword">from</span> dbdata 参数来让 worker 容器挂载 dbdata 容器的数据卷（dbdata数据卷）；使用 -$(pwd):<span class="hljs-regexp">/backup 参数来挂载本地的当前目录到 worker 容器的 /</span>backup 目录。<br>worker 容器启动后，使用 tar cvf <span class="hljs-regexp">/backup/</span>backup.tar <span class="hljs-regexp">/dbdata 令将 /</span>dbdata 下内容备份为容器内的／backup/backup.tar，即宿主主机当前目录下的 backup.tar<br></code></pre></td></tr></table></figure><h4 id="2-恢复"><a href="#2-恢复" class="headerlink" title="2. 恢复"></a>2. 恢复</h4><p>​    如果要恢复数据到一个容器，可以按照下面的操作</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">首先创建一个带有数据卷的容器 bdata2:<br>$ docker <span class="hljs-keyword">run</span><span class="language-bash"> -v /dbdata --name dbdata2 ubuntu /bin/bash </span><br>然后创建另一个新的容器，挂载 dbdata2 容器，并使用 untar 解压备份文件到所挂载的容器卷中：<br>$docker <span class="hljs-keyword">run</span><span class="language-bash"> --volumes-from dbdata2 -v $(<span class="hljs-built_in">pwd</span>) :/backup busybox tar xvf /backup/backup.tar</span><br></code></pre></td></tr></table></figure><h2 id="9-端口映射与容器互联"><a href="#9-端口映射与容器互联" class="headerlink" title="9.端口映射与容器互联"></a>9.端口映射与容器互联</h2><p>​    Docker 除了通过网络访间外， 还提供了两个很方便的功能来满足服务访问的基本需求：一个是允许映射容器内应用的服务端口到本地宿主主机；另一个是互联机制实现多个容器间通过容器名来快速访问</p><h3 id="1-端口映射实现容器访问"><a href="#1-端口映射实现容器访问" class="headerlink" title="(1)端口映射实现容器访问"></a>(1)端口映射实现容器访问</h3><h4 id="1从外部访问容器应用"><a href="#1从外部访问容器应用" class="headerlink" title="1从外部访问容器应用"></a>1从外部访问容器应用</h4><p>​    在启动容器的时候， 如果不指定对应参数， 在容器外部是无法通过网络来访问容器内的网络应用和服务的。当容器中运行一些网络应用， 要让外部访问这些应用时， 可以通过 -P 或 -p 参数来指定端口映射。当使用平（大写的）标记时， Docker 会随机映 49000～49900 的端口到内部容器开放的网络端口：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker run <span class="hljs-literal">-d</span> <span class="hljs-literal">-P</span> training/webapp python app.py <br><span class="hljs-variable">$</span> docker <span class="hljs-built_in">ps</span> <span class="hljs-literal">-l</span><br></code></pre></td></tr></table></figure><p>​    此时， 可以使用 docker ps 看到， 本地主机的 49155 被映射到了容器的 5000 端口。访间宿主主机的 49155 端口即可访问容器内 web 应用提供的界面。同样， 可以通过 docker logs 命令来查看应用的信息：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> docker logs <span class="hljs-operator">-f</span> nostalgic_morse<br></code></pre></td></tr></table></figure><p>​    -p (小写的）则可以指定要映射的端口，并且，在一个指定端口上只可以绑定 一个容器。支持的格式有 IP:HostPort:ContainerPort | IP:: ContainerPort | HostPart:ContainerPort。</p><h4 id="2-映射所有接口地址"><a href="#2-映射所有接口地址" class="headerlink" title="2.映射所有接口地址"></a>2.映射所有接口地址</h4><p>​    使用 HostPort:ContainerPort 格式本地的5000端口映射到容器的5000端口，可以执行如下命令：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">$ docker <span class="hljs-keyword">run</span><span class="language-bash"> -d -p 5000:5000 training/webapp python app.py</span><br>此时默认会绑定本地所有接口上的所有地址。多次使用-p标记可以绑定多个端口。例如：<br>$ docker <span class="hljs-keyword">run</span><span class="language-bash"> -d -p 5000:5000 -p 3000:80 training/webapp python app.py</span><br></code></pre></td></tr></table></figure><h4 id="3-映射到指定地址的指定端口"><a href="#3-映射到指定地址的指定端口" class="headerlink" title="3.映射到指定地址的指定端口"></a>3.映射到指定地址的指定端口</h4><p>​    可以使用 IP:HostPart:ContainerPort 格式指定映射使用一个特定地 址，比如 localhost地址127.0.0.1:</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">$ docker run -d -p <span class="hljs-number">127.0.0.1</span>:<span class="hljs-number">5000:5000</span> training/webapp python app.py<br></code></pre></td></tr></table></figure><h4 id="4-映射到指定地址的任意端口"><a href="#4-映射到指定地址的任意端口" class="headerlink" title="4.映射到指定地址的任意端口"></a>4.映射到指定地址的任意端口</h4><p>​    使用IP::ContainerPort 绑定localhost的任意端口到容器的5000端口，本地主机会自动分配一个端口：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">$ docker run -d -p <span class="hljs-number">127.0.0.1</span><span class="hljs-number">::5000</span> training/webapp python app.py<br></code></pre></td></tr></table></figure><p>​    还可以使用udp标记来指定 udp端口：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">$ docker <span class="hljs-keyword">run</span><span class="language-bash"> -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py</span><br></code></pre></td></tr></table></figure><h4 id="5-查看映射端口配置"><a href="#5-查看映射端口配置" class="headerlink" title="5.查看映射端口配置"></a>5.查看映射端口配置</h4><p>​    使用docker port来查看当前映射的端口配置，也可以查看到绑定的地址:</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>docker port nostalgic_rnorse <span class="hljs-number">5000</span><br></code></pre></td></tr></table></figure><p>注意：容器有自己的内部网络和IP地址，使用docker [container]  inspect＋容器ID. 可以获取容器的具体信息</p><h3 id="2-互联机制实现便捷互访"><a href="#2-互联机制实现便捷互访" class="headerlink" title="(2)互联机制实现便捷互访"></a>(2)互联机制实现便捷互访</h3><p>​    容器的互联(Iinking)是一种让多个容器中的应用进行快速交互的方式。它会在源和接收容器之间创建连接关系，接收容器可以通过容器名快速访问到源容器，而不用指定具体的IP地址。</p><h4 id="1-自定义容器命名"><a href="#1-自定义容器命名" class="headerlink" title="1.自定义容器命名"></a>1.自定义容器命名</h4><p>​    连接系统依据容器的名称来执行。因此，首先需要自定义一个好记的容器命名。虽然当创建容器的时候，系统默认会分配一个名字，但自定义命名容器有两个好处：</p><p>​        1、自定义的命名，比较好记，比如一个Web应用容器我们可以给它起名叫web, 一 目了然；</p><p>​        2、当要连接其他容器时候（即便重启），也可以使用容器名而不用改变，比如连接web容器到db容器。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata">使用--name标记可以为容器自定义命名：<br>$ docker <span class="hljs-keyword">run</span> -<span class="hljs-keyword">d</span> -P --name web training/webapp py七hon <span class="hljs-keyword">app</span>.py <br>使用docker ps来验证设定的命名：<br>$ docker ps -1<br>也可以使用docker [container) <span class="hljs-keyword">inspect</span>来查看容器的名字：<br>$ docker [container) <span class="hljs-keyword">inspect</span> -f <span class="hljs-string">&quot;&#123;&#123;.Name&#125;&#125;&quot;</span> 容器ID<br>在执行docker [container] <span class="hljs-keyword">run</span>的时候如果添加--<span class="hljs-keyword">rm</span>标记，则容器在终止后会立刻删除。注意，--<span class="hljs-keyword">rm</span> 和-<span class="hljs-keyword">d</span>参数不能同时使用。<br></code></pre></td></tr></table></figure><p>注意：容器的名称是唯一的。如果巳经命名了一个叫web的容器，当你要再次使用 web 这个名称的时候，需要先用docker rm命令删除之前创建的同名容器。</p><h4 id="2-容器互联"><a href="#2-容器互联" class="headerlink" title="2.容器互联"></a>2.容器互联</h4><p>​    使用 –link参数可以让容器之间安全地进行交互。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stata">先创建一个新的数据库容器：<br>$ docker <span class="hljs-keyword">run</span> -<span class="hljs-keyword">d</span> --name <span class="hljs-keyword">db</span> training/postgres<br>删除之前创建的web容器：<br>$ docker <span class="hljs-keyword">rm</span> -f web <br>然后创建一个新的web容器，并将它连接到<span class="hljs-keyword">db</span>容器：<br>$ docker <span class="hljs-keyword">run</span> -<span class="hljs-keyword">d</span> -P --name web --link <span class="hljs-keyword">db</span>:<span class="hljs-keyword">db</span> taining/webapp python <span class="hljs-keyword">app</span>.py<br>此时，<span class="hljs-keyword">db</span>容器和web容器建立互联关系。<br>--link参数的格式为 --link name:alias, 其中name是要链接的容器的名称，alias是别名<br>使用 docker ps 来查看容器的连接：<br>CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES <br>$ docker ps<br>349169744e49 training/postgres:latest <span class="hljs-keyword">su</span> postgres -c &#x27;/usr <span class="hljs-keyword">About</span> a minute ago <br>Up <span class="hljs-keyword">About</span> a minute 5432/tcp <span class="hljs-keyword">db</span>, web/<span class="hljs-keyword">db</span> <br>aed84ee2lbde training/webapp:latest python <span class="hljs-keyword">app</span>.py 16 hours ago Up 2 minutes <br>0.0.0.0:49154-&gt;5000/tcp web<br></code></pre></td></tr></table></figure><p>Docker通过两种方式为容器公开连接信息：</p><p>​        更新环境变量；</p><p>​        更新 /etc/hosts 文件。</p><p>使用 env 命令来查看 web 容器的环境变量：</p><p>$ docker run –rm –name web2 –link db:db training/webapp env </p>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx反向代理</title>
    <link href="/2022/08/25/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    <url>/2022/08/25/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="1、Mac上nginx容器反向代理本地项目"><a href="#1、Mac上nginx容器反向代理本地项目" class="headerlink" title="1、Mac上nginx容器反向代理本地项目"></a>1、Mac上nginx容器反向代理本地项目</h1><h2 id="1、获取镜像"><a href="#1、获取镜像" class="headerlink" title="1、获取镜像"></a>1、获取镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">root@root ~ % docker pull nginx:perl<br></code></pre></td></tr></table></figure><h2 id="2、复制容器内容"><a href="#2、复制容器内容" class="headerlink" title="2、复制容器内容"></a>2、复制容器内容</h2><h3 id="1-先运行一个nginx容器"><a href="#1-先运行一个nginx容器" class="headerlink" title="(1)先运行一个nginx容器"></a>(1)先运行一个nginx容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@root ~ % docker run -p 80:80 -d nginx:perl --name nginx-demo<br></code></pre></td></tr></table></figure><h3 id="2-进入容器内部"><a href="#2-进入容器内部" class="headerlink" title="(2)进入容器内部"></a>(2)进入容器内部</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@root ~ % docker exec -it nginx-demo /bin/bash<br></code></pre></td></tr></table></figure><h3 id="3-将容器内部-usr-share-nginx-文件夹下的所有文件复制到本地"><a href="#3-将容器内部-usr-share-nginx-文件夹下的所有文件复制到本地" class="headerlink" title="(3)将容器内部 /usr/share/nginx 文件夹下的所有文件复制到本地"></a>(3)将容器内部 /usr/share/nginx 文件夹下的所有文件复制到本地</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@root private/mydata/nginx/conf ~ % cp -r /usr/share/nginx<br></code></pre></td></tr></table></figure><h3 id="4-重命名为conf"><a href="#4-重命名为conf" class="headerlink" title="(4)重命名为conf"></a>(4)重命名为conf</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@root private/mydata/nginx/conf ~ % mv nginx conf<br></code></pre></td></tr></table></figure><h3 id="5-删除容器"><a href="#5-删除容器" class="headerlink" title="(5)删除容器"></a>(5)删除容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@root ～ % docker rm -f nginx-demo<br></code></pre></td></tr></table></figure><h2 id="3、运行容器并挂载到本地"><a href="#3、运行容器并挂载到本地" class="headerlink" title="3、运行容器并挂载到本地"></a>3、运行容器并挂载到本地</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@root ～ % docker run --name nginx <br>-v /private/mydata/nginx/conf:/etc/nginx -v /private/mydata/nginx/html:/usr/share/nginx/html <br>-v /private/mydata/nginx/logs:/var/log/nginx -p 80:80 -d nginx:perl<br></code></pre></td></tr></table></figure><h2 id="4、挂载本地项目到nginx"><a href="#4、挂载本地项目到nginx" class="headerlink" title="4、挂载本地项目到nginx"></a>4、挂载本地项目到nginx</h2><h3 id="1-直接反向代理配置"><a href="#1-直接反向代理配置" class="headerlink" title="(1)直接反向代理配置"></a>(1)直接反向代理配置</h3><p>进入本地 /private/mydata/nginx/conf/conf.d 文件夹，修改default.conf文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs text">server &#123;<br>    listen       80;<br>    listen  [::]:80;<br>    #修改服务名<br>    server_name  gulimall.com;<br><br>    #access_log  /var/log/nginx/host.access.log  main;<br><br>    location / &#123;<br>        #配置prox_pass http://本机IP:端口号;<br>        proxy_pass  http://192.168.0.198:10000;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-负载均衡到网关"><a href="#2-负载均衡到网关" class="headerlink" title="(2)负载均衡到网关"></a>(2)负载均衡到网关</h3><p>进入本地 /private/mydata/nginx/conf/conf.d 文件夹，修改default.conf文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">listen</span>  [::]:<span class="hljs-number">80</span>;<br>    <span class="hljs-comment">#修改服务名</span><br>    <span class="hljs-attribute">server_name</span>  gulimall.com;<br><br>    <span class="hljs-comment">#access_log  /var/log/nginx/host.access.log  main;</span><br><br>    <span class="hljs-section">location</span> / &#123;<br>    <span class="hljs-comment">#配置请求头</span><br>        <span class="hljs-attribute">proxy_set_header</span>   Host  <span class="hljs-variable">$host</span>;<br>        <span class="hljs-comment">#配置prox_pass http://本机IP:端口号;</span><br>        <span class="hljs-attribute">proxy_pass</span>  http://gulimall;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>进入本地 /private/mydata/nginx/conf 文件夹，修改 nginx.conf 文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><br><span class="hljs-attribute">user</span>  nginx;<br><span class="hljs-attribute">worker_processes</span>  auto;<br><br><span class="hljs-attribute">error_log</span>  /var/log/nginx/<span class="hljs-literal">error</span>.log <span class="hljs-literal">notice</span>;<br><span class="hljs-attribute">pid</span>        /var/run/nginx.pid;<br><br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       /etc/nginx/mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br><br>    <span class="hljs-attribute">log_format</span>  main  <span class="hljs-string">&#x27;<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] &quot;<span class="hljs-variable">$request</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;<span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> &quot;<span class="hljs-variable">$http_referer</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;&quot;<span class="hljs-variable">$http_user_agent</span>&quot; &quot;<span class="hljs-variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;<br><br>    <span class="hljs-attribute">access_log</span>  /var/log/nginx/access.log  main;<br><br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br><br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    <span class="hljs-comment">#gzip  on;</span><br>    <span class="hljs-comment">#配置负载均衡到网关</span><br>    <span class="hljs-section">upstream</span> gulimall &#123;<br>    <span class="hljs-comment">#配置服务   本机IP:网关端口;</span><br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.0.198:8888</span>;<br>    &#125;<br><br>    <span class="hljs-attribute">include</span> /etc/nginx/conf.d/<span class="hljs-regexp">*.conf</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2、nginx在宿主机上反向代理"><a href="#2、nginx在宿主机上反向代理" class="headerlink" title="2、nginx在宿主机上反向代理"></a>2、nginx在宿主机上反向代理</h1><h2 id="1、安装（可以用-brew-安装）"><a href="#1、安装（可以用-brew-安装）" class="headerlink" title="1、安装（可以用 brew 安装）"></a>1、安装（可以用 brew 安装）</h2><figure class="highlight shell"><figcaption><span>l</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo brew install nginx<br></code></pre></td></tr></table></figure><h2 id="2、查看-nginx-版本"><a href="#2、查看-nginx-版本" class="headerlink" title="2、查看 nginx 版本"></a>2、查看 nginx 版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -v<br></code></pre></td></tr></table></figure><h2 id="3、启动-nginx"><a href="#3、启动-nginx" class="headerlink" title="3、启动 nginx"></a>3、启动 nginx</h2><figure class="highlight shell"><figcaption><span>l</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nginx  <br></code></pre></td></tr></table></figure><p>也可以使用下面的命令启动，但是配置文件nginx.conf修改后用这个命令执行不生效，故不建议使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo brew services start nginx<br></code></pre></td></tr></table></figure><h2 id="4、查看-nginx-是否启动成功"><a href="#4、查看-nginx-是否启动成功" class="headerlink" title="4、查看 nginx 是否启动成功"></a>4、查看 nginx 是否启动成功</h2><p>在浏览器中访问 <a href="https://links.jianshu.com/go?to=http://localhost:8080/">http://localhost:8080</a>，如果出现 Welcome to nginx ，则说明启动成功.</p><p>备注：端口号是在配置文件 nginx.conf 里面配置的，默认端口是 8080 ，配置文件的位置 /usr/local/etc/nginx</p><h2 id="5、关闭nginx"><a href="#5、关闭nginx" class="headerlink" title="5、关闭nginx"></a>5、关闭nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nginx -s stop<br></code></pre></td></tr></table></figure><p>也可以使用下面的命令启动，但是配置文件nginx.conf修改后用这个命令执行不生效，故不建议使用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo brew services stop nginx<br></code></pre></td></tr></table></figure><h2 id="6、重新加载nginx"><a href="#6、重新加载nginx" class="headerlink" title="6、重新加载nginx"></a>6、重新加载nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nginx -s reload<br></code></pre></td></tr></table></figure><h2 id="7、可能遇到的问题"><a href="#7、可能遇到的问题" class="headerlink" title="7、可能遇到的问题"></a>7、可能遇到的问题</h2><ul><li><p>端口被占用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx: [emerg] bind() to 0.0.0.0:80 failed (48: Address already in use)<br></code></pre></td></tr></table></figure><p>解决方法：(1)修改 nginx.conf 文件里的端口号 </p><p>​                    (2)使用 losf -i:端口号 查看占用端口的信息，然后 kill -9 PID</p></li><li><p>权限不够</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx: [alert] could not open error log file: open() “/usr/local/var/log/nginx/error.log” failed (13: Permission denied)<br></code></pre></td></tr></table></figure><p>解决方法：在命令前加上 sudo，这时可能会要求输入密码，密码就是电脑的开机密码啦~</p></li></ul><h2 id="8、补充"><a href="#8、补充" class="headerlink" title="8、补充"></a>8、补充</h2><p>安装 homebrew ，将以上命令粘贴至terminal，然后回车即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;<br></code></pre></td></tr></table></figure><h2 id="9、总结"><a href="#9、总结" class="headerlink" title="9、总结"></a>9、总结</h2><figure class="highlight shell"><figcaption><span>l</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">nginx -s reload 重新加载配置<br>nginx -s reopen 重启<br>nginx -s stop 停止<br>nginx -s quit 退出<br>nginx -V 查看版本，以及配置文件地址<br>nginx -v 查看版本<br>nginx -c filename 指定配置文件<br>nginx -h 帮助<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>mac</tag>
      
      <tag>docker</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac电脑下配置github的ssh</title>
    <link href="/2022/08/20/mac%E7%94%B5%E8%84%91%E4%B8%8B%E9%85%8D%E7%BD%AEgithub%E7%9A%84ssh/"/>
    <url>/2022/08/20/mac%E7%94%B5%E8%84%91%E4%B8%8B%E9%85%8D%E7%BD%AEgithub%E7%9A%84ssh/</url>
    
    <content type="html"><![CDATA[<h2 id="1、验证是否有ssh-keys"><a href="#1、验证是否有ssh-keys" class="headerlink" title="1、验证是否有ssh keys"></a>1、验证是否有ssh keys</h2><figure class="highlight shell"><figcaption><span>l</span></figcaption><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">ls -al ~/.ssh<br></code></pre></td></tr></table></figure><h3 id="注：如果有-pub结尾的文件直接打开"><a href="#注：如果有-pub结尾的文件直接打开" class="headerlink" title="注：如果有.pub结尾的文件直接打开"></a>注：如果有.pub结尾的文件直接打开</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>复制到github上的SSH keys</p><h2 id="2、新建ssh-keys"><a href="#2、新建ssh-keys" class="headerlink" title="2、新建ssh keys"></a>2、新建ssh keys</h2><h3 id="1-生成ssh-keygen"><a href="#1-生成ssh-keygen" class="headerlink" title="1.生成ssh-keygen"></a>1.生成ssh-keygen</h3><figure class="highlight shell"><figcaption><span>l</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;<br></code></pre></td></tr></table></figure><p>其中，”<a href="https://links.jianshu.com/go?to=mailto:your_email@example.com">your_email@example.com</a>“是你的github关联的邮箱；</p><h3 id="2-确定key保存的目录（直接回车，选择默认）"><a href="#2-确定key保存的目录（直接回车，选择默认）" class="headerlink" title="2.确定key保存的目录（直接回车，选择默认）"></a>2.确定key保存的目录（直接回车，选择默认）</h3><h3 id="3-输入密码（可回车不需要密码，写密码要写两遍）"><a href="#3-输入密码（可回车不需要密码，写密码要写两遍）" class="headerlink" title="3.输入密码（可回车不需要密码，写密码要写两遍）"></a>3.输入密码（可回车不需要密码，写密码要写两遍）</h3><p>这个时候在默认路径下就生成了两个文件，公钥和私钥。</p><h3 id="4-将SSH-Key添加到ssh-agent"><a href="#4-将SSH-Key添加到ssh-agent" class="headerlink" title="4.将SSH Key添加到ssh-agent"></a>4.将SSH Key添加到ssh-agent</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">eval $(ssh-agent -s)<br></code></pre></td></tr></table></figure><p>返回agent的Pid</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-add ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure><p>然后输入密码，没有密码的直接回车，提示添加成功</p><h3 id="5-打开id-rsa-pub文件，复制文件内容到github"><a href="#5-打开id-rsa-pub文件，复制文件内容到github" class="headerlink" title="5.打开id_rsa.pub文件，复制文件内容到github"></a>5.打开id_rsa.pub文件，复制文件内容到github</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta"># </span><span class="language-bash">查看目录</span><br>ls -al ~/.ssh<br><span class="hljs-meta"># </span><span class="language-bash">打开id_rsa.pub文件</span><br>cat ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><h2 id="3、验证github是否链接"><a href="#3、验证github是否链接" class="headerlink" title="3、验证github是否链接"></a>3、验证github是否链接</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -T git@github.com<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>GitHub</tag>
      
      <tag>Mac</tag>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Cloud 使用Eureka进行feign调用</title>
    <link href="/2022/08/14/Eureka+Feign%E5%AE%9E%E7%8E%B0%E4%B8%A4%E4%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8/"/>
    <url>/2022/08/14/Eureka+Feign%E5%AE%9E%E7%8E%B0%E4%B8%A4%E4%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1、创建项目"><a href="#1、创建项目" class="headerlink" title="1、创建项目"></a>1、创建项目</h1><p>项目主要分为三个微服务：服务提供者、服务消费者、Eureka注册中心。为了方便演示，三个项目都在同一个主机上运行，且都放在一个父项目里。</p><p>首先在IDEA中创建一个空项目，然后分别在项目中新建对应的三个Spring模块:</p><ul><li>Eureka: 注册中心，依赖为Eureka Server。</li><li>Server: 服务提供者，依赖为Eureka Discovery Client, Spring Web。</li><li>Client: 服务消费者，依赖为OpenFeign, Eureka Discovery Client, Spring Web。</li></ul><h1 id="2、注册中心"><a href="#2、注册中心" class="headerlink" title="2、注册中心"></a>2、注册中心</h1><p>服务提供者通过向注册中心注册，提供它们的地址供调用；服务消费者向注册中心请求来获取可用的服务。</p><h2 id="1-主要依赖"><a href="#1-主要依赖" class="headerlink" title="1.主要依赖"></a>1.主要依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8085</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhost</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>    <span class="hljs-comment"># 指定服务url</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8085/eureka/</span><br>    <span class="hljs-comment"># 是否拉取其它服务器的注册信息</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 是否向其它服务器注册</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span><br>    <br><span class="hljs-comment"># 指定应用名称</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka</span><br></code></pre></td></tr></table></figure><p>默认情况下，Eureka服务器假定自己是集群的一部分，会定期向其它Eureka服务器注册自己，并获取其它服务器的注册信息。由于本项目仅部署一个Eureka服务器提供注册服务，所以不需要这两个动作，通过配置文件的eureka.client.fetch-registry和eureka.client.register-with-eureka两个属性禁用。</p><p>eureka.client.service-url包含了每个zone的名称和地址。defaultZone是一个特殊的key，如果客户端没有指定所需的zone，就会使用这个默认的zone。一般情况下defaultZone的地址就是Eureka服务器本身。</p><h2 id="3-主类"><a href="#3-主类" class="headerlink" title="3.主类"></a>3.主类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EurekaApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>要启动Eureka注册服务，在原生的Spring Boot启动类上注解@EnableEurekaServer即可。</p><h2 id="4-注册中心页面"><a href="#4-注册中心页面" class="headerlink" title="4.注册中心页面"></a>4.注册中心页面</h2><p>项目启动后，访问localhost:8085就能看到Eureka提供的界面了</p><p><img src="/2022/08/14/Eureka+Feign%E5%AE%9E%E7%8E%B0%E4%B8%A4%E4%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8/%E6%88%AA%E5%B1%8F2022-05-24%2018.12.09.png"></p><h1 id="3、服务提供者"><a href="#3、服务提供者" class="headerlink" title="3、服务提供者"></a>3、服务提供者</h1><h2 id="1-主要依赖-1"><a href="#1-主要依赖-1" class="headerlink" title="1.主要依赖"></a>1.主要依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><p>spring-cloud-starter-netflix-eureka-client依赖包含了Eureka客户端（即服务提供者）的实现；spring-boot-starter-web用于将服务暴露为HTTP端点。</p><h2 id="2-配置文件-1"><a href="#2-配置文件-1" class="headerlink" title="2.配置文件"></a>2.配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 注册中心地址</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8085/eureka/</span><br><br><span class="hljs-comment"># 应用名称</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">server</span><br><span class="hljs-comment"># 应用端口</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8086</span><br></code></pre></td></tr></table></figure><p>eureka.client.service-url.defaultZone属性告诉Eureka客户端从哪里找到注册中心。</p><h2 id="3-主类-1"><a href="#3-主类-1" class="headerlink" title="3.主类"></a>3.主类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ServerApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>@EnableFeignClients：启动对Feign接口的扫描</p><p>@EnableDiscoveryClient：启动对Eureka服务器的发现。</p><h2 id="4-service层和controller层"><a href="#4-service层和controller层" class="headerlink" title="4.service层和controller层"></a>4.service层和controller层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ServerService</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getString</span><span class="hljs-params">()</span>;<br>&#125;<br><br><br><span class="hljs-meta">@Service(&quot;serverService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServerService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/server&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ServerService server;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/index&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> server.getString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-启动服务提供者"><a href="#5-启动服务提供者" class="headerlink" title="5.启动服务提供者"></a>5.启动服务提供者</h2><p>访问服务提供者所在端口的/server/index路径就能够收到服务提供的字符串。</p><p><img src="/2022/08/14/Eureka+Feign%E5%AE%9E%E7%8E%B0%E4%B8%A4%E4%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8/%E6%88%AA%E5%B1%8F2022-05-24%2018.30.37.png" alt="截屏2022-05-24 18.30.37"></p><p>启动服务提供者后，会自动向配置文件中指定的Eureka服务器进行注册。此时访问之前的Eureka服务器界面，能够看到已经注册的服务信息。</p><p><img src="/2022/08/14/Eureka+Feign%E5%AE%9E%E7%8E%B0%E4%B8%A4%E4%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8/%E6%88%AA%E5%B1%8F2022-05-24%2018.23.05.png"></p><h1 id="4、客户端"><a href="#4、客户端" class="headerlink" title="4、客户端"></a>4、客户端</h1><h2 id="1-主要依赖-2"><a href="#1-主要依赖-2" class="headerlink" title="1.主要依赖"></a>1.主要依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-配置文件-2"><a href="#2-配置文件-2" class="headerlink" title="2.配置文件"></a>2.配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>    <span class="hljs-comment"># 注册中心地址</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8085/eureka/</span><br><span class="hljs-comment"># 应用名称</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">client</span><br><span class="hljs-comment"># 应用端口</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8087</span><br></code></pre></td></tr></table></figure><h2 id="3-主类-2"><a href="#3-主类-2" class="headerlink" title="3.主类"></a>3.主类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ClientApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>@EnableFeignClients：启动对Feign接口的扫描</p><p>@EnableDiscoveryClient：启动对Eureka服务器的发现。</p><h2 id="4-service层、controller层和Feign映射"><a href="#4-service层、controller层和Feign映射" class="headerlink" title="4.service层、controller层和Feign映射"></a>4.service层、controller层和Feign映射</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ClientService</span> &#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTxt</span><span class="hljs-params">()</span>;<br>&#125;<br><br><br><span class="hljs-meta">@Service(&quot;clientService&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ClientService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> FeignService feignService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTxt</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> feignService.getString();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/client&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClientController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ClientService clientService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/index&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;这是调用的server模块的方法：&quot;</span> + clientService.getTxt();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 描述：调用server模块的服务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FeignClient(&quot;SERVER&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">FeignService</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/server/index&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getString</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>类中的接口FeignService将发往该端口的HTTP请求映射为向服务的请求。</p><h2 id="5-启动客户端"><a href="#5-启动客户端" class="headerlink" title="5.启动客户端"></a>5.启动客户端</h2><p>启动客户端，访问客户端所在端口的 /client/index 路径，正确收到了服务提供的字符串。</p><p><img src="/2022/08/14/Eureka+Feign%E5%AE%9E%E7%8E%B0%E4%B8%A4%E4%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8/%E6%88%AA%E5%B1%8F2022-05-24%2019.51.15.png"></p><p>注册服务中心：</p><p><img src="/2022/08/14/Eureka+Feign%E5%AE%9E%E7%8E%B0%E4%B8%A4%E4%B8%AA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8/%E6%88%AA%E5%B1%8F2022-05-24%2019.52.16.png"></p><h1 id="5-Eureka界面警告"><a href="#5-Eureka界面警告" class="headerlink" title="5.Eureka界面警告"></a>5.Eureka界面警告</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY&quot;RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.<br></code></pre></td></tr></table></figure><p>这属于正常现象。Eureka服务器默认开启了自我保护模式。由于没有收到集群中大部分服务器的心跳(本项目中就一个Eureka服务器，所以该服务器不会收到任何心跳，自我保护模式也没有多少影响)，Eureka假定出现了网络问题，开启自我保护模式。在自我保护模式下，已经注册的服务不会因为没有收到心跳而被注销。</p><p>如果要关闭自我保护，可以在配置中设置如下属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">eureka:</span><br>    <span class="hljs-attr">server:</span><br>      <span class="hljs-attr">enable-self-preservation:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>微服务</tag>
      
      <tag>Eureka</tag>
      
      <tag>Feign</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux常用命令</title>
    <link href="/2022/03/04/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/03/04/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="一、文本编辑器Vim"><a href="#一、文本编辑器Vim" class="headerlink" title="一、文本编辑器Vim"></a>一、文本编辑器Vim</h2><p>vim的三种操作模式，分别是命令模式（Command mode）、输入模式（Insert mode）和底线命令模式（Last line mode）。</p><p>三种模式切换快捷键：</p><table><thead><tr><th>模式</th><th>快捷键</th></tr></thead><tbody><tr><td>命令模式</td><td>ESC</td></tr><tr><td>输入模式</td><td>i 或 a</td></tr><tr><td>底线命令模式</td><td>:</td></tr></tbody></table><h3 id="1-命令模式"><a href="#1-命令模式" class="headerlink" title="1.命令模式"></a>1.命令模式</h3><p>常用的快捷操作：</p><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>光标左移</td><td>h</td></tr><tr><td>光标右移</td><td>l (小写L)</td></tr><tr><td>光标上移</td><td>k</td></tr><tr><td>光标下移</td><td>j</td></tr><tr><td>光标移动到下一个单词</td><td>w</td></tr><tr><td>光标移动到上一个单词</td><td>b</td></tr><tr><td>移动游标到第 n 行</td><td>nG</td></tr><tr><td>移动游标到第一行</td><td>g g</td></tr><tr><td>移动游标到最后一行</td><td>G</td></tr><tr><td>快速回到上一次光标所在位置</td><td>Ctrl+o</td></tr><tr><td>删除当前字符</td><td>x</td></tr><tr><td>删除前一个字符</td><td>X</td></tr><tr><td>删除整行</td><td>dd</td></tr><tr><td>删除一个单词</td><td>dw或daw</td></tr><tr><td>删除至行尾</td><td>d$或 D</td></tr><tr><td>删除至行首</td><td>d^</td></tr><tr><td>删除到文档末尾</td><td>dG</td></tr><tr><td>删除至文档首部</td><td>d1G</td></tr><tr><td>删除 n 行</td><td>ndd</td></tr><tr><td>删除 n 个连续字符</td><td>nx</td></tr><tr><td>将光标所在位置字母变成大写或小写</td><td>~</td></tr><tr><td>复制游标所在的整行</td><td>yy（3yy 表示复制 3 行）</td></tr><tr><td>粘贴至光标后（下）</td><td>p</td></tr><tr><td>粘贴至光标后（上）</td><td>P</td></tr><tr><td>剪切</td><td>dd</td></tr><tr><td>交换上下行</td><td>ddp</td></tr><tr><td>替换整行，即删除游标所在行并进入插入模式</td><td>cc</td></tr><tr><td>撤销一次或 n 次操作</td><td>u{n}</td></tr><tr><td>撤销当前行的所有修改</td><td>U</td></tr><tr><td>恢复撤销操作</td><td>Ctrl+r</td></tr><tr><td>整行将向右缩进</td><td>&gt;&gt;</td></tr><tr><td>整行将向左退回</td><td>&lt;&lt;</td></tr><tr><td>若档案没有更动，则不储存离开，若档案已经被更改过，则储存后离开</td><td>ZZ</td></tr></tbody></table><h3 id="2-输入模式"><a href="#2-输入模式" class="headerlink" title="2.输入模式"></a>2.输入模式</h3><p>在命令模式下按 i 或 a 键就进入了输入模式，在输入模式下，您可以正常的使用键盘按键对文本进行插入和删除等操作。</p><h3 id="3-底线命令模式"><a href="#3-底线命令模式" class="headerlink" title="3.底线命令模式"></a>3.底线命令模式</h3><p>在命令模式下按:键就进入了底线命令模式，在底线命令模式中可以输入单个或多个字符的命令。</p><p>常用的快捷操作：</p><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>保存</td><td>:w</td></tr><tr><td>退出</td><td>:q</td></tr><tr><td>保存并退出</td><td>:wq（:wq!表示强制保存退出）</td></tr><tr><td>将文件另存为其他文件名</td><td>:w new_filename</td></tr><tr><td>显示行号</td><td>:set nu</td></tr><tr><td>取消行号</td><td>:set nonu</td></tr><tr><td>使本行内容居中</td><td>:ce</td></tr><tr><td>使本行文本靠右</td><td>:ri</td></tr><tr><td>使本行内容靠左</td><td>:le</td></tr><tr><td>向光标之下寻找一个名称为 word 的字符串</td><td>:/word</td></tr><tr><td>向光标之上寻找一个字符串名称为 word 的字符串</td><td>:?word</td></tr><tr><td>重复前一个搜寻的动作</td><td>:n</td></tr><tr><td>从第一行到最后一行行寻找 word1 字符串，并将该字符串取代为 word2</td><td>:1,$s/word1/word2/g 或 :%s/word1/word2/g</td></tr></tbody></table><h2 id="二、文本文件"><a href="#二、文本文件" class="headerlink" title="二、文本文件"></a>二、文本文件</h2><h3 id="1-文本文件查看命令"><a href="#1-文本文件查看命令" class="headerlink" title="(1)文本文件查看命令"></a>(1)文本文件查看命令</h3><h4 id="1-cat"><a href="#1-cat" class="headerlink" title="1.cat"></a>1.cat</h4><p>命令描述：cat 命令用于查看内容较少的纯文本文件。</p><p>命令格式：cat [选项] [文件]。</p><p>命令参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-n 或 –number</td><td>显示行数</td></tr><tr><td>-b 或–number-nonblank</td><td>显示行号，但是不对空白行进行编号</td></tr><tr><td>-s 或–squeeze-blank</td><td>当遇到有连续两行以上的空白行，只显示一行的空白行</td></tr></tbody></table><p>命令使用示例：</p><p>1、将一个自增序列写入 test.txt 文件中。</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 1 10); <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span> &gt;&gt; test.txt ; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>2、查看文件内容。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> <span class="hljs-keyword">test</span>.txt<br></code></pre></td></tr></table></figure><p>3、命令输出结果：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stata">root@<span class="hljs-keyword">local</span> # <span class="hljs-keyword">cat</span> <span class="hljs-keyword">test</span>.txt<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br></code></pre></td></tr></table></figure><p>4、将文件内容清空。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cat <span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span> &gt; test.txt<br></code></pre></td></tr></table></figure><p>5、再次检查文件内容。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> <span class="hljs-keyword">test</span>.txt<br></code></pre></td></tr></table></figure><p>命令输出结果：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">root@<span class="hljs-keyword">local</span> # <span class="hljs-keyword">cat</span> /dev/null &gt; <span class="hljs-keyword">test</span>.txt<br>root@<span class="hljs-keyword">local</span> # <span class="hljs-keyword">cat</span> <span class="hljs-keyword">test</span>.txt<br>root@<span class="hljs-keyword">local</span> # <br></code></pre></td></tr></table></figure><h4 id="2-more"><a href="#2-more" class="headerlink" title="2.more"></a>2.more</h4><p>命令描述：more 命令从前向后分页显示文件内容。</p><p>常用操作命令：</p><table><thead><tr><th>操作</th><th>作用</th></tr></thead><tbody><tr><td>Enter</td><td>向下 n 行，n 需要定义，默认为 1 行</td></tr><tr><td>Ctrl+F 或空格键（Space）</td><td>向下滚动一页</td></tr><tr><td>Ctrl+B</td><td>向上滚动一页</td></tr><tr><td>=</td><td>输出当前行的行号</td></tr><tr><td>!命令</td><td>调用 Shell 执行命令</td></tr><tr><td>q</td><td>退出 more</td></tr></tbody></table><p>命令使用示例：从第 20 行开始分页查看系统日志文件/var/log/messages。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">more</span> +2 /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/daily.<span class="hljs-keyword">out</span><br></code></pre></td></tr></table></figure><p>命令输出结果：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs gradle">root@local ~ # more +<span class="hljs-number">2</span> <span class="hljs-regexp">/var/</span>log/daily.out<br>Thu Mar <span class="hljs-number">18</span> <span class="hljs-number">09</span>:<span class="hljs-number">54</span>:<span class="hljs-number">58</span> CST <span class="hljs-number">2021</span><br><br>Removing old temporary files:<br><br>Cleaning out old system announcements:<br><br>Removing stale files <span class="hljs-keyword">from</span> <span class="hljs-regexp">/var/</span>rwho:<br><br>Disk status:<br>Filesystem       <span class="hljs-keyword">Size</span>   Used  Avail Capacity iused      ifree %iused  Mounted on<br><span class="hljs-regexp">/dev/</span>disk1s5s1  <span class="hljs-number">233</span>Gi   <span class="hljs-number">14</span>Gi  <span class="hljs-number">150</span>Gi     <span class="hljs-number">9</span>%  <span class="hljs-number">568975</span> <span class="hljs-number">2447532345</span>    <span class="hljs-number">0</span>%   /<br><span class="hljs-regexp">/dev/</span>disk1s4    <span class="hljs-number">233</span>Gi  <span class="hljs-number">3.0</span>Gi  <span class="hljs-number">150</span>Gi     <span class="hljs-number">2</span>%       <span class="hljs-number">4</span> <span class="hljs-number">2448101316</span>    <span class="hljs-number">0</span>%   <span class="hljs-regexp">/System/</span>Volumes/VM<br><span class="hljs-regexp">/dev/</span>disk1s2    <span class="hljs-number">233</span>Gi  <span class="hljs-number">410</span>Mi  <span class="hljs-number">150</span>Gi     <span class="hljs-number">1</span>%    <span class="hljs-number">1563</span> <span class="hljs-number">2448099757</span>    <span class="hljs-number">0</span>%   <span class="hljs-regexp">/System/</span>Volumes/Preboot<br><span class="hljs-regexp">/dev/</span>disk1s6    <span class="hljs-number">233</span>Gi  <span class="hljs-number">2.3</span>Mi  <span class="hljs-number">150</span>Gi     <span class="hljs-number">1</span>%      <span class="hljs-number">16</span> <span class="hljs-number">2448101304</span>    <span class="hljs-number">0</span>%   <span class="hljs-regexp">/System/</span>Volumes/Update<br><span class="hljs-regexp">/dev/</span>disk1s1    <span class="hljs-number">233</span>Gi   <span class="hljs-number">65</span>Gi  <span class="hljs-number">150</span>Gi    <span class="hljs-number">31</span>%  <span class="hljs-number">467200</span> <span class="hljs-number">2447634120</span>    <span class="hljs-number">0</span>%   <span class="hljs-regexp">/System/</span>Volumes/Data<br><br>Network <span class="hljs-keyword">interface</span> status:<br>Name       Mtu   Network       Address            Ipkts Ierrs    Opkts Oerrs  Coll<br><br></code></pre></td></tr></table></figure><h4 id="3-less"><a href="#3-less" class="headerlink" title="3.less"></a>3.less</h4><p>命令描述：less 命令可以对文件或其它输出进行分页显示，与 moe 命令相似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动。</p><p>命令格式：less [参数] 文件。</p><p>命令参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-e</td><td>当文件显示结束后，自动离开</td></tr><tr><td>-m</td><td>显示类似 more 命令的百分比</td></tr><tr><td>-N</td><td>显示每行的行号</td></tr><tr><td>-s</td><td>显示连续空行为一行</td></tr></tbody></table><p>命令常用操作：</p><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>/字符串</td><td>向下搜索字符串</td></tr><tr><td>?字符串</td><td>向上搜索字符串</td></tr><tr><td>n</td><td>重复前一个搜索</td></tr><tr><td>N</td><td>反向重复前一个搜索</td></tr><tr><td>b 或 pageup 键</td><td>向上翻一页</td></tr><tr><td>空格键或 pagedown 键</td><td>向下翻一页</td></tr><tr><td>u</td><td>向前翻半页</td></tr><tr><td>d</td><td>向后翻半页</td></tr><tr><td>y</td><td>向前滚动一行</td></tr><tr><td>回车键</td><td>向后滚动一行</td></tr><tr><td>q</td><td>退出 less 命令</td></tr></tbody></table><p>命令使用示例： 查看命令历史使用记录并通过 less 分页显示。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">history <span class="hljs-string">| less</span><br></code></pre></td></tr></table></figure><h4 id="4-head"><a href="#4-head" class="headerlink" title="4.head"></a>4.head</h4><p>命令描述：head 命令用于查看文件开头指定行数的内容。 </p><p>命令格式：head [参数] [文件]。</p><p>命令参数说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-n [行数]</td><td>显示开头指定行的文件内容，默认为 10</td></tr><tr><td>-c [字符串]</td><td>显示开头指定个数的字符数</td></tr><tr><td>-q</td><td>不显示文件名字信息，适用于多个文件，多文件时默认会显示文件名</td></tr></tbody></table><p>命令使用示例：</p><ul><li> 查看/etc/passwd 文件的前 5 行内容。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">head -<span class="hljs-number">5</span> <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><ul><li>命令输出结果：</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@local ~ # head -<span class="hljs-number">5</span> /etc/passwd<br><span class="hljs-comment">##</span><br><span class="hljs-comment"># User Database</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># Note that this file is consulted directly only when the system is running</span><br><span class="hljs-comment"># in single-user mode.  At other times this information is provided by</span><br></code></pre></td></tr></table></figure><h4 id="5-tail"><a href="#5-tail" class="headerlink" title="5.tail"></a>5.tail</h4><p>命令描述：tail 命令用于查看文档的后 N 行或持续刷新内容。 </p><p>命令格式：tail [参数] [文件]。 </p><p>命令参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-f</td><td>显示文件最新追加的内容</td></tr><tr><td>-q</td><td>当有多个文件参数时，不输出各个文件名</td></tr><tr><td>-v</td><td>当有多个文件参数时，总是输出各个文件名</td></tr><tr><td>-c [字节数]</td><td>显示文件的尾部 n 个字节内容</td></tr><tr><td>-n [行数]</td><td>显示文件的尾部 n 行内容</td></tr></tbody></table><p>命令使用示例：查看/var/log/messages 系统日志文件的最新 10 行，并保持实时刷新。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">tail -f -<span class="hljs-built_in">n</span> <span class="hljs-number">10</span> /<span class="hljs-built_in">var</span>/<span class="hljs-built_in">log</span>/messages<br></code></pre></td></tr></table></figure><p>注：按 ctrl+c 键退出文本实时查看界面。</p><h4 id="6-stat"><a href="#6-stat" class="headerlink" title="6.stat"></a>6.stat</h4><p>命令描述：用来显示文件的详细信息，包括 inode、atime、mtime、ctime 等。 </p><p>命令使用示例： 查看/etc/passwd 文件的详细信息。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">stat <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><h4 id="7-wc"><a href="#7-wc" class="headerlink" title="7.wc"></a>7.wc</h4><p>命令描述：wc 命令用于统计指定文本的行数、字数、字节数。 </p><p>命令格式：wc [参数] [文件]。 </p><p>命令参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-l</td><td>只显示行数</td></tr><tr><td>-w</td><td>只显示单词数</td></tr><tr><td>-c</td><td>只显示字节数</td></tr></tbody></table><p>命令使用示例： 统计/etc/passwd 文件的行数。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wc -l <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><p>命令输出结果： </p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">root@root ~ # wc -l <span class="hljs-regexp">/etc/</span>passwd<br><span class="hljs-number">120</span> <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><h4 id="8-file"><a href="#8-file" class="headerlink" title="8.file"></a>8.file</h4><p>命令描述：file 命令用于辨识文件类型。 </p><p>命令格式：file [参数] [文件]。 </p><p>命令参数说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-b</td><td>列出辨识结果时，不显示文件名称</td></tr><tr><td>-c</td><td>详细显示指令执行过程，便于排错或分析程序执行的情形</td></tr><tr><td>-f [文件]</td><td>指定名称文件，其内容有一个或多个文件名称时，让 file 依序辨识这些文件，格式为每列一个文件名称</td></tr><tr><td>-L</td><td>直接显示符号连接所指向的文件类别</td></tr></tbody></table><p>命令使用示例： 查看/var/log/messages 文件的文件类型。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">file</span> <span class="hljs-regexp">/var/</span>log/messages<br></code></pre></td></tr></table></figure><h4 id="9-diff"><a href="#9-diff" class="headerlink" title="9.diff"></a>9.diff</h4><p>命令描述：diff 命令用于比较文件的差异。 </p><p>命令使用示例： </p><p>1、构造两个相似的文件</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">echo -e &#x27;第一行<span class="hljs-symbol">\n</span> 第二行<span class="hljs-symbol">\n</span> 我是 log1 第 3 行<span class="hljs-symbol">\n</span> 第四行<span class="hljs-symbol">\n</span> 第五行<span class="hljs-symbol">\n</span> 第六行&#x27; &gt; 1.log<br>echo -e &#x27;第一行<span class="hljs-symbol">\n</span> 第二行<span class="hljs-symbol">\n</span> 我是 log2 第 3 行<span class="hljs-symbol">\n</span> 第四行&#x27; &gt; 2.log<br></code></pre></td></tr></table></figure><p>2、分别查看两个文件</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">cat</span> <span class="hljs-number">1.</span><span class="hljs-built_in">log</span><br><span class="hljs-built_in">cat</span> <span class="hljs-number">2.</span><span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>3、使用 diff 查看两个文件的差异</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">root@root ~% diff 1.log 2.log<br>3c3<br><span class="hljs-section">&lt;  我是 log1 第 3 行</span><br><span class="hljs-section">---</span><br>&gt;  我是 log2 第 3 行<br>5,6d4<br>&lt;  第五行<br>&lt;  第六行<br></code></pre></td></tr></table></figure><p>对比结果中的 3c3 表示两个文件在第 3 行有不同，5,6d4 表示 2.log 文件相比 1.log 文件在第 4 行处开始少了 1.log 文件的第 5 和第 6 行。</p><h3 id="2-文本文件处理命令"><a href="#2-文本文件处理命令" class="headerlink" title="(2)文本文件处理命令"></a>(2)文本文件处理命令</h3><h4 id="1-grep"><a href="#1-grep" class="headerlink" title="1.grep"></a>1.grep</h4><p>命令描述：grep 命令用于查找文件里符合条件的字符串。 </p><p>grep 全称是 Global Regular Expression Print，表示全局正则表达式版本，它能使用正则表达式搜索文本，并把匹配的行打印出来。 </p><p>在 Shell 脚本中，grep 通过返回一个状态值来表示搜索的状态： </p><ul><li>0：匹配成功。</li><li>1：匹配失败。</li><li>2：搜索的文件不存在。</li><li>命令格式：grep [参数] [正则表达式] [文件]。</li></ul><p>常用参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-c 或–count</td><td>计算符合样式的列数</td></tr><tr><td>-d recurse 或-r</td><td>指定要查找的是目录而非文件</td></tr><tr><td>-e [范本样式]</td><td>指定字符串做为查找文件内容的样式</td></tr><tr><td>-E 或 –extended-regexp</td><td>将样式为延伸的正则表达式来使用</td></tr><tr><td>-G 或 –basic-regexp</td><td>将样式视为普通的表示法来使用</td></tr><tr><td>-i 或 –ignore-case</td><td>忽略字符大小写的差别</td></tr><tr><td>-n 或 –line-number</td><td>在显示符合样式的那一行之前，标示出该行的列数编号</td></tr><tr><td>-v 或 –revert-match</td><td>显示不包含匹配文本的所有行</td></tr></tbody></table><p>命令使用示例： </p><ul><li>查看 sshd 服务配置文件中监听端口配置所在行编号。</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> -n Port <span class="hljs-regexp">/etc/</span>ssh/ssh_config<br></code></pre></td></tr></table></figure><ul><li>查询字符串在文本中出现的行数。</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> -c localhost <span class="hljs-regexp">/etc/</span>hosts<br></code></pre></td></tr></table></figure><ul><li>反向查找，不显示符合条件的行。</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> sshd<br><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> -v <span class="hljs-keyword">grep</span> | <span class="hljs-keyword">grep</span> sshd<br></code></pre></td></tr></table></figure><ul><li>以递归的方式查找目录下含有关键字的文件。</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">grep -r *<span class="hljs-string">.sh</span> <span class="hljs-string">/etc</span><br></code></pre></td></tr></table></figure><ul><li>使用正则表达式匹配 httpd 配置文件中异常状态码响应的相关配置。</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;ntp[0-9].aliyun.com&#x27;</span> <span class="hljs-regexp">/etc/</span>ntp.conf<br></code></pre></td></tr></table></figure><h4 id="2-sed"><a href="#2-sed" class="headerlink" title="2.sed"></a>2.sed</h4><p>命令描述：sed 是一种流编辑器，它是文本处理中非常中的工具，能够完美的配合正则表达式使用。</p><p>1、处理时，把当前处理的行存储在临时缓冲区中，称为模式空间（pattern space）。 </p><p>2、接着用 sed 命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。 </p><p>3、接着处理下一行，这样不断重复，直到文件末尾。</p><p>注意：</p><ul><li>sed 命令不会修改原文件，例如删除命令只表示某些行不打印输出，而不是从原文件中删去。</li><li>如果要改变源文件，需要使用-i 选项。</li><li>命令格式：sed [参数] [动作] [文件]。</li></ul><p>参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-e [script]</td><td>执行多个 script</td></tr><tr><td>-f [script 文件]</td><td>执行指定 script 文件</td></tr><tr><td>-n</td><td>仅显示 script 处理后的结果</td></tr><tr><td>-i</td><td>输出到原文件，静默执行（修改原文件）</td></tr></tbody></table><p>动作说明：</p><table><thead><tr><th>动作</th><th>说明</th></tr></thead><tbody><tr><td>a</td><td>在行后面增加内容</td></tr><tr><td>c</td><td>替换行</td></tr><tr><td>d</td><td>删除行</td></tr><tr><td>i</td><td>在行前面插入</td></tr><tr><td>p</td><td>打印相关的行</td></tr><tr><td>s</td><td>替换内容</td></tr></tbody></table><p>命令使用示例： </p><ul><li>删除第 3 行到最后一行内容。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sed <span class="hljs-string">&#x27;3,$d&#x27;</span> <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><ul><li>在最后一行新增行。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sed <span class="hljs-string">&#x27;$a admin:x:1000:1000:admin:/home/admin:/bin/bash&#x27;</span> <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><ul><li>替换内容。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sed <span class="hljs-string">&#x27;s/SELINUX=disabled/SELINUX=enforcing/&#x27;</span> <span class="hljs-regexp">/etc/</span>selinux/config<br></code></pre></td></tr></table></figure><ul><li>替换行。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sed <span class="hljs-string">&#x27;1c abcdefg&#x27;</span> <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><h4 id="3-awk"><a href="#3-awk" class="headerlink" title="3.awk"></a>3.awk</h4><p>命令描述：和 sed 命令类似，awk 命令也是逐行扫描文件（从第 1 行到最后一行），寻找含有目标文本的行，如果匹配成功，则会在该行上执行用户想要的操作；反之，则不对行做任何处理。</p><p>命令格式：awk [参数] [脚本] [文件]。</p><p>参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-F fs</td><td>指定以 fs 作为输入行的分隔符，awk 命令默认分隔符为空格或制表符</td></tr><tr><td>-f file</td><td>读取 awk 脚本</td></tr><tr><td>-v val=val</td><td>在执行处理过程之前，设置一个变量 var，并给其设置初始值为 val</td></tr></tbody></table><p>内置变量：</p><table><thead><tr><th>变量</th><th>用途</th></tr></thead><tbody><tr><td>FS</td><td>字段分隔符</td></tr><tr><td>$n</td><td>指定分隔的第 n 个字段，如$1、$3 分别表示第 1、第三列</td></tr><tr><td>$0</td><td>当前读入的整行文本内容</td></tr><tr><td>NF</td><td>记录当前处理行的字段个数（列数）</td></tr><tr><td>NR</td><td>记录当前已读入的行数</td></tr><tr><td>FNR</td><td>当前行在源文件中的行号</td></tr></tbody></table><p>awk 中还可以指定脚本命令的运行时机。默认情况下，awk 会从输入中读取一行文本，然后针对该行的数据执行程序脚本，但有时可能需要在处理数据前运行一些脚本命令，这就需要使用BEGIN 关键字，BEGIN 会在 awsk 读取数据前强制执行该关键字后指定的脚本命令。</p><p>和 BEGIN 关键字相对应，END 关键字允许我们指定一些脚本命令，awk 会在读完数据后执行它们.</p><p>命令使用示例： </p><ul><li>查看本机 IP 地址。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ifconfig</span> eth0 |awk <span class="hljs-string">&#x27;/inet/&#123;print <span class="hljs-variable">$2</span>&#125;&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>查看本机剩余磁盘容量。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">df</span> -h |awk <span class="hljs-string">&#x27;/\/$/&#123;print <span class="hljs-variable">$4</span>&#125;&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>统计系统用户个数。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">awk -F: <span class="hljs-string">&#x27;$3&lt;1000&#123;x++&#125; END&#123;print x&#125;&#x27;</span> <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><ul><li>输出其中登录 Shell 不以 nologin 结尾（对第 7 个字段做!~反向匹配）的用户名、登录 Shell 信息.</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">awk</span> -F: <span class="hljs-string">&#x27;<span class="hljs-variable">$7</span>!~/nologin$/&#123;print <span class="hljs-variable">$1</span>,<span class="hljs-variable">$7</span>&#125;&#x27;</span> /etc/passwd<br></code></pre></td></tr></table></figure><ul><li>输出/etc/passwd 文件中前三行记录的用户名和用户 uid。</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">head -3 /etc/passwd | awk &#x27;BEGIN&#123;FS=<span class="hljs-string">&quot;:&quot;</span>;<span class="hljs-keyword">print</span> <span class="hljs-string">&quot;name\tuid&quot;</span>&#125;&#123;<span class="hljs-keyword">print</span> <span class="hljs-variable">$1</span>,<span class="hljs-string">&quot;\t&quot;</span><span class="hljs-variable">$3&#125;</span>END&#123;<span class="hljs-keyword">print</span> <span class="hljs-string">&quot;sum lines &quot;</span>NR&#125;&#x27;<br></code></pre></td></tr></table></figure><ul><li>查看 tcp 连接数。 </li></ul><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">netstat -na | awk &#x27;/<span class="hljs-symbol">^tcp</span>/ &#123;++<span class="hljs-keyword">S</span>[<span class="hljs-built_in">$NF</span>]&#125; END &#123;<span class="hljs-keyword">for</span>(a in <span class="hljs-keyword">S</span>) <span class="hljs-keyword">print</span> a, <span class="hljs-keyword">S</span>[a]&#125;&#x27;<br></code></pre></td></tr></table></figure><ul><li>关闭指定服务的所有的进程。</li></ul><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">ps -ef | <span class="hljs-type">grep</span> httpd | <span class="hljs-type">awk</span> &#123;&#x27;print $<span class="hljs-number">2</span>&#x27;&#125; | <span class="hljs-type">xargs</span> kill <span class="hljs-number">-9</span><br></code></pre></td></tr></table></figure><h4 id="4-cut"><a href="#4-cut" class="headerlink" title="4.cut"></a>4.cut</h4><p>命令描述：cut 命令主要用来切割字符串，可以对输入的数据进行切割然后输出。 </p><p>命令格式：cut [参数] [文件]。</p><p>参数说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-b</td><td>以字节为单位进行分割</td></tr><tr><td>-c</td><td>以字符为单位进行分割</td></tr><tr><td>-d</td><td>自定义分隔符，默认为制表符</td></tr></tbody></table><p>命令使用示例： </p><ul><li>按字节进行切割。</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@local ~ # echo <span class="hljs-string">&quot;Hello World&quot;</span> | cut -b <span class="hljs-number">1</span>,<span class="hljs-number">3</span>   <br><span class="hljs-attribute">Hl</span><br></code></pre></td></tr></table></figure><ul><li>按字符进行切割。</li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">root<span class="hljs-symbol">@local</span> ~ <span class="hljs-meta"># echo <span class="hljs-string">&quot;h和o&quot;</span> | cut -c 2  </span><br>和<br></code></pre></td></tr></table></figure><ul><li>按指定字符进行切割。</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@local ~ # echo <span class="hljs-string">&quot;hello,world,ok&quot;</span> | cut -d , -f <span class="hljs-number">1</span>,<span class="hljs-number">3</span><br><span class="hljs-attribute">hello</span>,ok<br></code></pre></td></tr></table></figure><h4 id="5-tr"><a href="#5-tr" class="headerlink" title="5.tr"></a>5.tr</h4><p>命令描述：tr 命令用于对来自标准输入的字符进行替换、压缩和删除。 </p><p>命令格式：tr [参数] [文本]。 </p><p>参数说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-c</td><td>反选指定字符</td></tr><tr><td>-d</td><td>删除指定字符</td></tr><tr><td>-s</td><td>将重复的字符缩减成一个字符</td></tr><tr><td>-t [第一字符集] [第二字符集]</td><td>删除第一字符集较第二字符集多出的字符，使两个字符集长度相等</td></tr></tbody></table><p>命令使用示例： </p><ul><li>将输入字符由大写转换为小写。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;HELLO WORLD&quot;</span> | <span class="hljs-built_in">tr</span> <span class="hljs-string">&#x27;A-Z&#x27;</span> <span class="hljs-string">&#x27;a-z&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>删除字符。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello 123 world 456&quot;</span> | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;0-9&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>压缩字符。 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;thissss is a text linnnnnnne.&quot;</span> | <span class="hljs-built_in">tr</span> -s <span class="hljs-string">&#x27; sn&#x27;</span><br></code></pre></td></tr></table></figure><ul><li>产生随机密码。 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /dev/urandom | <span class="hljs-built_in">tr</span> -dc a-zA-Z0-9 | <span class="hljs-built_in">head</span> -c 13<br></code></pre></td></tr></table></figure><h2 id="三、常用系统工作命令"><a href="#三、常用系统工作命令" class="headerlink" title="三、常用系统工作命令"></a>三、常用系统工作命令</h2><h3 id="1-echo"><a href="#1-echo" class="headerlink" title="1.echo"></a>1.echo</h3><p>命令描述：echo 命令用于在终端输出字符串或变量提取后的值。 </p><p>命令格式：echo [字符串 | $变量]。 </p><p>命令用法示例： </p><p>1、显示普通字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello World&quot;</span><br></code></pre></td></tr></table></figure><p>2、显示变量</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">中定义一个临时变量 name ： <span class="hljs-built_in">export</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Tom&quot;</span><br>显示变量：echo <span class="hljs-variable">$name</span><br></code></pre></td></tr></table></figure><p>3、显示结果定向至文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;This is a test text.&quot;</span> &gt; test.txt<br></code></pre></td></tr></table></figure><p>注：命令会将文本 This is a test text.输出重定向到文件 test.txt 中，如果文件已存在，将会覆盖文件内容，如果不存在则创建。其中&gt;符号表示输出重定向。如果您希望将文本追加到文件内容最后，而不是覆盖它，请使用&gt;&gt;输出追加重定向符号。</p><p>4、显示命令执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">pwd</span>`<br></code></pre></td></tr></table></figure><p>注意：pwd 命令是用一对反引号（``）包裹，而不是一对单引号（’’）。使用$(command)形式可以达到相同效果。</p><h3 id="2-date"><a href="#2-date" class="headerlink" title="2.date"></a>2.date</h3><p>命令描述：date 命令用于显示和设置系统的时间和日期。</p><p>命令格式：date [选项] [+格式]。 </p><p>其中，时间格式的部分控制字符解释如下：</p><table><thead><tr><th>字符</th><th>说明</th></tr></thead><tbody><tr><td>%a</td><td>当地时间的星期名缩写（例如： 日，代表星期日）</td></tr><tr><td>%A</td><td>当地时间的星期名全称 （例如：星期日）</td></tr><tr><td>%b</td><td>当地时间的月名缩写 （例如：一，代表一月）</td></tr><tr><td>%B</td><td>当地时间的月名全称 （例如：一月）</td></tr><tr><td>%c</td><td>当地时间的日期和时间 （例如：2005 年 3 月 3 日 星期四 23:05:25）</td></tr><tr><td>%C</td><td>世纪；比如 %Y，通常为省略当前年份的后两位数字（例如：20）</td></tr><tr><td>%d</td><td>按月计的日期（例如：01）</td></tr><tr><td>%D</td><td>按月计的日期；等于%m/%d/%y</td></tr><tr><td>%F</td><td>完整日期格式，等价于 %Y-%m-%d</td></tr><tr><td>%j</td><td>按年计的日期（001-366）</td></tr><tr><td>%p</td><td>按年计的日期（001-366）</td></tr><tr><td>%r</td><td>当地时间下的 12 小时时钟时间 （例如：11:11:04 下午）</td></tr><tr><td>%R</td><td>24 小时时间的时和分，等价于 %H:%M</td></tr><tr><td>%s</td><td>自 UTC 时间 1970-01-01 00:00:00 以来所经过的秒数</td></tr><tr><td>%T</td><td>时间，等于%H:%M:%S</td></tr><tr><td>%U</td><td>一年中的第几周，以周日为每星期第一天（00-53）</td></tr><tr><td>%x</td><td>当地时间下的日期描述 （例如：12/31/99）</td></tr><tr><td>%X</td><td>当地时间下的时间描述 （例如：23:13:48）</td></tr><tr><td>%w</td><td>一星期中的第几日（0-6），0 代表周一</td></tr><tr><td>%W</td><td>一年中的第几周，以周一为每星期第一天（00-53）</td></tr></tbody></table><p>命令用法示例： </p><ul><li>按照默认格式查看当前系统时间</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">date</span><br></code></pre></td></tr></table></figure><ul><li>按照指定格式查看当前系统时间 </li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">date <span class="hljs-string">&quot;+%Y-%m-%d %H:%M:%S&quot;</span><br></code></pre></td></tr></table></figure><ul><li>查看今天是当年中的第几天 </li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">date</span> <span class="hljs-string">&quot;+%j&quot;</span> <br></code></pre></td></tr></table></figure><ul><li>将系统的当前时间设置为 2020 年 02 月 20 日 20 点 20 分 20 秒 </li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">date</span> -s <span class="hljs-string">&quot;20200220 20:20:20&quot;</span> <br></code></pre></td></tr></table></figure><ul><li>校正系统时间，与网络时间同步 </li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">A</span>、安装 ntp 校时工具 <br>yum -y install ntp <br><span class="hljs-selector-tag">B</span>、用 ntpdate 从时间服务器更新时间 <br>ntpdate <span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.nist</span><span class="hljs-selector-class">.gov</span><br></code></pre></td></tr></table></figure><h3 id="3-wget"><a href="#3-wget" class="headerlink" title="3.wget"></a>3.wget</h3><p>命令描述：在终端中下载文件。 </p><p>命令格式：wget [参数] 下载地址。</p><p>参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-b</td><td>后台下载</td></tr><tr><td>-P</td><td>下载到指定目录</td></tr><tr><td>-d</td><td>最大重试次数</td></tr><tr><td>-c</td><td>断点续传</td></tr><tr><td>-p</td><td>下载页面内所有资源，包括图片、视频等</td></tr><tr><td>-r</td><td>递归下载</td></tr></tbody></table><p>命令使用示例： </p><ul><li>下载一张图片到路径/root/static/img/中，-p 参数默认值为当前路径，如果指定路径不存在会自动创建。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget -P <span class="hljs-regexp">/root/</span>static<span class="hljs-regexp">/img/</span> http:<span class="hljs-regexp">//img</span>.alicdn.com<span class="hljs-regexp">/tfs/</span>TB1.R._t7L0gK0jSZFxXXXWHVXa-<span class="hljs-number">2666</span>-<span class="hljs-number">1500</span>.png<br></code></pre></td></tr></table></figure><h3 id="4-ps"><a href="#4-ps" class="headerlink" title="4.ps"></a>4.ps</h3><p>命令描述：ps 命令用于查看系统中的进程状态。 </p><p>命令格式：ps [参数]。</p><p>命令参数说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-a</td><td>显示现行终端机下的所有程序，包括其他用户的程序</td></tr><tr><td>-u</td><td>以用户为主的格式来显示程序状况</td></tr><tr><td>-x</td><td>显示没有控制终端的进程，同时显示各个命令的具体路径</td></tr><tr><td>-e</td><td>列出程序时，显示每个程序所使用的环境变量</td></tr><tr><td>-f</td><td>显示当前所有的进程</td></tr><tr><td>-t</td><td>指定终端机编号，并列出属于该终端机的程序的状况</td></tr></tbody></table><p>命令使用示例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@root ~ # ps -ef | grep sshd<br><span class="hljs-attribute">501</span> <span class="hljs-number">21963</span> <span class="hljs-number">86819</span>   <span class="hljs-number">0</span>  <span class="hljs-number">1</span>:<span class="hljs-number">56</span>下午 ttys000    <span class="hljs-number">0</span>:<span class="hljs-number">00</span>.<span class="hljs-number">00</span> grep sshd<br></code></pre></td></tr></table></figure><h3 id="5-top"><a href="#5-top" class="headerlink" title="5.top"></a>5.top</h3><p>命令描述：top 命令动态地监视进程活动与系统负载等信息。 </p><p>命令使用示例： </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@root ~ # top<br><br><span class="hljs-attribute">Processes</span>: <span class="hljs-number">324</span> total, <span class="hljs-number">4</span> running, <span class="hljs-number">320</span> sleeping, <span class="hljs-number">1891</span> threads            <span class="hljs-number">13</span>:<span class="hljs-number">59</span>:<span class="hljs-number">45</span><br><span class="hljs-attribute">Load</span> Avg: <span class="hljs-number">1</span>.<span class="hljs-number">77</span>, <span class="hljs-number">2</span>.<span class="hljs-number">53</span>, <span class="hljs-number">3</span>.<span class="hljs-number">43</span>  CPU usage: <span class="hljs-number">5</span>.<span class="hljs-number">78</span>% user, <span class="hljs-number">6</span>.<span class="hljs-number">98</span>% sys, <span class="hljs-number">87</span>.<span class="hljs-number">22</span>% idle<br><span class="hljs-attribute">SharedLibs</span>: <span class="hljs-number">266</span>M resident, <span class="hljs-number">38</span>M data, <span class="hljs-number">37</span>M linkedit.<br><span class="hljs-attribute">MemRegions</span>: <span class="hljs-number">121485</span> total, <span class="hljs-number">1341</span>M resident, <span class="hljs-number">51</span>M private, <span class="hljs-number">606</span>M shared.<br><span class="hljs-attribute">PhysMem</span>: <span class="hljs-number">8032</span>M used (<span class="hljs-number">1958</span>M wired), <span class="hljs-number">160</span>M unused.<br><span class="hljs-attribute">VM</span>: <span class="hljs-number">3230</span>G vsize, <span class="hljs-number">2322</span>M framework vsize, <span class="hljs-number">20790020</span>(<span class="hljs-number">0</span>) swapins, <span class="hljs-number">21375426</span>(<span class="hljs-number">0</span>) swapout<br><span class="hljs-attribute">Networks</span>: packets: <span class="hljs-number">4939487</span>/<span class="hljs-number">5981</span>M in, <span class="hljs-number">2388265</span>/<span class="hljs-number">1580</span>M out.<br><span class="hljs-attribute">Disks</span>: <span class="hljs-number">4293856</span>/<span class="hljs-number">127</span>G read, <span class="hljs-number">1752366</span>/<span class="hljs-number">104</span>G written.<br><br><span class="hljs-attribute">PID</span>    COMMAND      %CPU TIME     #TH   #WQ  #PORT MEM    PURG   CMPRS  PGRP<br><span class="hljs-attribute">96998</span>  wpsoffice    <span class="hljs-number">5</span>.<span class="hljs-number">2</span>  <span class="hljs-number">29</span>:<span class="hljs-number">56</span>.<span class="hljs-number">88</span> <span class="hljs-number">71</span>    <span class="hljs-number">1</span>    <span class="hljs-number">464</span>   <span class="hljs-number">1917</span>M  <span class="hljs-number">0</span>B     <span class="hljs-number">1520</span>M  <span class="hljs-number">96998</span><br><span class="hljs-attribute">54253</span>  wpscloudsvr  <span class="hljs-number">4</span>.<span class="hljs-number">3</span>  <span class="hljs-number">07</span>:<span class="hljs-number">26</span>.<span class="hljs-number">99</span> <span class="hljs-number">84</span>    <span class="hljs-number">1</span>    <span class="hljs-number">345</span>   <span class="hljs-number">55</span>M    <span class="hljs-number">0</span>B     <span class="hljs-number">36</span>M    <span class="hljs-number">54253</span><br><span class="hljs-attribute">140</span>    WindowServer <span class="hljs-number">3</span>.<span class="hljs-number">8</span>  <span class="hljs-number">01</span>:<span class="hljs-number">48</span>:<span class="hljs-number">34</span> <span class="hljs-number">13</span>/<span class="hljs-number">1</span>  <span class="hljs-number">5</span>    <span class="hljs-number">2322</span>+ <span class="hljs-number">812</span>M-  <span class="hljs-number">2828</span>K- <span class="hljs-number">140</span>M-  <span class="hljs-number">140</span><br><span class="hljs-attribute">23547</span>  top          <span class="hljs-number">3</span>.<span class="hljs-number">5</span>  <span class="hljs-number">00</span>:<span class="hljs-number">00</span>.<span class="hljs-number">97</span> <span class="hljs-number">1</span>/<span class="hljs-number">1</span>   <span class="hljs-number">0</span>    <span class="hljs-number">29</span>+   <span class="hljs-number">4080</span>K  <span class="hljs-number">0</span>B     <span class="hljs-number">0</span>B     <span class="hljs-number">23547</span><br><span class="hljs-attribute">25997</span>  Terminal     <span class="hljs-number">2</span>.<span class="hljs-number">6</span>  <span class="hljs-number">03</span>:<span class="hljs-number">49</span>.<span class="hljs-number">54</span> <span class="hljs-number">11</span>    <span class="hljs-number">5</span>    <span class="hljs-number">344</span>   <span class="hljs-number">59</span>M-   <span class="hljs-number">10</span>M+   <span class="hljs-number">14</span>M    <span class="hljs-number">25997</span><br><span class="hljs-attribute">0</span>      kernel_task  <span class="hljs-number">2</span>.<span class="hljs-number">1</span>  <span class="hljs-number">66</span>:<span class="hljs-number">32</span>.<span class="hljs-number">59</span> <span class="hljs-number">178</span>/<span class="hljs-number">4</span> <span class="hljs-number">0</span>    <span class="hljs-number">0</span>     <span class="hljs-number">1138</span>M- <span class="hljs-number">0</span>B     <span class="hljs-number">0</span>B     <span class="hljs-number">0</span><br><span class="hljs-attribute">94</span>     diskarbitrat <span class="hljs-number">1</span>.<span class="hljs-number">7</span>  <span class="hljs-number">02</span>:<span class="hljs-number">28</span>.<span class="hljs-number">59</span> <span class="hljs-number">2</span>     <span class="hljs-number">1</span>    <span class="hljs-number">247</span>+  <span class="hljs-number">1224</span>K  <span class="hljs-number">0</span>B     <span class="hljs-number">548</span>K   <span class="hljs-number">94</span><br><span class="hljs-attribute">402</span>    QQ           <span class="hljs-number">1</span>.<span class="hljs-number">6</span>  <span class="hljs-number">32</span>:<span class="hljs-number">42</span>.<span class="hljs-number">66</span> <span class="hljs-number">35</span>    <span class="hljs-number">16</span>   <span class="hljs-number">1043</span>  <span class="hljs-number">414</span>M   <span class="hljs-number">16</span>K    <span class="hljs-number">341</span>M   <span class="hljs-number">402</span><br><span class="hljs-attribute">451</span>    QQLive       <span class="hljs-number">1</span>.<span class="hljs-number">6</span>  <span class="hljs-number">37</span>:<span class="hljs-number">37</span>.<span class="hljs-number">05</span> <span class="hljs-number">78</span>    <span class="hljs-number">12</span>   <span class="hljs-number">1006</span>  <span class="hljs-number">492</span>M   <span class="hljs-number">0</span>B     <span class="hljs-number">376</span>M   <span class="hljs-number">451</span><br><span class="hljs-attribute">1</span>      launchd      <span class="hljs-number">1</span>.<span class="hljs-number">0</span>  <span class="hljs-number">03</span>:<span class="hljs-number">15</span>.<span class="hljs-number">43</span> <span class="hljs-number">4</span>     <span class="hljs-number">3</span>    <span class="hljs-number">5037</span>+ <span class="hljs-number">26</span>M+   <span class="hljs-number">0</span>B     <span class="hljs-number">15</span>M-   <span class="hljs-number">1</span><br><span class="hljs-attribute">745</span>    LemonMonitor <span class="hljs-number">0</span>.<span class="hljs-number">8</span>  <span class="hljs-number">05</span>:<span class="hljs-number">36</span>.<span class="hljs-number">48</span> <span class="hljs-number">14</span>    <span class="hljs-number">5</span>    <span class="hljs-number">429</span>   <span class="hljs-number">30</span>M-   <span class="hljs-number">396</span>K+  <span class="hljs-number">16</span>M    <span class="hljs-number">745</span><br><span class="hljs-attribute">63936</span>  com.apple.We <span class="hljs-number">0</span>.<span class="hljs-number">4</span>  <span class="hljs-number">02</span>:<span class="hljs-number">55</span>.<span class="hljs-number">49</span> <span class="hljs-number">4</span>     <span class="hljs-number">2</span>    <span class="hljs-number">106</span>+  <span class="hljs-number">297</span>M+  <span class="hljs-number">0</span>B     <span class="hljs-number">198</span>M-  <span class="hljs-number">63936</span><br><span class="hljs-attribute">6784</span>   com.apple.We <span class="hljs-number">0</span>.<span class="hljs-number">3</span>  <span class="hljs-number">04</span>:<span class="hljs-number">13</span>.<span class="hljs-number">45</span> <span class="hljs-number">6</span>     <span class="hljs-number">1</span>    <span class="hljs-number">108</span>   <span class="hljs-number">147</span>M-  <span class="hljs-number">0</span>B     <span class="hljs-number">21</span>M    <span class="hljs-number">6784</span><br><span class="hljs-attribute">390</span>    cfprefsd     <span class="hljs-number">0</span>.<span class="hljs-number">3</span>  <span class="hljs-number">03</span>:<span class="hljs-number">47</span>.<span class="hljs-number">93</span> <span class="hljs-number">3</span>     <span class="hljs-number">2</span>    <span class="hljs-number">353</span>+  <span class="hljs-number">1572</span>K+ <span class="hljs-number">4096</span>B+ <span class="hljs-number">196</span>K   <span class="hljs-number">390</span><br></code></pre></td></tr></table></figure><p>命令输出参数解释： </p><p>以上命令输出视图中分为两个区域，一个统计信息区，一个进程信息区。 </p><p>1、统计信息区 </p><ul><li>第一行信息依次为：系统时间、运行时间、登录终端数、系统负载（三个数值分别为 1 分钟、5 分钟、15 分钟内的平均值，数值越小意味着负载越低）。 </li><li>第二行信息依次为：进程总数、运行中的进程数、睡眠中的进程数、停止的进程数、僵死的进程数。</li><li>第三行信息依次为：用户占用资源百分比、系统内核占用资源百分比、改变过优先级的进程资源百分比、空闲的资源百分比等。</li><li>第四行信息依次为：物理内存总量、内存使用量、内存空闲量、作为内核缓存的内存量。第五行信息依次为：虚拟内存总量、虚拟内存使用量、虚拟内存空闲量、预加载内存量。</li></ul><p>2、进程信息区</p><table><thead><tr><th>列名</th><th>含义</th></tr></thead><tbody><tr><td>PID</td><td>进程 ID</td></tr><tr><td>USER</td><td>进程所有者的用户名</td></tr><tr><td>PR</td><td>进程优先级</td></tr><tr><td>NI</td><td>nice 值。负值表示高优先级，正值表示低优先级</td></tr><tr><td>VIRT</td><td>进程使用的虚拟内存总量，单位 kb</td></tr><tr><td>RES</td><td>进程使用的、未被换出的物理内存大小，单位 kb</td></tr><tr><td>SHR</td><td>共享内存大小，单位 kb</td></tr><tr><td>S</td><td>进程状态 D：不可中断的睡眠状态, R：正在运行, S：睡眠, T：停止, Z：僵尸进程</td></tr><tr><td>%CPU</td><td>上次更新到现在的 CPU 时间占用百分比</td></tr><tr><td>%MEM</td><td>进程使用的物理内存百分比</td></tr><tr><td>TIME+</td><td>进程使用的 CPU 时间总计，单位 1/100 秒</td></tr><tr><td>COMMAND</td><td>命令名</td></tr></tbody></table><p>注：按 q 键退出监控页面。</p><h3 id="6-pidof"><a href="#6-pidof" class="headerlink" title="6.pidof"></a>6.pidof</h3><p>命令描述：pidof 命令用于查询指定服务进程的 PID 值。 </p><p>命令格式：pidof [服务名称]。 </p><p>命令参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-s</td><td>仅返回一个进程号</td></tr><tr><td>-c</td><td>只显示运行在 root 目录下的进程，这个选项只对 root 用户有效</td></tr><tr><td>-o</td><td>忽略指定进程号的进程</td></tr><tr><td>-x</td><td>显示由脚本开启的进程</td></tr></tbody></table><p>命令使用示例： </p><ul><li>查询出 crond 服务下的所有进程 ID。 </li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pidof crond</span><br></code></pre></td></tr></table></figure><h3 id="7-kill"><a href="#7-kill" class="headerlink" title="7.kill"></a>7.kill</h3><p>命令描述：kill 命令用于终止指定 PID 的服务进程。 </p><p>kill 可将指定的信息送至程序。预设的信息为 SIGTERM(15)，可将指定程序终止。若仍无法终止该程序，可使用 SIGKILL(9)信息尝试强制删除程序。 </p><p>命令格式：kill [参数] [进程 PID]。 </p><p>命令使用示例： </p><p>删除 pid 为 1247 的进程。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">kill</span> -<span class="hljs-number">9</span> <span class="hljs-number">1247</span><br></code></pre></td></tr></table></figure><h3 id="8-killall"><a href="#8-killall" class="headerlink" title="8.killall"></a>8.killall</h3><p>命令描述：killall 命令用于终止指定名称的服务对应的全部进程。 </p><p>命令格式：killall [进程名称]。 </p><p>命令使用示例： </p><p>删除 crond 服务下的所有进程。 </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">killall crond</span><br></code></pre></td></tr></table></figure><h3 id="9-reboot"><a href="#9-reboot" class="headerlink" title="9.reboot"></a>9.reboot</h3><p>命令描述：reboot 命令用来重启系统。 </p><p>命令格式：reboot [-n] [-w] [-d] [-f] [-i]。 </p><p>命令参数说明： </p><ul><li>-n：保存数据后再重新启动系统。 </li><li>-w：仅做测试，并不是真的将系统重新开机，只会把重新开机的数据写入记录文件/var/log/wtmp。 </li><li>-d：重新启动时不把数据写入记录文件/var/tmp/wtmp。</li><li>-f：强制重新开机，不调用 shutdown 指令的功能。</li><li>-i：关闭网络设置之后再重新启动系统。 </li></ul><p>命令使用示例： </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">reboot</span><br></code></pre></td></tr></table></figure><h3 id="10-poweroff"><a href="#10-poweroff" class="headerlink" title="10.poweroff"></a>10.poweroff</h3><p>命令描述：poweroff 命令用来关闭系统。 </p><p>命令使用示例： </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">poweroff</span><br></code></pre></td></tr></table></figure><h2 id="四、系统状态检测命令"><a href="#四、系统状态检测命令" class="headerlink" title="四、系统状态检测命令"></a>四、系统状态检测命令</h2><h3 id="1-ifconfig"><a href="#1-ifconfig" class="headerlink" title="1.ifconfig"></a>1.ifconfig</h3><p>命令描述：ifconfig 命令用于获取网卡配置与网络状态等信息。</p><h3 id="2-uname"><a href="#2-uname" class="headerlink" title="2.uname"></a>2.uname</h3><p>命令描述：uname 命令用于查看系统内核与系统版本等信息。 </p><p>命令语法：uname  [-amnrsv] [–help] [–version]</p><p>命令使用示例： </p><ul><li>显示系统信息。 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -a <br></code></pre></td></tr></table></figure><ul><li>显示当前系统的硬件架构。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -i<br></code></pre></td></tr></table></figure><ul><li>显示操作系统发行编号。 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -r<br></code></pre></td></tr></table></figure><ul><li>显示操作系统名称。 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -s <br></code></pre></td></tr></table></figure><ul><li>显示主机名称。 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -n <br></code></pre></td></tr></table></figure><h3 id="3-uptime"><a href="#3-uptime" class="headerlink" title="3.uptime"></a>3.uptime</h3><p>命令描述：uptime 用于查看系统的负载信息。 </p><p>命令输出说明： </p><table><thead><tr><th>负载信息</th><th>命令输出值</th></tr></thead><tbody><tr><td>当前服务器时间</td><td>14:18</td></tr><tr><td>当前服务器运行时长</td><td>1day</td></tr><tr><td>当前用户数</td><td>2 users</td></tr><tr><td>当前负载情况</td><td>load average: 0.03, 0.04, 0.02（分别取 1min，5min，15min 的均值）</td></tr></tbody></table><h3 id="4-free"><a href="#4-free" class="headerlink" title="4.free"></a>4.free</h3><p>命令描述：free 用于显示当前系统中内存的使用量信息。 </p><p>命令语法：free  [-bkmotV] [-s &lt;间隔秒数&gt;]。 </p><p>命令参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-b</td><td>以 Byte 为单位显示内存使用情况</td></tr><tr><td>-k</td><td>以 KB 为单位显示内存使用情况</td></tr><tr><td>-m</td><td>以 MB 为单位显示内存使用情况</td></tr><tr><td>-h</td><td>以合适的单位显示内存使用情况，最大为三位数，自动计算对应的单位值。</td></tr></tbody></table><p>命令输出说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>total</td><td>物理内存总数</td></tr><tr><td>used</td><td>已经使用的内存数</td></tr><tr><td>free</td><td>空间的内存数</td></tr><tr><td>share</td><td>多个进程共享的内存总额</td></tr><tr><td>buff/cache</td><td>应用使用内存数</td></tr><tr><td>available</td><td>可用的内存数</td></tr><tr><td>Swap</td><td>虚拟内存</td></tr></tbody></table><h3 id="5-who"><a href="#5-who" class="headerlink" title="5.who"></a>5.who</h3><p>命令描述：who 命令显示关于当前在本地系统上的所有用户的信息。</p><p>命令使用示例： </p><ul><li>显示当前登录系统的用户 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">who</span><br></code></pre></td></tr></table></figure><ul><li>显示用户登录来源</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">who</span> -l -H<br></code></pre></td></tr></table></figure><ul><li>只显示当前用户</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">who</span> -m -H<br></code></pre></td></tr></table></figure><ul><li>精简模式显示</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">who</span> -q<br></code></pre></td></tr></table></figure><h3 id="6-last"><a href="#6-last" class="headerlink" title="6.last"></a>6.last</h3><p>命令描述： last 命令用于显示用户最近登录信息。 </p><p>命令使用示例：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@root ~ # last<br><span class="hljs-attribute">root</span>  ttys000                   Sat Mar  <span class="hljs-number">5</span> <span class="hljs-number">12</span>:<span class="hljs-number">40</span>   still logged in<br><span class="hljs-attribute">root</span>  ttys000                   Sat Mar  <span class="hljs-number">5</span> <span class="hljs-number">12</span>:<span class="hljs-number">40</span> - <span class="hljs-number">12</span>:<span class="hljs-number">40</span>  (<span class="hljs-number">00</span>:<span class="hljs-number">00</span>)<br><span class="hljs-attribute">root</span>  ttys000                   Sat Mar  <span class="hljs-number">5</span> <span class="hljs-number">12</span>:<span class="hljs-number">12</span> - <span class="hljs-number">12</span>:<span class="hljs-number">12</span>  (<span class="hljs-number">00</span>:<span class="hljs-number">00</span>)<br><span class="hljs-attribute">root</span>  ttys000                   Sat Mar  <span class="hljs-number">5</span> <span class="hljs-number">11</span>:<span class="hljs-number">52</span> - <span class="hljs-number">11</span>:<span class="hljs-number">52</span>  (<span class="hljs-number">00</span>:<span class="hljs-number">00</span>)<br><span class="hljs-attribute">root</span>  ttys000                   Fri Mar  <span class="hljs-number">4</span> <span class="hljs-number">23</span>:<span class="hljs-number">04</span> - <span class="hljs-number">23</span>:<span class="hljs-number">04</span>  (<span class="hljs-number">00</span>:<span class="hljs-number">00</span>)<br><span class="hljs-attribute">root</span>  ttys000                   Fri Mar  <span class="hljs-number">4</span> <span class="hljs-number">22</span>:<span class="hljs-number">42</span> - <span class="hljs-number">22</span>:<span class="hljs-number">42</span>  (<span class="hljs-number">00</span>:<span class="hljs-number">00</span>)<br></code></pre></td></tr></table></figure><p>注：由于这些信息都是以日志文件的形式保存在系统中，黑客可以很容易地对内容进行篡改，所以该命令输出的信息并不能作为服务器是否被入侵的依据。</p><h3 id="7-history"><a href="#7-history" class="headerlink" title="7.history"></a>7.history</h3><p>命令描述：history 命令用于显示历史执行过的命令。 </p><p>bash 默认记录 1000 条执行过的历史命令，被记录在~/.bash_history 文件中。 </p><p>命令使用示例： </p><ul><li>显示最新 10 条执行过的命令。</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">history</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><ul><li>清除历史记录。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">history</span> -c<br></code></pre></td></tr></table></figure><h2 id="五、磁盘管理命令"><a href="#五、磁盘管理命令" class="headerlink" title="五、磁盘管理命令"></a>五、磁盘管理命令</h2><h3 id="1-df命令"><a href="#1-df命令" class="headerlink" title="1.df命令"></a>1.df命令</h3><p>df 命令描述：该命令检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><p>df 命令语法：df [参数] [目录或文件名]。 </p><p>参数说明：</p><ul><li>-a 列出所有的文件系统，包括系统特有的/proc 等文件系统。 </li><li>-k 以 KBytes 为单位，返回各文件系统容量。 </li><li>-m 以 MBytes 为单位，返回各文件系统容量。 </li><li>-h 以 GBytes、MBytes、KBytes 为单位，返回各文件系统容量。</li><li>-H 以 M=1000K 取代 M=1024K 的进位方式显示各文件系统容量。 </li><li>-T 显示文件系统类型。 </li><li>-i 显示 inode 信息。</li></ul><p>df 命令使用示例： </p><p>示例一：显示磁盘使用情况。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span><br></code></pre></td></tr></table></figure><p>示例二：以 inode 模式来显示磁盘使用情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -i<br></code></pre></td></tr></table></figure><p>示例三：显示系统内的所有特殊文件格式、名称及磁盘使用情况。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">df -<span class="hljs-keyword">aT</span><br></code></pre></td></tr></table></figure><p>示例四：以 GBytes、MBytes、KBytes 等格式显示各文件系统容量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">df</span> -h<br></code></pre></td></tr></table></figure><h3 id="2-du命令"><a href="#2-du命令" class="headerlink" title="2.du命令"></a>2.du命令</h3><p>du 命令描述：查看磁盘使用空间。du 与 df 命令不同点在于，du 命令用于查看文件和目录磁盘的使用空间。</p><p>du 命令语法：du [参数] [文件或目录名称]。 </p><p>参数说明： </p><ul><li>-a 列出所有的文件与目录容量。 </li><li>-h 以 G、M、K 为单位，返回容量。 </li><li>-s 列出总量。</li><li>列出不包括子目录下的总量。 </li><li>-k 以 KBytes 为单位，返回容量。 </li><li>-m 以 MBytes 为单位，返回容量。 </li></ul><p>du 命令使用示例： </p><p>示例一：列出当前目录下的所有文件夹的容量。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span><br></code></pre></td></tr></table></figure><p>示例二：列出当前目录下的所有文件夹和文件的容量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -a<br></code></pre></td></tr></table></figure><p>示例三：列出当前目录下的所有文件夹和文件的容量，并以 G、M、K 格式显示容量。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">du</span> -ah<br></code></pre></td></tr></table></figure><h3 id="3-fdisk-命令"><a href="#3-fdisk-命令" class="headerlink" title="3.fdisk 命令"></a>3.fdisk 命令</h3><p>fdisk 命令描述：该命令用于磁盘分区。 </p><p>fdisk 命令语法：fdisk [-l] 装置名称。 </p><p>参数说明：</p><ul><li>-l 输出后面装置名称的所有的分区内容。若仅有 fdisk -l 时， 则系统将会把整个系统内能够搜寻到的装置的分区均列出来。</li></ul><p>fdisk 命令使用示例： </p><p>示例一：列出系统所有装置的分区信息。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">fdisk -l</span><br></code></pre></td></tr></table></figure><p>示例二：列出系统中的根目录所在磁盘，并查阅该硬盘内的相关信息。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">A、执行命令，找出根目录所在磁盘名：df /<br>B、执行命令，对磁盘<span class="hljs-regexp">/dev/</span>vda 进行分区操作： fdisk <span class="hljs-regexp">/dev/</span>vda<br>C、执行命令，获取帮助：m  执行命令，查看磁盘状态： p<br>D、执行命令，不存储任何操作并离开：q<br></code></pre></td></tr></table></figure><h3 id="4-cmp命令"><a href="#4-cmp命令" class="headerlink" title="4.cmp命令"></a>4.cmp命令</h3><p>cmp 命令描述：该命令用于比较两个文件是否有差异。当相互比较的两个文件完全一样时，该指令不会显示任何信息。否则会标示出第一个不同之处的字符和列数编号。当不指定任何文件名称，或文件名为”-“，则 cmp 指令会从标准输入设备读取数据。</p><p>cmp 命令语法：cmp  [-clsv] [-i &lt;字符数目&gt;] [–help] [第一个文件] [第二个文件]。 </p><p>参数说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-c</td><td>除了标明差异处的十进制字码之外，一并显示该字符所对应字符。</td></tr><tr><td>-i &lt;字符数目&gt;</td><td>指定一个数目。</td></tr><tr><td>-l</td><td>标示出所有不一样的地方。</td></tr><tr><td>-s</td><td>不显示错误信息。</td></tr><tr><td>-v</td><td>显示版本信息。</td></tr><tr><td>–help</td><td>在线帮助。</td></tr></tbody></table><p>cmp 命令使用示例： </p><ul><li>A、执行如下命令，将一个自增序列 1-5 写入 test1.txt 文件中。 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 1 5); <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span> &gt;&gt; test1.txt ; <span class="hljs-keyword">done</span> <br></code></pre></td></tr></table></figure><ul><li>B、执行如下命令，比较 test1.txt 文件和 test2.txt 文件是否相同。 </li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-keyword">cmp</span> test1.txt test2.txt<br></code></pre></td></tr></table></figure><h3 id="5-file命令"><a href="#5-file命令" class="headerlink" title="5.file命令"></a>5.file命令</h3><p>file 命令描述：该命令用于辨识文件类型。 </p><p>file 命令语法：file [参数] [文件]。 </p><p>参数说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-b</td><td>列出辨识结果时，不显示文件名称。</td></tr><tr><td>-c</td><td>详细显示指令执行过程，便于排错或分析程序执行的情形。</td></tr><tr><td>-f&lt;名称文件&gt;</td><td>指定名称文件，其内容有一个或多个文件名称时，让 file 依序辨识这些文件，格式为每列一个文件名称。</td></tr><tr><td>-L</td><td>直接显示符号连接所指向的文件的类别。</td></tr><tr><td>-v</td><td>显示版本信息。</td></tr><tr><td>-z</td><td>解读压缩文件的内容。</td></tr></tbody></table><p>file 命令使用示例：</p><ul><li>A、执行如下命令，显示 test1.txt 文件类型。</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">file</span> test1.txt<br></code></pre></td></tr></table></figure><ul><li>B、执行如下命令，显示 test2.txt 文件类型并不显示文件名称。 </li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">file</span> -b test2.txt<br></code></pre></td></tr></table></figure><h3 id="6-find命令"><a href="#6-find命令" class="headerlink" title="6.find命令"></a>6.find命令</h3><p>find 命令描述：该命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则 find 命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。 </p><p>find 命令语法：find [参数] [文件]。 </p><p>参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-mount</td><td>只检查和指定目录在同一个文件系统下的文件，避免列出其它文件系统中的文件。</td></tr><tr><td>-amin n</td><td>在过去 n 分钟内被读取过文件。</td></tr><tr><td>-type c</td><td>文件类型是 c 的文件。</td></tr><tr><td>-cmin n</td><td>在过去 n 分钟内被修改过。</td></tr><tr><td>-name name</td><td>查找文件名称为 name 的文件。</td></tr></tbody></table><p>find 命令使用示例： </p><ul><li>A、执行如下命令，将当前目录及其子目录下所有文件后缀为.txt 的文件列出来。 </li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> . -name <span class="hljs-string">&quot;*.txt&quot;</span> <br></code></pre></td></tr></table></figure><ul><li>B、执行如下命令，查找系统中所有文件长度为 0 的普通文件，并列出它们的完整路径。 </li></ul><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">find</span> / -<span class="hljs-built_in">type</span> f -<span class="hljs-built_in">size</span> <span class="hljs-number">0</span> -<span class="hljs-built_in">exec</span> ls -l &#123;&#125; \;<br></code></pre></td></tr></table></figure><h2 id="六、文件目录管理命令"><a href="#六、文件目录管理命令" class="headerlink" title="六、文件目录管理命令"></a>六、文件目录管理命令</h2><h3 id="1-tree"><a href="#1-tree" class="headerlink" title="1.tree"></a>1.tree</h3><p>命令描述：tree 命令用于以树状图列出目录的内容。 </p><p>tree 命令没有内置在系统中，使用 tree 命令需要执行以下命令来安装： </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> -y tree <br></code></pre></td></tr></table></figure><p>命令使用示例： </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">tree <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/wallpapers/</span> <br></code></pre></td></tr></table></figure><h3 id="2-ls"><a href="#2-ls" class="headerlink" title="2.ls"></a>2.ls</h3><p>命令描述： ls 命令用于显示指定工作目录下的内容。 </p><p>命令格式：ls [参数] [目录名]。</p><p>常用参数说明：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-a</td><td>显示所有文件及目录（包括隐藏文件）</td></tr><tr><td>-l</td><td>将文件的权限、拥有者、文件大小等详细信息列出（ll 等同于 ls -l）</td></tr><tr><td>-r</td><td>将文件反序列出（默认按英文字母正序）</td></tr><tr><td>-t</td><td>将文件按创建时间正序列出</td></tr><tr><td>-R</td><td>递归遍历目录下文件</td></tr></tbody></table><p>命令使用示例： </p><ul><li>查看当前目录下的所有文件（包括隐藏文件）。 </li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">al</span><br></code></pre></td></tr></table></figure><h3 id="3-pwd"><a href="#3-pwd" class="headerlink" title="3.pwd"></a>3.pwd</h3><p>命令描述：获取当前工作目录的绝对路径。</p><h3 id="4-cd"><a href="#4-cd" class="headerlink" title="4.cd"></a>4.cd</h3><p>命令描述：cd 命令用于切换工作目录。</p><p>在路径表示中： </p><ul><li>一个半角句号（.）表示当前目录，例如路径./app/log 等同于 app/log。 </li><li>两个半角句号（..）表示上级目录，例如路径/usr/local/../src 等同于/usr/src，其中 local 和 src 目录同级。</li></ul><p>注：cd 命令的默认参数为~，符号 ~ 表示当前用户的家目录，即在 root 用户登录时，命令 cd、cd ~和 cd /root 执行效果相同。</p><h3 id="5-touch"><a href="#5-touch" class="headerlink" title="5.touch"></a>5.touch</h3><p>命令描述：touch 命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。 </p><p>命令格式：touch [参数] [文件]。 </p><p>参数说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-c</td><td>如果指定文件不存在，不会建立新文件</td></tr><tr><td>-r</td><td>使用参考文件的时间记录</td></tr><tr><td>-t</td><td>设置文件的时间记录</td></tr></tbody></table><p>命令使用示例： </p><ul><li>创建两个空文件。 </li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">touch dem<span class="hljs-meta">o1</span>.txt dem<span class="hljs-meta">o2</span>.txt<br></code></pre></td></tr></table></figure><ul><li>修改 demo1.txt 的时间记录为当前系统时间。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> demo1.txt<br></code></pre></td></tr></table></figure><ul><li>更新 demo2.txt 的时间记录，使其和 demo1.txt 的时间记录相同。</li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">touch -r dem<span class="hljs-meta">o1</span>.txt dem<span class="hljs-meta">o2</span>.txt<br></code></pre></td></tr></table></figure><h3 id="6-mkdir"><a href="#6-mkdir" class="headerlink" title="6.mkdir"></a>6.mkdir</h3><p>命令描述：mkdir 命令用于新建子目录。-p 参数确保目录名称存在，不存在的就新建一个。 </p><p>命令使用示例： </p><ul><li>新建目录 a/b/c/d，并使用 tree 命令查看创建后的目录结构</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mkdir -<span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">a</span>/<span class="hljs-selector-tag">b</span>/c/d<br></code></pre></td></tr></table></figure><h3 id="7-rm"><a href="#7-rm" class="headerlink" title="7.rm"></a>7.rm</h3><p>命令描述：rm 命令用于删除一个文件或者目录。 </p><p>命令格式：rm [参数] [文件]。 </p><p>参数说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-i</td><td>删除前逐一询问确认</td></tr><tr><td>-f</td><td>无需确认，直接删除</td></tr><tr><td>-r</td><td>删除目录下所有文件</td></tr></tbody></table><p>命令使用示例： </p><ul><li>无需确认直接删除文件。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf demo*<br></code></pre></td></tr></table></figure><ul><li>无需确认直接删除目录 a 及其目录下所有子目录和文件。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf a<br></code></pre></td></tr></table></figure><h3 id="8-cp"><a href="#8-cp" class="headerlink" title="8.cp"></a>8.cp</h3><p>命令描述： cp 命令主要用于复制文件或目录。 </p><p>命令格式：cp [参数] [源文件] [目标文件]。 </p><p>参数说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-d</td><td>复制时保留链接</td></tr><tr><td>-f</td><td>覆盖已经存在的目标文件而不给出提示</td></tr><tr><td>-i</td><td>覆盖前询问</td></tr><tr><td>-p</td><td>除复制文件的内容外，还把修改时间和访问权限也复制到新文件中</td></tr><tr><td>-r</td><td>复制目录及目录内的所有项目</td></tr></tbody></table><p>命令使用示例： </p><ul><li>将目录 c/d 中的所有内容复制到目录 a/b 下。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> -r c a/b<br></code></pre></td></tr></table></figure><h3 id="9-mv"><a href="#9-mv" class="headerlink" title="9.mv"></a>9.mv</h3><p>命令描述： mv 命令用来为文件或目录改名、或将文件或目录移入其它位置。 </p><p>命令格式：mv [参数] [源文件] [目标文件]。 </p><p>参数说明： </p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>-i</td><td>若指定目录已有同名文件，则先询问是否覆盖旧文件</td></tr><tr><td>-f</td><td>如果目标文件已经存在，不会询问而直接覆盖</td></tr></tbody></table><p>命令使用示例： </p><ul><li>将文件名 a.txt 改为 b.txt。</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mv <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span> <span class="hljs-selector-tag">b</span>.txt<br></code></pre></td></tr></table></figure><ul><li>将 c 目录移动到 a/b/c/d/下。 </li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mv c a<span class="hljs-regexp">/b/</span>c<span class="hljs-regexp">/d/</span><br></code></pre></td></tr></table></figure><ul><li>将当前目录内容全部移动到/tmp 目录中。</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mv .<span class="hljs-regexp">/* /</span>tmp<br></code></pre></td></tr></table></figure><h3 id="10-rename"><a href="#10-rename" class="headerlink" title="10.rename"></a>10.rename</h3><p>命令描述：rename 命令用字符串替换的方式批量改变文件名。rename 命令有 C 语言和 Perl语言两个版本，这里介绍 C 语言版本的 rename 命令，不支持正则表达式。</p><p>命令使用示例： </p><ul><li>将当前目录下所有文件名中的字符串 demo 改为大写的字符串 DEMO。</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">rename</span> <span class="hljs-built_in">demo</span> DEMO *<br></code></pre></td></tr></table></figure><ul><li>将当前目录下所有.txt 文件后缀都改为 text。 </li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">rename <span class="hljs-string">.txt</span> <span class="hljs-string">.text</span> *<br></code></pre></td></tr></table></figure><h2 id="七、文件权限管理"><a href="#七、文件权限管理" class="headerlink" title="七、文件权限管理"></a>七、文件权限管理</h2><h4 id="ls-命令可以查看-Linux-系统上的文件、目录和设备的权限。"><a href="#ls-命令可以查看-Linux-系统上的文件、目录和设备的权限。" class="headerlink" title="ls 命令可以查看 Linux 系统上的文件、目录和设备的权限。"></a>ls 命令可以查看 Linux 系统上的文件、目录和设备的权限。</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ls -l <span class="hljs-regexp">/boot/</span><br></code></pre></td></tr></table></figure><p> ls -l 命令中显示的第一列就是文件权限信息，共 11 位字符，分 5 部分。</p><ul><li>第 1 位表示存档类型，d 表示目录，-表示一般文件。 </li><li>第 2~4 位表示当前用户的权限（属主权限）。</li><li>第 5~7 位表示同用户组的用户权限（属组权限）。 </li><li>第 8~10 位表示不同用户组的用户权限（其他用户权限）。</li><li>第 11 位是一个半角句号.，表示 SELinux 安全标签。</li></ul><p>注：用户权限每组三位，rwx 分别表示读、写、执行权限，对应八进制表示为 4、2、1。</p><p>例如 efi 目录的 root 用户权限为 drwxr-xr-x.。 </p><ul><li>该目录对 root 用户具有读写和执行所有权限。 </li><li>该目录对 root 组其他用户有读和执行权限。 </li><li>该目录对其他用户有读和执行权限。 </li></ul><p>所以该权限表示对应八进制权限表示为： </p><ul><li>属主权限：4+2+1=7。 </li><li>属组权限：4+1=5。 </li><li>其他用户权限：4+1=5。</li></ul><p>即 755。 </p><h3 id="1-chmod"><a href="#1-chmod" class="headerlink" title="1.chmod"></a>1.chmod</h3><p>chmod 命令用于修改文件权限 mode，-R 参数以递归方式对子目录和文件进行修改。 </p><p>命令使用示例： </p><ul><li>1、新建名为 hello.sh 的 Shell 脚本，该脚本将会输出 Hello World。用 ll 命令可以看到新建的脚本没有执行权限，其权限用八进制表示为 644。 </li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">root@<span class="hljs-keyword">local</span> ~ % echo <span class="hljs-string">&quot;echo &#x27;hello world&#x27;&quot;</span> &gt; hello.<span class="hljs-keyword">sh</span><br>root@<span class="hljs-keyword">local</span> ~ % <span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span><br><span class="hljs-keyword">total</span> 4<br>-rw-r--r--   1 root  staff        19  3  5 20:10 hello.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><ul><li>2、将 hello.sh 文件增加属主的执行权限。</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">root@<span class="hljs-keyword">local</span> ~ % chmod <span class="hljs-keyword">u</span>+x hello.<span class="hljs-keyword">sh</span><br>root@<span class="hljs-keyword">local</span> ~ % <span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span><br><span class="hljs-keyword">total</span> 4<br>-rwxr--r--   1 root  staff        19  3  5 20:10 hello.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><ul><li>3、将 hello.sh 文件撤销属主的执行权限。 </li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">root@<span class="hljs-keyword">local</span> ~ % chmod <span class="hljs-keyword">u</span>-x hello.<span class="hljs-keyword">sh</span><br>root@<span class="hljs-keyword">local</span> ~ % <span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span><br><span class="hljs-keyword">total</span> 4<br>-rw-r--r--   1 root  staff        19  3  5 20:10 hello.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><ul><li>4、将 hello.sh 文件权限修改为八进制表示的 744 权限。</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">root@<span class="hljs-keyword">local</span> ~ % chmod 744 hello.<span class="hljs-keyword">sh</span><br>root@<span class="hljs-keyword">local</span> ~ % <span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span><br><span class="hljs-keyword">total</span> 4<br>-rwxr--r--   1 dinglong  staff        19  3  5 20:10 hello.<span class="hljs-keyword">sh</span><br></code></pre></td></tr></table></figure><ul><li>5、使用 bash 命令解释器执行 hello.sh 脚本文件。 </li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs typescript">root<span class="hljs-meta">@local</span> ~ % <span class="hljs-regexp">/bin/</span>bash hello.<span class="hljs-property">sh</span><br>hello world<br></code></pre></td></tr></table></figure><p>注：u+x 表示增加属主的执行权限，u 表示属主，g 表示属组，o 表示其他，a 表示所有用户</p><h3 id="2-chown"><a href="#2-chown" class="headerlink" title="2.chown"></a>2.chown</h3><p>chown 命令修改文件的属主和属组；-R 参数以递归方式对子目录和文件进行修改；ls -l 命令显示的第三列和第四列就是文件的属主和属组信息。</p><p>命令使用示例： </p><ul><li>1、新建一个文本文件 test.txt，用 ll 命令可以看到该文件的属主和属组是 root。whoami 命令可以查看当前 Shell 环境登录的用户名。 </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">whomi<br><span class="hljs-built_in">touch</span> text.txt<br><span class="hljs-built_in">ls</span> -l<br></code></pre></td></tr></table></figure><ul><li>2、创建两个用户。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">useradd <span class="hljs-built_in">test</span> <br>useradd admin<br></code></pre></td></tr></table></figure><ul><li>3、修改 test.txt 文件的属主用户为 test。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> <span class="hljs-built_in">test</span> test.txt <br><span class="hljs-built_in">ls</span> -l<br></code></pre></td></tr></table></figure><ul><li>4、修改 test.txt 文件的属主和属组为 admin。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chown</span> admin:admin test.txt <br><span class="hljs-built_in">ls</span> -l<br></code></pre></td></tr></table></figure><h3 id="3-chgrp"><a href="#3-chgrp" class="headerlink" title="3.chgrp"></a>3.chgrp</h3><p>chgrp 命令用于修改文件的属组。 </p><p>命令使用示例： </p><ul><li>将 test.txt 文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chgrp</span> root test.txt <br><span class="hljs-built_in">ls</span> -l<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis常用命令</title>
    <link href="/2022/03/04/Redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/03/04/Redis%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="1-全局命令"><a href="#1-全局命令" class="headerlink" title="1.全局命令"></a>1.全局命令</h2><figure class="highlight lsl"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs lsl">获取redis配置信息：config get &lt;pattern&gt; <br>pattern设置匹配字符串，*号表示所有<br>修改配置：config set &lt;param&gt; &lt;value&gt;<br>健总数：dbsize<br>切换数据库（index：<span class="hljs-number">0</span> ~ <span class="hljs-number">15</span>）： select index<br>设置键值<span class="hljs-type">key</span>：set <span class="hljs-type">key</span> value [EX seconds] [PX milliseconds] [NX|XX]<br>返回指定查询模式的Key：keys &lt;pattern&gt;<br>判断指定一个或多个<span class="hljs-type">key</span>是否存在：exists <span class="hljs-type">key</span> [<span class="hljs-type">key</span> ...]<br>设置指定的<span class="hljs-type">key</span>过期：expire <span class="hljs-type">key</span> seconds(秒)<br>通过设置过期时间清除缓存： expire <span class="hljs-type">key</span> seconds 或者 set <span class="hljs-type">key</span> value [EX seconds] [PX milliseconds] [NX|XX]<br>移除<span class="hljs-type">key</span>的过期时间：pexpire <span class="hljs-type">key</span> milliseconds(毫秒)<br>获取指定KEY的过期时间：ttl <span class="hljs-type">key</span>(秒) 或 pttl <span class="hljs-type">key</span>(毫秒)<br>判断指定<span class="hljs-type">key</span>的数据类型（<span class="hljs-type">string</span>,<span class="hljs-type">list</span>,hash,set,zset,...）：type <span class="hljs-type">key</span><br>删除指定的一个或多个<span class="hljs-type">key</span>：del <span class="hljs-type">key</span> [<span class="hljs-type">key</span> ...]<br>删除当前数据库所有数据：flushdb<br>删除所有数据库的数据：flushall<br>查询内部编码：object encoding <span class="hljs-type">key</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">内部编码：<span class="hljs-keyword">object</span> <span class="hljs-keyword">encoding</span> key<br>停掉Redis服务：shutdown save<br>查询信息：<span class="hljs-keyword">info</span> memory<br></code></pre></td></tr></table></figure><h2 id="2-字符串string"><a href="#2-字符串string" class="headerlink" title="2.字符串string"></a>2.字符串string</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xquery">设置值：set<span class="hljs-built_in"> key</span> <span class="hljs-keyword">value</span> [ex seconds] [px milliseconds] [nx|xx]<br>ex seconds：为键设置秒级过期时间。 <br>px milliseconds：为键设置毫秒级过期时间。 <br>nx：键必须不存在，才可以设置成功，用于添加。 <br>xx：与nx相反，键必须存在，才可以设置成功，用于更新。<br>键必须不存在，才可以设置成功，用于添加：setnx<span class="hljs-built_in"> key</span> <span class="hljs-keyword">value</span> <br>键必须不存在，才可以设置成功，为键设置秒级过期时间：setex<span class="hljs-built_in"> key</span> seconds <span class="hljs-keyword">value</span><br>键必须存在，才可以设置成功，用于更新：set<span class="hljs-built_in"> key</span> <span class="hljs-keyword">value</span> xx<br>获取键值：get<span class="hljs-built_in"> key</span><br>批量设置值：mset<span class="hljs-built_in"> key</span> <span class="hljs-keyword">value</span> <span class="hljs-built_in">[key</span> <span class="hljs-keyword">value</span> ...]<br>批量获取值：mget<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[key</span> ...]<br>自增：incr<span class="hljs-built_in"> key</span> | incrby<span class="hljs-built_in"> key</span> long(数)<br>自减：decr<span class="hljs-built_in"> key</span> <br>自增指定数字：incrby<span class="hljs-built_in"> key</span> increment <br>自减指定数字：decrby<span class="hljs-built_in"> key</span> decrement <br>自增浮点数：incrbyfloat<span class="hljs-built_in"> key</span> increment<br><br>追加值：append<span class="hljs-built_in"> key</span> <span class="hljs-keyword">value</span><br>字符串长度：strlen<span class="hljs-built_in"> key</span><br>设置并返回原值：getset<span class="hljs-built_in"> key</span> <span class="hljs-keyword">value</span><br>设置指定位置的字符：setrange<span class="hljs-built_in"> key</span> offeset <span class="hljs-keyword">value</span><br>获取部分字符串：getrange<span class="hljs-built_in"> key</span> <span class="hljs-keyword">start</span> <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="3-列表（按索引排序，元素可重复）list"><a href="#3-列表（按索引排序，元素可重复）list" class="headerlink" title="3.列表（按索引排序，元素可重复）list"></a>3.列表（按索引排序，元素可重复）list</h2><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs tcl">从左边插入元素：lpush key value [value ...] <br>从右边插入元素：rpush key value [value ...] <br>向某个元素前或者后插入元素：<span class="hljs-keyword">linsert</span> key before|<span class="hljs-keyword">after</span> pivot value<br>从左到右获取列表的所有元素：<span class="hljs-keyword">lrange</span> key <span class="hljs-number">0</span> <span class="hljs-number">-1</span><br>获取指定范围内的元素列表：<span class="hljs-keyword">lrange</span> key start stop<br>获取列表指定索引下标的元素：<span class="hljs-keyword">lindex</span> key index<br>从左端移除一个元素：lpop key<br>从右端移除一个元素：rpop key<br>删除指定元素：lrem key count value<br>按照索引范围修剪列表：ltrim key start end<br>修改指定索引下标的元素：<span class="hljs-keyword">lset</span> key index newValue<br>获取列表长度（大小）：llen key<br><br>阻塞式弹出如下：blpop key [key ...] timeout <br> brpop key [key ...] timeout<br>  <br>  <br>·lpush+lpop=Stack（栈）<br>·lpush+rpop=Queue（队列） <br>·lpsh+ltrim=Capped Collection（有限集合）<br>·lpush+brpop=Message Queue（消息队列）<br></code></pre></td></tr></table></figure><h2 id="4-哈希（字段名称不能重复）hash"><a href="#4-哈希（字段名称不能重复）hash" class="headerlink" title="4.哈希（字段名称不能重复）hash"></a>4.哈希（字段名称不能重复）hash</h2><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs lsl">设置单个字段值：hset <span class="hljs-type">key</span> field value<br>设置多个字段值：hmset <span class="hljs-type">key</span> field value [field value ...]<br>字段值自增：hincrby <span class="hljs-type">key</span> field increment<br>判断哈希中是否有某个字段：hexists <span class="hljs-type">key</span> field<br>删除哈希中field：hdel <span class="hljs-type">key</span> field [field ...]<br>获取某个字段值：hget <span class="hljs-type">key</span> field<br>获取多个字段值：hmget <span class="hljs-type">key</span> field [field ...]<br>获取哈希的所有内容field-value：hgetall <span class="hljs-type">key</span><br>获取哈希的所有字段名称：hkeys <span class="hljs-type">key</span><br>获取哈希的所有字段值：hvals <span class="hljs-type">key</span><br>获取哈希元素个数：hlen <span class="hljs-type">key</span><br>判断field是否存在：hexists <span class="hljs-type">key</span> field<br>计算value的字符串长度：hstrlen <span class="hljs-type">key</span> field<br></code></pre></td></tr></table></figure><h2 id="5-集合（元素不可重复，无效）set"><a href="#5-集合（元素不可重复，无效）set" class="headerlink" title="5.集合（元素不可重复，无效）set"></a>5.集合（元素不可重复，无效）set</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xquery">添加：sadd<span class="hljs-built_in"> key</span> member [member ...]<br>返回集合中的所有元素：smembers<span class="hljs-built_in"> key</span><br>判断元素是否在集合中：sismember<span class="hljs-built_in"> key</span> member<br>随机从集合返回指定个数元素：srandmember<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[count</span>]<br>删除指定的元素：srem<span class="hljs-built_in"> key</span> member [member ...]<br>从集合随机弹出元素：spop<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[count</span>]<br>随机移<span class="hljs-built_in">除count</span>个元素，返回被移除的元素列表：spop<span class="hljs-built_in"> key</span><span class="hljs-built_in"> count</span><br>返回集合元素个数：scard<span class="hljs-built_in"> key</span><br><br><br>集合间操作：交集（sinter/sinterstore）、并集（sunion/sunionstore）、差集（sdiff/sdiffstore） <br>交集，返回集合间的共同元素：sinter<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[key</span> ...]<br>交集，将交集元素存储到目标集合中：sinterstore destination<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[key</span> ...]<br>并集，返回多个集合去重后的所有元素：sunion<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[key</span> ...]<br>并集，并将并集元素存储到目标集合中：sunionstore destination<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[key</span> ...]<br>差集（A - B，结果：把A、B的共同元素从A集合中移除）：sdiff<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[key</span> ...]<br>差集：sdiffstore destination<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[key</span> ...]<br><br><br>·sadd=Tagging（标签）<br>·spop/srandmember=Random <span class="hljs-type">item</span>（生成随机数，比如抽奖）<br>·sadd+sinter=Social Graph（社交需求）<br></code></pre></td></tr></table></figure><h2 id="6-有序集合（元素不可重复，可根据分值score进行排序）sorted-set"><a href="#6-有序集合（元素不可重复，可根据分值score进行排序）sorted-set" class="headerlink" title="6.有序集合（元素不可重复，可根据分值score进行排序）sorted set"></a>6.有序集合（元素不可重复，可根据分值score进行排序）sorted set</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xquery">添加元素：zadd<span class="hljs-built_in"> key</span> [NX|XX] [CH] [INCR] score member [score member ...]<br>·nx：member必须不存在，才可以设置成功，用于添加。 <br>·xx：member必须存在，才可以设置成功，用于更新。<br>        ·ch：返回此次操作后，有序集合元素和分数发生变化的个数 <br>        ·incr：对score做增加，相当于后面介绍的zincrby<br> <br>计算成员个数：zcard<span class="hljs-built_in"> key</span><br>范围查询（按分值升序）：zrange<span class="hljs-built_in"> key</span> <span class="hljs-keyword">start</span> stop [withscores]<br>范围查询（按分值倒序）：zrevrange<span class="hljs-built_in"> key</span> <span class="hljs-keyword">start</span> stop [withscores]<br>返回指定分数范围的成员（升序）：zrangebyscore<span class="hljs-built_in"> key</span><span class="hljs-built_in"> min</span><span class="hljs-built_in"> max</span> [WITHSCORES] [LIMIT offset<span class="hljs-built_in"> count</span>]<br>返回指定分数范围的成员（倒序）：zrevrangebyscore<span class="hljs-built_in"> key</span><span class="hljs-built_in"> max</span><span class="hljs-built_in"> min</span> [WITHSCORES] [LIMIT offset<span class="hljs-built_in"> count</span>]<br>注<span class="hljs-built_in">：min</span><span class="hljs-built_in">和max</span>还支持开区间（小括号）和闭区间（中括号），-inf和 +inf分别代表无限小和无限大<br>获取某个成员的分数：zscore<span class="hljs-built_in"> key</span> member<br>获取指定元素的排行（升序）：zrank<span class="hljs-built_in"> key</span> member<br>          （降序）：zrevrank<span class="hljs-built_in"> key</span> member<br>增加某个元素分值：zincrby<span class="hljs-built_in"> key</span> increment member (increment指定要增、减（负数）的分值)<br>删除指定排名内的升序元素：zremrangebyrank<span class="hljs-built_in"> key</span> <span class="hljs-keyword">start</span> <span class="hljs-keyword">end</span><br>删除指定的元素：zrem<span class="hljs-built_in"> key</span> member [member ...]<br>根据分值范围删除元素：zremrangebyscore<span class="hljs-built_in"> key</span><span class="hljs-built_in"> min</span><span class="hljs-built_in"> max</span><br>获取指定分值范围的元素个数：zcount<span class="hljs-built_in"> key</span><span class="hljs-built_in"> min</span><span class="hljs-built_in"> max</span><br><br><br>集合间操作：<br>交集：zinterstore destination numkeys<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[key</span> ...] [weights weight [weight ...]] [aggregate<span class="hljs-built_in"> sum</span><span class="hljs-built_in">|min</span><span class="hljs-built_in">|max</span>]<br>·destination：交集计算结果保存到这个键<br>·numkeys：需要做交集计算键的个数<br><span class="hljs-built_in">·key</span><span class="hljs-built_in">[key</span>...]：需要做交集计算的键<br>·weights weight[weight...]：每个键的权重，在做交集计算时，每个键中的每个member会将自己分数乘以这个权重，每个键的权重默认是<span class="hljs-number">1</span><br>·aggregate<span class="hljs-built_in"> sum</span><span class="hljs-built_in">|min</span><span class="hljs-built_in">|max</span>：计算成员交集后，分值可以按<span class="hljs-built_in">照sum</span>（和）、<span class="hljs-built_in"> min</span>（最小值）<span class="hljs-built_in">、max</span>（最大值）做汇总，默认值<span class="hljs-built_in">是sum</span><br>并集：zunionstore destination numkeys<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[key</span> ...] [weights weight [weight ...]] [aggregate<span class="hljs-built_in"> sum</span><span class="hljs-built_in">|min</span><span class="hljs-built_in">|max</span>]<br></code></pre></td></tr></table></figure><h2 id="7-键管理"><a href="#7-键管理" class="headerlink" title="7.键管理"></a>7.键管理</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xquery">键重命名：<span class="hljs-keyword">rename</span><span class="hljs-built_in"> key</span> newkey<br>保只有newKey 不存在时候才被覆盖：renamenx<span class="hljs-built_in"> key</span> newkey<br>随机返回一个键：randomkey<br>键过期：expire<span class="hljs-built_in"> key</span> seconds：键在seconds秒后过期<br>expireat<span class="hljs-built_in"> key</span> timestamp：键在秒级时间戳timestamp后过期<br>    注：对于字符串类型键，执行set命令会去掉过期时间，这个问题很容易 在开发中被忽视<br><br>移<span class="hljs-built_in">除key</span>的过期时间：pexpire<span class="hljs-built_in"> key</span> milliseconds(毫秒)<br>迁移键：把指定的键从源数据库移动到目标数据库：move<span class="hljs-built_in"> key</span> db<br>dump+restore可以实现在不同的Redis实例之间进行数据迁移的功能：<br><span class="hljs-number">1</span>）在源Redis上，dump命令会将键值序列化，格式采用的是RDB格式：dump<span class="hljs-built_in"> key</span><br><span class="hljs-number">2</span>）在目标Redis上，restore命令将上面序列化的值进行复原：restore<span class="hljs-built_in"> key</span> ttl <span class="hljs-keyword">value</span><br><span class="hljs-number">3</span>）用于在Redis实例间进行数据迁移：migrate host port<span class="hljs-built_in"> key</span>|<span class="hljs-string">&quot;&quot;</span> destination-db timeout [<span class="hljs-keyword">copy</span>] <span class="hljs-built_in">[replace</span>] [keys<span class="hljs-built_in"> key</span> <span class="hljs-built_in">[key</span> ...]]<br><br>遍历键：<br>全量遍历键：keys pattern<br>渐进式遍历：scan cursor [match pattern] <span class="hljs-built_in">[count</span><span class="hljs-built_in"> number</span>]<br>hscan、sscan、zscan渐进式地遍历hash、set、zset<br>数据库管理：<br>切换数据库：select dbIndex<br>清除数据库：flushdb(当前数据库)<br>flushall命(所有数据库)<br></code></pre></td></tr></table></figure><h2 id="8-慢查询分析"><a href="#8-慢查询分析" class="headerlink" title="8.慢查询分析"></a>8.慢查询分析</h2><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel">获取慢查询日志：slowlog get [<span class="hljs-built_in">n</span>]<br>获取慢查询日志列表当前的长度：slowlog <span class="hljs-built_in">len</span><br>慢查询日志重置：slowlog reset实际是对列表做清理操作<br></code></pre></td></tr></table></figure><h2 id="9-Redis-Shell"><a href="#9-Redis-Shell" class="headerlink" title="9.Redis Shell"></a>9.Redis Shell</h2><h3 id="1-redis-cli"><a href="#1-redis-cli" class="headerlink" title="(1)redis-cli"></a>(1)redis-cli</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">-r（repeat）选项代表将命令执行n次：redis-cli -r n 操作<span class="hljs-params">(比如ping)</span><br>-i（interval）选项代表每隔n秒执行一次命令，但是-i选项必须和-r选项一起使用：redis-cli -r n -i n 操作<span class="hljs-params">(比如ping)</span><br>注意-i的单位是秒，不支持毫秒为单位，但是如果想以每隔10毫秒执行 一次，可以用-i0.01，例如：redis-cli -r 5 -i 0.01 ping<br>利用-r和-i选项，每隔1秒输出内存的使用量：redis-cli -r n -i n info | grep used_memory_human<br>-x选项代表从标准输入（stdin）读取数据作为redis-cli的最后一个参数：<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;键值&quot;</span> | redis-cli -x <span class="hljs-keyword">set</span> key<br>-c（cluster）选项是连接Redis Cluster节点时需要使用的，-c选项可以防 止moved和ask异常<br>如果Redis配置了密码，可以用-a（auth）选项，有了这个选项就不需要 手动输入auth命令<br><span class="hljs-params">--scan</span>选项和<span class="hljs-params">--pattern</span>选项用于扫描指定模式的键，相当于使用scan命令<br><span class="hljs-params">--slave</span>选项是把当前客户端模拟成当前Redis节点的从节点，可以用来 获取当前Redis节点的更新操作<br><span class="hljs-params">--rdb</span>选项会请求Redis实例生成并发送RDB持久化文件，保存在本地。 可使用它做持久化文件的定期备份<br><span class="hljs-params">--pipe</span>选项用于将命令封装成Redis通信协议定义的数据格式，批量发送 给Redis执行<br><span class="hljs-params">--bigkeys</span>选项使用scan命令对Redis的键进行采样，从中找到内存占用比 较大的键值，这些键可能是系统的瓶颈<br><span class="hljs-params">--eval</span>选项用于执行指定Lua脚本<br>latency有三个选项，分别是<span class="hljs-params">--latency</span>、<span class="hljs-params">--latency-history</span>、<span class="hljs-params">--latency-dist</span> 可以检测网络延迟，对于Redis的开发和运维非常有帮助<br><span class="hljs-params">--stat</span>选项可以实时获取Redis的重要统计信息，虽然info命令中的统计信 息更全，但是能实时看到一些增量的数据<br><span class="hljs-params">--no-raw</span>选项是要求命令的返回结果必须是原始的格式，<span class="hljs-params">--raw</span>恰恰相反，返回格式化后的结果<br></code></pre></td></tr></table></figure><h3 id="2-redis-benchmark"><a href="#2-redis-benchmark" class="headerlink" title="(2)redis-benchmark"></a>(2)redis-benchmark</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-c（clients）选项代表客户端的并发数量（默认是50）</span><br><span class="hljs-deletion">-n（num）选项代表客户端请求总量（默认是100000）</span><br><span class="hljs-deletion">-q选项仅仅显示redis-benchmark的requests per second信息</span><br><span class="hljs-deletion">-P选项代表每个请求pipeline的数据量（默认为1）</span><br><span class="hljs-deletion">-k选项代表客户端是否使用keepalive，1为使用，0为不使用，默认值为 1</span><br><span class="hljs-deletion">-t选项可以对指定命令进行基准测试</span><br><span class="hljs-deletion">--csv选项会将结果按照csv格式输出，便于后续处理，如导出到Excel 等</span><br><br></code></pre></td></tr></table></figure><h2 id="10-事务与Lua"><a href="#10-事务与Lua" class="headerlink" title="10.事务与Lua"></a>10.事务与Lua</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">multi命令代表事务开始，exec命令代表事务结束，它们之间的命令是原子顺序执行</span><br><span class="hljs-keyword"></span>如果要停止事务的执行，可以使用<span class="hljs-keyword">discard命令代替exec命令即可</span><br><span class="hljs-keyword"></span>Redis如何管理Lua脚本：<br>将Lua脚本加载到Redis内存中：<span class="hljs-keyword">script </span>load <span class="hljs-keyword">script</span><br><span class="hljs-keyword"></span>判断<span class="hljs-keyword">sha1是否已经加载到Redis内存中：scripts </span>exists <span class="hljs-keyword">sha1 </span>[<span class="hljs-keyword">sha1 </span>…]<br>清除Redis内存已经加载的所有Lua脚本：<span class="hljs-keyword">script </span>flush<br>杀掉正在执行的Lua脚本：<span class="hljs-keyword">script </span>kill<br></code></pre></td></tr></table></figure><h2 id="11-Bitmaps"><a href="#11-Bitmaps" class="headerlink" title="11.Bitmaps"></a>11.Bitmaps</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xquery">设置值：setbit<span class="hljs-built_in"> key</span> offset <span class="hljs-keyword">value</span><br>获取值：getbit<span class="hljs-built_in"> key</span> offset<br>获取Bitmaps指定范围值为<span class="hljs-number">1</span>的个数：bitcount [<span class="hljs-keyword">start</span>][<span class="hljs-keyword">end</span>]<br>Bitmaps间的运算：bitop op destkey<span class="hljs-built_in"> key</span><span class="hljs-built_in">[key</span>....]<br>op为<span class="hljs-keyword">and</span>（交集）、<span class="hljs-keyword">or</span>（并 集）<span class="hljs-built_in">、not</span>（非）、xor（异或）操作并将结果保存在destkey<br>计算Bitmaps中第一个值为targetBit的偏移量：bitpos<span class="hljs-built_in"> key</span> targetBit [<span class="hljs-keyword">start</span>] [<span class="hljs-keyword">end</span>]<br></code></pre></td></tr></table></figure><h2 id="12-HyperLogLog"><a href="#12-HyperLogLog" class="headerlink" title="12.HyperLogLog"></a>12.HyperLogLog</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">添加：pfadd key element <span class="hljs-selector-attr">[element …]</span><br>计算独立用户数：pfcount key <span class="hljs-selector-attr">[key …]</span><br>合并：pfmerge destkey sourcekey <span class="hljs-selector-attr">[sourcekey ...]</span><br><br></code></pre></td></tr></table></figure><h2 id="13-发布订阅"><a href="#13-发布订阅" class="headerlink" title="13.发布订阅"></a>13.发布订阅</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs inform7">发布消息：publish channel message<br>订阅消息：subscribe channel <span class="hljs-comment">[channel ...]</span><br>客户端在执行订阅命令之后进入了订阅状态，只能接收subscribe、 psubscribe、unsubscribe、punsubscribe的四个命令<br>取消订阅：unsubscribe <span class="hljs-comment">[channel <span class="hljs-comment">[channel ...]</span>]</span><br>按照模式订阅和取消订阅：psubscribe pattern <span class="hljs-comment">[pattern...]</span> <br>punsubscribe <span class="hljs-comment">[pattern <span class="hljs-comment">[pattern ...]</span>]</span><br>查询订阅：<br>查看活跃的频道：pubsub channels <span class="hljs-comment">[pattern]</span><br>查看频道订阅数：pubsub numsub <span class="hljs-comment">[channel ...]</span><br>查看模式订阅数：pubsub numpat<br></code></pre></td></tr></table></figure><h2 id="14-GEO"><a href="#14-GEO" class="headerlink" title="14.GEO"></a>14.GEO</h2><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs inform7">增加地理位置信息：geoadd key longitude latitude member <span class="hljs-comment">[longitude latitude member ...]</span><br>获取地理位置信息：geopos key member <span class="hljs-comment">[member ...]</span><br>获取两个地理位置的距离：geodist key member1 member2 <span class="hljs-comment">[unit]</span><br>unit代表返回结果的单位，包含四种： ·m（meters）代表米<br>  ·km（kilometers）代表公里<br>                                        ·mi（miles）代表英<br>  ·ft（feet）代表尺<br><br>获取指定位置范围内的地理信息位置集合：georadius key longitude latitude radiusm|km|ft|mi <span class="hljs-comment">[withcoord]</span> <span class="hljs-comment">[withdist]</span> <span class="hljs-comment">[withhash]</span> <span class="hljs-comment">[COUNT count]</span> <span class="hljs-comment">[asc|desc]</span> <span class="hljs-comment">[store key]</span> <span class="hljs-comment">[storedist key]</span> <br>     georadiusbymember key member radiusm|km|ft|mi <span class="hljs-comment">[withcoord]</span> <span class="hljs-comment">[withdist]</span> <span class="hljs-comment">[withhash]</span> <span class="hljs-comment">[COUNT count]</span> <span class="hljs-comment">[asc|desc]</span> <span class="hljs-comment">[store key]</span> <span class="hljs-comment">[storedist key]</span><br><br>注：georadius命令 的中心位置给出了具体的经纬度，georadiusbymember只需给出成员<br>      ·withcoord：返回结果中包含经纬度。 <br>      ·withdist：返回结果中包含离中心节点位置的距离。<br>                      ·withhash：返回结果中包含geohash，有关geohash后面介绍。<br>                      ·COUNT count：指定返回结果的数量。<br>                      ·asc|desc：返回结果按照离中心节点的距离做升序或者降序。 <br>                      ·store key：将返回结果的地理位置信息保存到指定键。<br>                      ·storedist key：将返回结果离中心节点的距离保存到指定键。<br>获取geohash：geohash key member <span class="hljs-comment">[member ...]</span><br>删除地理位置信息：zrem key member<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub+Hexo个人博客</title>
    <link href="/2022/03/04/GitHub-Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/03/04/GitHub-Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="1-GitHub创建仓库"><a href="#1-GitHub创建仓库" class="headerlink" title="1.GitHub创建仓库"></a>1.GitHub创建仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">username/usernme.github.io<br></code></pre></td></tr></table></figure><p>注：因为我已经有这个仓库，所以显示重复</p><h3 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2.安装Hexo"></a>2.安装Hexo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">sudo npm install hexo-cli -g</span><br></code></pre></td></tr></table></figure><h3 id="3-编写、发布"><a href="#3-编写、发布" class="headerlink" title="3.编写、发布"></a>3.编写、发布</h3><h4 id="1-创建博客"><a href="#1-创建博客" class="headerlink" title="1.创建博客"></a>1.创建博客</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">hexo init blog</span><br></code></pre></td></tr></table></figure><h4 id="2-更改配置"><a href="#2-更改配置" class="headerlink" title="2.更改配置"></a>2.更改配置</h4><p><strong>主题安装</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> username.github.io</span><br><span class="hljs-meta">$ </span><span class="language-bash">git <span class="hljs-built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></code></pre></td></tr></table></figure><p><strong>基础配置</strong></p><p>打开文件位置 blog/_config.yml 修改几个键值对</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">title:</span> <span class="hljs-string">Latiy博客</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">山上的清风</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-Hans</span><br><br><span class="hljs-attr">theme:</span> <span class="hljs-string">next</span><br><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/Latiy-125/Latiy-125.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><h4 id="3-写博客"><a href="#3-写博客" class="headerlink" title="3.写博客"></a>3.写博客</h4><p>在 blog/source/_posts 下创建你的第一个博客，例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">author@authordeMacBook-Pro _posts % hexo new &quot;GitHub+Hexo个人博客&quot;<br>INFO  Validating config<br>INFO  Created: ~/blog/source/_posts/GitHub-Hexo个人博客.md<br></code></pre></td></tr></table></figure><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">hexo s</span><br></code></pre></td></tr></table></figure><p>测试服务启动，你可以在浏览器中输入<a href="https://link.jianshu.com/?t=https://localhost:4000">https://localhost:4000</a> 访问了。</p><h4 id="5-安装hexo-deployer-git自动部署发布工具"><a href="#5-安装hexo-deployer-git自动部署发布工具" class="headerlink" title="5.安装hexo-deployer-git自动部署发布工具"></a>5.安装<a href="https://link.jianshu.com/?t=https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>自动部署发布工具</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">npm install hexo-deployer-git --save</span><br></code></pre></td></tr></table></figure><h4 id="6-生成静态文件"><a href="#6-生成静态文件" class="headerlink" title="6.生成静态文件"></a>6.生成静态文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">hexo generate</span><br></code></pre></td></tr></table></figure><h4 id="7-发布"><a href="#7-发布" class="headerlink" title="7.发布"></a>7.发布</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$ </span><span class="language-bash">hexo deploy</span><br></code></pre></td></tr></table></figure><p>这是第一次，终端会让你输入Github 的邮箱和密码，正确输入后，骚等片刻，就会把你的博客上传至Github 了。以后在每次把博客写完后，执行一下这个命令就可以直接发布了</p>]]></content>
    
    
    
    <tags>
      
      <tag>GitHub</tag>
      
      <tag>node</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合Shrio</title>
    <link href="/2021/07/01/SpringBoot+Shrio/"/>
    <url>/2021/07/01/SpringBoot+Shrio/</url>
    
    <content type="html"><![CDATA[<h2 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!--Spring MVC--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-spring-boot-web-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!--MySQL--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!--Mybatis--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!-- Redis --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 对象池工具包 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-comment">&lt;!--JWT--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.auth0<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>java-jwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--编码解码类库--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-codec<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-codec<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.14<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-lang<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>   <br>   <br>   <br>   <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>       <span class="hljs-comment">&lt;!--配置的目的是可以使得UserMapper.xml文件可以放在java中--&gt;</span><br>       <span class="hljs-comment">&lt;!--重新指定Mybatis配置文件的位置--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resource<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--打包插件--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                   <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                       <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                       <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                   <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>               <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-配置application-yml"><a href="#2-配置application-yml" class="headerlink" title="2.配置application.yml"></a>2.配置application.yml</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-comment"># 端口号</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-comment"># 数据源配置</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://127.0.0.1:3306/ssm_v15?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">hikari:</span><br>      <span class="hljs-attr">pool-name:</span> <span class="hljs-string">hikariPool</span><br>      <span class="hljs-attr">minimum-idle:</span> <span class="hljs-number">5</span><br>      <span class="hljs-attr">maximum-pool-size:</span> <span class="hljs-number">10</span><br>      <span class="hljs-attr">connection-timeout:</span> <span class="hljs-number">5000</span><br><br><br><span class="hljs-attr">shiro:</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-comment"># true，会自动配置（默认）</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><br><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-comment"># 配置Mapper映射文件</span><br>  <span class="hljs-comment"># mapper-locations: classpath:/mapper/*Mapper.xml</span><br>  <span class="hljs-comment"># 配置MyBatis数据返回类型别名（默认别名是类名）</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.example.demo.model.entity</span><br><br><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">com:</span><br>      <span class="hljs-attr">example:</span><br>        <span class="hljs-attr">mapper:</span> <span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure><h2 id="3-Shiro配置"><a href="#3-Shiro配置" class="headerlink" title="3.Shiro配置"></a>3.Shiro配置</h2><h3 id="1-Shrio全局配置"><a href="#1-Shrio全局配置" class="headerlink" title="(1)Shrio全局配置"></a>(1)Shrio全局配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.config;<br><br><span class="hljs-keyword">import</span> com.example.demo.constants.AppConstants;<br><span class="hljs-keyword">import</span> com.example.demo.security.DemoAuthorizingRealm;<br><span class="hljs-keyword">import</span> com.example.demo.security.MyShiroFilterChainDefinition;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.credential.CredentialsMatcher;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.credential.HashedCredentialsMatcher;<br><span class="hljs-keyword">import</span> org.apache.shiro.mgt.DefaultSecurityManager;<br><span class="hljs-keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;<br><span class="hljs-keyword">import</span> org.apache.shiro.spring.web.config.ShiroFilterChainDefinition;<br><span class="hljs-keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;<br><span class="hljs-keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.filter.DelegatingFilterProxy;<br><br><span class="hljs-keyword">import</span> javax.servlet.DispatcherType;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Shiro配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShiroConfiguration</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册过滤器（会自动配置，默认bean名称：filterShiroFilterRegistrationBean）</span><br><span class="hljs-comment">     * （见：org.apache.shiro.spring.config.web.autoconfigure.ShiroWebFilterConfiguration）</span><br><span class="hljs-comment">     * filterShiroFilterRegistrationBean</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">/*@Bean</span><br><span class="hljs-comment">    public FilterRegistrationBean filterShiroFilterRegistrationBean(ShiroFilterFactoryBean shiroFilterFactoryBean) throws Exception &#123;</span><br><span class="hljs-comment">      FilterRegistrationBean filterRegistration = new FilterRegistrationBean();</span><br><span class="hljs-comment">      filterRegistration.setDispatcherTypes(DispatcherType.REQUEST, new DispatcherType[]&#123;</span><br><span class="hljs-comment">                  DispatcherType.FORWARD,</span><br><span class="hljs-comment">                  DispatcherType.INCLUDE,</span><br><span class="hljs-comment">                  DispatcherType.ERROR</span><br><span class="hljs-comment">          &#125;);</span><br><span class="hljs-comment">      filterRegistration.setFilter(new DelegatingFilterProxy(&quot;shiroFilterFactoryBean&quot;));</span><br><span class="hljs-comment">      filterRegistration.addInitParameter(&quot;targetFilterLifecycle&quot;,&quot;true&quot;);</span><br><span class="hljs-comment">      filterRegistration.setOrder(1);</span><br><span class="hljs-comment">      filterRegistration.addUrlPatterns(&quot;/*&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">      return filterRegistration;</span><br><span class="hljs-comment">    &#125;*/</span><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Shiro 过滤器（会自动配置，bean名称：shiroFilterFactoryBean）</span><br><span class="hljs-comment">     * （见：org.apache.shiro.spring.config.web.autoconfigure.ShiroWebFilterConfiguration;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> securityManager</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">/*@Bean</span><br><span class="hljs-comment">    public ShiroFilterFactoryBean shiroFilterFactoryBean(DefaultSecurityManager securityManager,</span><br><span class="hljs-comment">                                                         ShiroFilterChainDefinition filterChainDefinition)&#123;</span><br><span class="hljs-comment">        ShiroFilterFactoryBean shiroFilter = new ShiroFilterFactoryBean();</span><br><span class="hljs-comment">        // 设置安全管理器</span><br><span class="hljs-comment">        shiroFilter.setSecurityManager(securityManager);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 前后端分离应用，如下参数无需配置</span><br><span class="hljs-comment">        // shiroFilter.setLoginUrl(&quot;/login&quot;);</span><br><span class="hljs-comment">        // shiroFilter.setSuccessUrl(&quot;&quot;);</span><br><span class="hljs-comment">        // shiroFilter.setUnauthorizedUrl(&quot;&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 注册自定义过滤器</span><br><span class="hljs-comment">        // shiroFilter.setFilters();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        // 设置过滤器链定义图</span><br><span class="hljs-comment">        shiroFilter.setFilterChainDefinitionMap(filterChainDefinition.getFilterChainMap());</span><br><span class="hljs-comment">        return shiroFilter;</span><br><span class="hljs-comment">    &#125;*/</span><br><br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 安全管理器（会自动配置，bean名称：securityManager）</span><br><span class="hljs-comment">     * 见：org.apache.shiro.spring.config.web.autoconfigur.ShiroWebAutoConfiguration</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">/*@Bean</span><br><span class="hljs-comment">    public DefaultSecurityManager securityManager()&#123;</span><br><span class="hljs-comment">        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();</span><br><span class="hljs-comment">        // 设置Realm</span><br><span class="hljs-comment">        securityManager.setRealm(authorizer());</span><br><span class="hljs-comment">        return securityManager;</span><br><span class="hljs-comment">    &#125;*/</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置过滤器链（会自动配置，bean名称：shiroFilterChainDefinition）</span><br><span class="hljs-comment">     * 见：org.apache.shiro.spring.config.web.autoconfigur.ShiroWebAutoConfiguration</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ShiroFilterChainDefinition <span class="hljs-title function_">shiroFilterChainDefinition</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-comment">/* DefaultShiroFilterChainDefinition chainDefinition = new DefaultShiroFilterChainDefinition();</span><br><span class="hljs-comment">        chainDefinition.addPathDefinition(&quot;/login&quot;, DefaultFilter.anon.name());</span><br><span class="hljs-comment">        chainDefinition.addPathDefinition(&quot;/**&quot;, DefaultFilter.authc.name());</span><br><span class="hljs-comment">        return chainDefinition;*/</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyShiroFilterChainDefinition</span>();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 认证+授权</span><br><span class="hljs-comment">     * 权限数据（会自动配置，默认bean名称：authorizer）</span><br><span class="hljs-comment">     * 见：org.apache.shiro.spring.config.web.autoconfigur.ShiroWebAutoConfiguration</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> AuthorizingRealm <span class="hljs-title function_">authorizer</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">DemoAuthorizingRealm</span> <span class="hljs-variable">realm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DemoAuthorizingRealm</span>();<br>        <span class="hljs-comment">// 设置凭证匹配器</span><br>        realm.setCredentialsMatcher(credentialsMatcher());<br>        <span class="hljs-keyword">return</span> realm;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  凭证匹配器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> CredentialsMatcher <span class="hljs-title function_">credentialsMatcher</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 基于哈希算法凭证匹配器</span><br>        <span class="hljs-type">HashedCredentialsMatcher</span> <span class="hljs-variable">credentialsMatcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashedCredentialsMatcher</span>();<br>        <span class="hljs-comment">// hashAlgorithmName，指定哈希算法名称，必须和用户密码的加密算法保持一致</span><br>        <span class="hljs-comment">// 常用哈希算法: MD5、SHA-1、SHA-256、SHA-512</span><br>        credentialsMatcher.setHashAlgorithmName(AppConstants.ENCRYPTION_ALG_MD5);<br>        <span class="hljs-comment">// 哈希迭代次数，必须和用户密码的加密算法保持一致</span><br>        credentialsMatcher.setHashIterations(AppConstants.ENCRYPTION_HASH_ITERATIONS);<br>        <span class="hljs-comment">// 是否存储为16进制代码，必须和用户密码的加密算法保持一致</span><br>        credentialsMatcher.setStoredCredentialsHexEncoded(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-keyword">return</span> credentialsMatcher;<br>    &#125;<br><br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-Shiro过滤器链，定义访问资源所需的权限"><a href="#2-Shiro过滤器链，定义访问资源所需的权限" class="headerlink" title="(2)Shiro过滤器链，定义访问资源所需的权限"></a>(2)Shiro过滤器链，定义访问资源所需的权限</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.security;<br><br><span class="hljs-keyword">import</span> org.apache.shiro.spring.web.config.ShiroFilterChainDefinition;<br><span class="hljs-keyword">import</span> org.apache.shiro.web.filter.mgt.DefaultFilter;<br><br><span class="hljs-keyword">import</span> java.util.LinkedHashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Shiro过滤器链，定义访问资源所需的权限</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// @Component(&quot;myShiroFilterChainDefinition&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyShiroFilterChainDefinition</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ShiroFilterChainDefinition</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置过滤器链</span><br><span class="hljs-comment">     * Shiro内置过滤，见org.apache.shiro.web.filter.mgt.DefaultFilter枚举类</span><br><span class="hljs-comment">     * AnonymousFilter（anon），匿名过滤器，允许直接访问资源，无需进行任何的安全检查</span><br><span class="hljs-comment">     * FormAuthenticationFilter（authc），请求需要进行认证方可继续访问，如果没有认证将跳转到认证页面（loginUrl）</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Map&lt;String,String&gt; <span class="hljs-title function_">getFilterChainMap</span><span class="hljs-params">()</span>&#123;<br><br>        Map&lt;String,String&gt; filterChainDefinition = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>        filterChainDefinition.put(<span class="hljs-string">&quot;/login&quot;</span>, DefaultFilter.anon.name());<br>        filterChainDefinition.put(<span class="hljs-string">&quot;/**&quot;</span>, DefaultFilter.anon.name());<br><br>        <span class="hljs-keyword">return</span> filterChainDefinition;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-认证-授权"><a href="#3-认证-授权" class="headerlink" title="(3)认证+授权"></a>(3)认证+授权</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.security;<br><br><br><span class="hljs-keyword">import</span> com.example.demo.constants.AppConstants;<br><span class="hljs-keyword">import</span> com.example.demo.constants.UserStatusEnum;<br><span class="hljs-keyword">import</span> com.example.demo.model.dto.UserDTO;<br><span class="hljs-keyword">import</span> com.example.demo.service.UserService;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.*;<br><span class="hljs-keyword">import</span> org.apache.shiro.authc.credential.CredentialsMatcher;<br><span class="hljs-keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;<br><span class="hljs-keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;<br><span class="hljs-keyword">import</span> org.apache.shiro.subject.PrincipalCollection;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.ByteSource;<br><span class="hljs-keyword">import</span> org.apache.shiro.util.SimpleByteSource;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 提供安全数据：认证信息（如账号、密码）、授权信息（角色、权限）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">// @Component(&quot;authorizer&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoAuthorizingRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthorizingRealm</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 认证信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> AuthenticationException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title function_">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken token)</span> <span class="hljs-keyword">throws</span> AuthenticationException &#123;<br>        <span class="hljs-comment">// 账号、密码</span><br>        <span class="hljs-type">UsernamePasswordToken</span> <span class="hljs-variable">usernamePasswordToken</span> <span class="hljs-operator">=</span> (UsernamePasswordToken)token;<br><br>       <span class="hljs-comment">/* char[] passwordCharArray = usernamePasswordToken.getPassword();</span><br><span class="hljs-comment">        String passwordString = new String(passwordCharArray);</span><br><span class="hljs-comment">        String md5Password = MD5Utils.md5(passwordString);</span><br><span class="hljs-comment">        char[] md5PasswordCharArray = md5Password.toCharArray();</span><br><span class="hljs-comment">        usernamePasswordToken.setPassword(md5PasswordCharArray);*/</span><br><br>        <span class="hljs-comment">// 用户认证（登录）时输入的账号</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> usernamePasswordToken.getUsername();<br>        <span class="hljs-comment">// 数据库中真实的密码</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">UserDTO</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 查询用户</span><br>            user = userService.findByUsername(username);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthenticationException</span>(<span class="hljs-string">&quot;认证失败&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnknownAccountException</span>(<span class="hljs-string">&quot;账号不存在&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(user.getStatus() == <span class="hljs-literal">null</span> ||<br>                user.getStatus().equals(UserStatusEnum.DISABLE.value()))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LockedAccountException</span>(<span class="hljs-string">&quot;账号已被锁定&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 真实密码</span><br>        password = user.getPassword();<br><br>        <span class="hljs-comment">// 认证信息（没加盐，密码：明码或者加密的密码）</span><br>        <span class="hljs-comment">// 密码在凭证匹配器的doCredentialsMatch方法中进行验证</span><br>        <span class="hljs-comment">// 凭证匹配器，如：org.apache.shiro.authc.credential.HashedCredentialsMatcher</span><br>        <span class="hljs-comment">/*SimpleAuthenticationInfo authenticationInfo =</span><br><span class="hljs-comment">                new SimpleAuthenticationInfo(username,password,getName());*/</span><br><br>        <span class="hljs-comment">// 盐</span><br>        <span class="hljs-type">ByteSource</span> <span class="hljs-variable">salt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleByteSource</span>(AppConstants.ENCRYPTION_SALT);<br>        <span class="hljs-type">SimpleAuthenticationInfo</span> <span class="hljs-variable">authenticationInfo</span> <span class="hljs-operator">=</span><br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthenticationInfo</span>(username,password,salt,getName());<br><br>        <span class="hljs-keyword">return</span> authenticationInfo;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 授权信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * 角色判断（多个角色，默认是AND关系）：RolesAuthorizationFilter#isAccessAllowed、AuthorizingRealm#hasAllRoles和hasRole</span><br><span class="hljs-comment">     * 权限判断（多个权限，默认是AND关系）：PermissionsAuthorizationFilter#isAccessAllowed、WildcardPermission#implies</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> principals</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title function_">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principals)</span> &#123;<br>        <span class="hljs-type">SimpleAuthorizationInfo</span> <span class="hljs-variable">authorizationInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleAuthorizationInfo</span>();<br>        <span class="hljs-comment">// authorizationInfo.addRole(&quot;test&quot;);</span><br>        <span class="hljs-comment">// authorizationInfo.addRole(&quot;user&quot;);</span><br>        authorizationInfo.addStringPermission(<span class="hljs-string">&quot;user:query&quot;</span>);<br>        authorizationInfo.addStringPermission(<span class="hljs-string">&quot;user:update&quot;</span>);<br>        authorizationInfo.addStringPermission(<span class="hljs-string">&quot;user:export&quot;</span>);<br><br><br>        <span class="hljs-keyword">return</span> authorizationInfo;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注入凭证匹配器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> credentialsMatcher</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCredentialsMatcher</span><span class="hljs-params">(CredentialsMatcher credentialsMatcher)</span> &#123;<br>        <span class="hljs-built_in">super</span>.setCredentialsMatcher(credentialsMatcher);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-web配置"><a href="#4-web配置" class="headerlink" title="4.web配置"></a>4.web配置</h2><h3 id="1-web全局配置"><a href="#1-web全局配置" class="headerlink" title="(1)web全局配置"></a>(1)web全局配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.config;<br><br><br><span class="hljs-keyword">import</span> com.example.demo.interceptor.AuthInterceptor;<br><span class="hljs-keyword">import</span> com.example.demo.web.filter.CorsFilter;<br><span class="hljs-keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: DingLong</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 2021/6/30 下午3:09</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfiguration</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加拦截器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> registry</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthInterceptor</span>())<br>                <span class="hljs-comment">// 添加路径模式</span><br>                .addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>)<br>                <span class="hljs-comment">// 排除路径模式</span><br>                .excludePathPatterns(<span class="hljs-string">&quot;/login&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * cors过滤器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title function_">corsFilter</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">FilterRegistrationBean</span> <span class="hljs-variable">registrationBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>();<br>        <span class="hljs-comment">// 设置过滤器</span><br>        registrationBean.setFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsFilter</span>());<br>        <span class="hljs-comment">// 添加网址模式</span><br>        registrationBean.addUrlPatterns(<span class="hljs-string">&quot;/*&quot;</span>);<br>        <span class="hljs-comment">// 设置名称</span><br>        registrationBean.setName(<span class="hljs-string">&quot;corsFilter&quot;</span>);<br>        <span class="hljs-comment">// 设置顺序</span><br>        registrationBean.setOrder(<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">return</span> registrationBean;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-认证拦截器"><a href="#2-认证拦截器" class="headerlink" title="(2)认证拦截器"></a>(2)认证拦截器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.interceptor;<br><br><span class="hljs-keyword">import</span> com.example.demo.constants.AppConstants;<br><span class="hljs-keyword">import</span> com.example.demo.exception.AuthException;<br><span class="hljs-keyword">import</span> com.example.demo.utils.JWTUtils;<br><span class="hljs-keyword">import</span> com.example.demo.web.utils.WebUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.lang.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 认证拦截器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HandlerInterceptorAdapter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(AppConstants.ACCESS_TOKEN);<br><br>        <span class="hljs-keyword">if</span>(StringUtils.isBlank(token))&#123;<br>            <span class="hljs-comment">// 未授权（错误代码：401）错误提示</span><br>            WebUtils.sendError(HttpStatus.UNAUTHORIZED.value(),<span class="hljs-string">&quot;缺失token参数&quot;</span>,response);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 核实</span><br>            JWTUtils.verify(token);<br>        &#125; <span class="hljs-keyword">catch</span> (AuthException e) &#123;<br>            <span class="hljs-comment">// 未授权（错误代码：401）错误提示</span><br>            WebUtils.sendError(HttpStatus.UNAUTHORIZED.value(),e.getMessage(),response);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.preHandle(request, response, handler);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-跨域处理过滤器-cors过滤器"><a href="#3-跨域处理过滤器-cors过滤器" class="headerlink" title="(3)跨域处理过滤器(cors过滤器)"></a>(3)跨域处理过滤器(cors过滤器)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.web.filter;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 跨域处理过滤器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CorsFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest)servletRequest;<br>        <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> (HttpServletResponse)servletResponse;<br><br>        <span class="hljs-comment">// 请求方法</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> request.getMethod();<br><br>        <span class="hljs-comment">// 响应头指定了该响应的资源是否被允许与给定的origin共享</span><br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>);<br>        <span class="hljs-comment">// 响应头表示是否可以将对请求的响应暴露给页面。返回true则可以，其他值均不可以。</span><br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Credentials&quot;</span>,<span class="hljs-string">&quot;true&quot;</span>);<br>        <span class="hljs-comment">// 客户端所要访问的资源允许使用的方法或方法列表</span><br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>,<span class="hljs-string">&quot;GET,POST,PUT,DELETE,OPTIONS&quot;</span>);<br>        response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>,<span class="hljs-string">&quot;Content-type,X-Access-Token,Authorization&quot;</span>);<br><br>        <span class="hljs-comment">// 前端HTTP框架Axios会进行两次请求，第一次是OPTIONS请求，判断是否允许跨域</span><br>        <span class="hljs-keyword">if</span>(method.equals(RequestMethod.OPTIONS.name()))&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        filterChain.doFilter(request,response);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="5-工具类utils"><a href="#5-工具类utils" class="headerlink" title="5.工具类utils"></a>5.工具类utils</h2><h3 id="1-AES加密"><a href="#1-AES加密" class="headerlink" title="(1)AES加密"></a>(1)AES加密</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.utils;<br><br><br><span class="hljs-keyword">import</span> javax.crypto.*;<br><span class="hljs-keyword">import</span> javax.crypto.spec.SecretKeySpec;<br><span class="hljs-keyword">import</span> java.security.InvalidKeyException;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><span class="hljs-keyword">import</span> java.security.SecureRandom;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * AES加密</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AESUtils</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 算法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ALGORITHM</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;AES&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 秘钥</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SECRET_BASE64</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MdI5+CuqWggBVrqW7BVRzw==&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> text 明文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] encrypt(<span class="hljs-type">byte</span>[] text)&#123;<br>        <span class="hljs-keyword">return</span> encrypt(text,getDefaultSecret());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> text 明文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> secret 加密秘钥</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] encrypt(<span class="hljs-type">byte</span>[] text,<span class="hljs-type">byte</span>[] secret)&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(ALGORITHM);<br><br>            <span class="hljs-comment">// 将秘钥字符串转换成SecretKey对象</span><br>            <span class="hljs-type">SecretKey</span> <span class="hljs-variable">secretKey</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(secret,ALGORITHM);<br>            <span class="hljs-comment">// 初始化，指定模式：加密，并设置加密秘钥</span><br>            cipher.init(Cipher.ENCRYPT_MODE,secretKey);<br><br>            <span class="hljs-comment">// 加密</span><br>            <span class="hljs-keyword">return</span> cipher.doFinal(text);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchPaddingException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InvalidKeyException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalBlockSizeException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (BadPaddingException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> encryptedText 密文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] decrypt(<span class="hljs-type">byte</span>[] encryptedText)&#123;<br>        <span class="hljs-keyword">return</span> decrypt(encryptedText,getDefaultSecret());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> encryptedText 密文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> secret 解密秘钥</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] decrypt(<span class="hljs-type">byte</span>[] encryptedText,<span class="hljs-type">byte</span>[] secret)&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(ALGORITHM);<br><br>            <span class="hljs-comment">// 将秘钥字符串转换成SecretKey对象</span><br>            <span class="hljs-type">SecretKey</span> <span class="hljs-variable">secretKey</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(secret,ALGORITHM);<br>            <span class="hljs-comment">// 初始化，指定模式：解密，并设置解密秘钥</span><br>            cipher.init(Cipher.DECRYPT_MODE,secretKey);<br><br>            <span class="hljs-comment">// 解密</span><br>            <span class="hljs-keyword">return</span> cipher.doFinal(encryptedText);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchPaddingException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (InvalidKeyException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalBlockSizeException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (BadPaddingException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成秘钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] generateSecretKey()&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">KeyGenerator</span> <span class="hljs-variable">keyGenerator</span> <span class="hljs-operator">=</span> KeyGenerator.getInstance(ALGORITHM);<br>            <span class="hljs-comment">// 初始化，设置秘钥长度和随机数</span><br>            keyGenerator.init(<span class="hljs-number">128</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureRandom</span>());<br>            <span class="hljs-comment">// 生成秘钥</span><br>            <span class="hljs-type">SecretKey</span> <span class="hljs-variable">secretKey</span> <span class="hljs-operator">=</span> keyGenerator.generateKey();<br><br>            <span class="hljs-keyword">return</span> secretKey.getEncoded();<br><br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成秘钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> Base64字符串格式秘钥</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateSecretKeyAsBase64String</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">byte</span>[] secret = generateSecretKey();<br>        <span class="hljs-keyword">return</span> Base64.getEncoder().encodeToString(secret);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取默认秘钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] getDefaultSecret()&#123;<br>        <span class="hljs-keyword">return</span> Base64.getDecoder().decode(SECRET_BASE64);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将Base64字符串格式的秘钥还原成字节数组</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> secretBase64String</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] secretBase64StringToBytes(String secretBase64String)&#123;<br>        <span class="hljs-keyword">return</span> Base64.getDecoder().decode(secretBase64String);<br>    &#125;<br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 明文</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJwYXNzd29yZCI6ImFiYzEyMyEiLCJleHAiOjE1OTk4MjA3MzksInVzZXJJZCI6IjEyMzMyMTQ1NjY1NCIsInVzZXJuYW1lIjoiYWRtaW4ifQ.oLAnZ8WdW1NRJ5tTbQK6sC-Xpr_SHU3HiiYkOwco5wmak6vROg3ubwn1g0pxRz54JrJ-zPP8KCL4b0ABBU3nRg&quot;</span>;<br>            <span class="hljs-comment">// 密文</span><br>            <span class="hljs-type">byte</span>[] encryptedText = encrypt(text.getBytes());<br><br>            <span class="hljs-comment">// 解密</span><br>            <span class="hljs-type">byte</span>[]  decryptedText = decrypt(encryptedText);<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(decryptedText));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-MD5加密工具类"><a href="#2-MD5加密工具类" class="headerlink" title="(2)MD5加密工具类"></a>(2)MD5加密工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.utils;<br><br><span class="hljs-keyword">import</span> com.example.demo.constants.AppConstants;<br><span class="hljs-keyword">import</span> org.apache.shiro.crypto.hash.SimpleHash;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * MD5加密工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MD5Utils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(md5(<span class="hljs-string">&quot;123&quot;</span>));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">md5</span><span class="hljs-params">(String str)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 简单哈希(算法名称,来源,盐,哈希迭代)</span><br>            <span class="hljs-type">SimpleHash</span> <span class="hljs-variable">hash</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleHash</span>(AppConstants.ENCRYPTION_ALG_MD5,<br>                    str, AppConstants.ENCRYPTION_SALT,<br>                    AppConstants.ENCRYPTION_HASH_ITERATIONS);<br>            <span class="hljs-keyword">return</span> hash.toHex();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-JWT工具类"><a href="#3-JWT工具类" class="headerlink" title="(3)JWT工具类"></a>(3)JWT工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.utils;<br><br><span class="hljs-keyword">import</span> com.auth0.jwt.JWT;<br><span class="hljs-keyword">import</span> com.auth0.jwt.JWTVerifier;<br><span class="hljs-keyword">import</span> com.auth0.jwt.algorithms.Algorithm;<br><span class="hljs-keyword">import</span> com.auth0.jwt.exceptions.AlgorithmMismatchException;<br><span class="hljs-keyword">import</span> com.auth0.jwt.exceptions.SignatureVerificationException;<br><span class="hljs-keyword">import</span> com.auth0.jwt.exceptions.TokenExpiredException;<br><span class="hljs-keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;<br><span class="hljs-keyword">import</span> com.example.demo.exception.AuthException;<br><span class="hljs-keyword">import</span> org.apache.commons.codec.binary.Base64;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * JWT工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JWTUtils</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 签名算法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ALGORITHM</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HMAC512&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * CLAIM</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CLAIM_USER_ID</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;userId&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CLAIM_USERNAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;username&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CLAIM_PASSWORD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;password&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 过期时间（分钟）</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">EXPIRE_TIME</span> <span class="hljs-operator">=</span> <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span> ;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * token签名算法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> secret 签名秘钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Algorithm <span class="hljs-title function_">getAlgorithm</span><span class="hljs-params">(String secret)</span>&#123;<br>        <span class="hljs-keyword">return</span> Algorithm.HMAC512(secret);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">createToken</span><span class="hljs-params">(String userId,String username,String password)</span>&#123;<br>        <span class="hljs-comment">// 头信息（JWT头）</span><br>        Map&lt;String,Object&gt; header = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        header.put(<span class="hljs-string">&quot;alg&quot;</span>,ALGORITHM);<br>        header.put(<span class="hljs-string">&quot;typ&quot;</span>,<span class="hljs-string">&quot;JWT&quot;</span>);<br><br>        <span class="hljs-comment">// 过期时间</span><br>        <span class="hljs-type">Date</span> <span class="hljs-variable">expireTime</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(System.currentTimeMillis() + EXPIRE_TIME);<br><br>        <span class="hljs-comment">// 创建token</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> JWT.create().withHeader(header)<br>                <span class="hljs-comment">// userId、username、password为有效荷载部分</span><br>                .withClaim(CLAIM_USER_ID,userId)<br>                .withClaim(CLAIM_USERNAME,username)<br>                .withClaim(CLAIM_PASSWORD,password)<br>                .withExpiresAt(expireTime)<br>                .sign(getAlgorithm(password));<br><br>        <span class="hljs-comment">// 对token进行加密</span><br>        <span class="hljs-keyword">return</span> encryptToken(token);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 对token进行加密</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encryptToken</span><span class="hljs-params">(String token)</span>&#123;<br>        <span class="hljs-comment">// 对token进行加密</span><br>        <span class="hljs-type">byte</span>[] encryptedToken = AESUtils.encrypt(token.getBytes());<br>        <span class="hljs-comment">// 返回Base64格式字符串</span><br>        <span class="hljs-keyword">return</span> Base64.encodeBase64URLSafeString(encryptedToken);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解密token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> encryptedBase64Token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">decryptToken</span><span class="hljs-params">(String encryptedBase64Token)</span>&#123;<br>        <span class="hljs-comment">// Base64解码，还原成字节数组</span><br>        <span class="hljs-type">byte</span>[] decodeBase64Token = Base64.decodeBase64(encryptedBase64Token);<br>        <span class="hljs-comment">// 解密</span><br>        <span class="hljs-type">byte</span>[] decryptedToken = AESUtils.decrypt(decodeBase64Token);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(decryptedToken);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * token校验</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">verify</span><span class="hljs-params">(String token)</span> <span class="hljs-keyword">throws</span> AuthException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 解密token</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">decryptedToken</span> <span class="hljs-operator">=</span> decryptToken(token);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">secret</span> <span class="hljs-operator">=</span> getPayload(decryptedToken,CLAIM_PASSWORD);<br><br>            <span class="hljs-comment">// 获取secret的算法</span><br>            <span class="hljs-type">JWTVerifier</span> <span class="hljs-variable">verifier</span> <span class="hljs-operator">=</span>JWT.require(getAlgorithm(secret)).build();<br>            <span class="hljs-comment">// 核实</span><br>            verifier.verify(decryptedToken);<br>        &#125; <span class="hljs-keyword">catch</span> (AlgorithmMismatchException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthException</span>(<span class="hljs-string">&quot;token算法不匹配&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (SignatureVerificationException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthException</span>(<span class="hljs-string">&quot;token签名无效&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (TokenExpiredException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthException</span>(<span class="hljs-string">&quot;token已经过期&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AuthException</span>(<span class="hljs-string">&quot;token无效&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 从token中获取claim信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> token</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getPayload</span><span class="hljs-params">(String token,String name)</span>&#123;<br>        <span class="hljs-type">DecodedJWT</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> JWT.decode(token);<br>        <span class="hljs-keyword">return</span> jwt.getClaim(name).asString();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-ID生成器"><a href="#4-ID生成器" class="headerlink" title="(4)ID生成器"></a>(4)ID生成器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.utils;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ID生成器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IdGenerator</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">TwitterSnowflakeIdGenerator</span> <span class="hljs-variable">generator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TwitterSnowflakeIdGenerator</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">generate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> generator.nextId2();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.utils;<br><br><span class="hljs-comment">/** twitter Snowflake */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TwitterSnowflakeIdGenerator</span> &#123;<br>    <span class="hljs-comment">//基准时间</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">twepoch</span> <span class="hljs-operator">=</span> <span class="hljs-number">1288834974657L</span>;<br>    <span class="hljs-comment">//机器标识位数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">workerIdBits</span> <span class="hljs-operator">=</span> <span class="hljs-number">5L</span>;<br>    <span class="hljs-comment">//机器ID最大值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">maxWorkerId</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; workerIdBits);<br>    <span class="hljs-comment">//数据中心标识位数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">datacenterIdBits</span> <span class="hljs-operator">=</span> <span class="hljs-number">5L</span>;<br>    <span class="hljs-comment">//数据中心ID最大值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">maxDatacenterId</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; datacenterIdBits);<br>    <span class="hljs-comment">//序列号识位数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">sequenceBits</span> <span class="hljs-operator">=</span> <span class="hljs-number">12L</span>;<br>    <span class="hljs-comment">//机器ID左移位数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">workerIdShift</span> <span class="hljs-operator">=</span> sequenceBits;<br>    <span class="hljs-comment">//数据中心ID左移位数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">datacenterIdShift</span> <span class="hljs-operator">=</span> sequenceBits + workerIdBits;<br>    <span class="hljs-comment">//时间毫秒左移位数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">timestampLeftShift</span> <span class="hljs-operator">=</span> sequenceBits + workerIdBits + datacenterIdBits;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">sequenceMask</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span> ^ (-<span class="hljs-number">1L</span> &lt;&lt; sequenceBits);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> workerId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> datacenterId;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">sequence</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">lastTimestamp</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1L</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TwitterSnowflakeIdGenerator</span><span class="hljs-params">(<span class="hljs-type">long</span> workerId, <span class="hljs-type">long</span> datacenterId)</span> &#123;<br>        <span class="hljs-keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(String.format(<span class="hljs-string">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxWorkerId));<br>        &#125;<br>        <span class="hljs-keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(String.format(<span class="hljs-string">&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxDatacenterId));<br>        &#125;<br>        <span class="hljs-built_in">this</span>.workerId = workerId;<br>        <span class="hljs-built_in">this</span>.datacenterId = datacenterId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">long</span> <span class="hljs-title function_">nextId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> timeGen();<br>        <span class="hljs-keyword">if</span> (timestamp &lt; lastTimestamp) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(String.format(<span class="hljs-string">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span>, lastTimestamp - timestamp));<br>        &#125;<br>        <span class="hljs-keyword">if</span> (lastTimestamp == timestamp) &#123;<br>            sequence = (sequence + <span class="hljs-number">1</span>) &amp; sequenceMask;<br>            <span class="hljs-keyword">if</span> (sequence == <span class="hljs-number">0</span>) &#123;<br>                timestamp = tilNextMillis(lastTimestamp);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            sequence = <span class="hljs-number">0L</span>;<br>        &#125;<br><br>        lastTimestamp = timestamp;<br><br>        <span class="hljs-keyword">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) | (datacenterId &lt;&lt; datacenterIdShift) | (workerId &lt;&lt; workerIdShift) | sequence;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">long</span> <span class="hljs-title function_">nextId2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> nextId();<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-title function_">tilNextMillis</span><span class="hljs-params">(<span class="hljs-type">long</span> lastTimestamp)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> timeGen();<br>        <span class="hljs-keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;<br>            timestamp = timeGen();<br>        &#125;<br>        <span class="hljs-keyword">return</span> timestamp;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">long</span> <span class="hljs-title function_">timeGen</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> System.currentTimeMillis();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">14</span>; i++) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.example.demo.utils.TwitterSnowflakeIdGenerator(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>).nextId());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-验证工具类"><a href="#5-验证工具类" class="headerlink" title="(5)验证工具类"></a>(5)验证工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.utils;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证工具类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanUtils</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">copyProperties</span><span class="hljs-params">(Object source, Class&lt;T&gt; targetClass)</span>&#123;<br>        <span class="hljs-keyword">if</span>(source == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">T</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> targetClass.newInstance();<br>            org.springframework.beans.BeanUtils.copyProperties(source,target);<br>            <span class="hljs-keyword">return</span> target;<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6-WebUtils"><a href="#6-WebUtils" class="headerlink" title="(6)WebUtils"></a>(6)WebUtils</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.web.utils;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * WebUtils</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebUtils</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断是否是AJAX请求</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> request</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAjax</span><span class="hljs-params">(HttpServletRequest request)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">xRequestWith</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;X-Requested-With&quot;</span>);<br>        <span class="hljs-keyword">if</span>(xRequestWith != <span class="hljs-literal">null</span> &amp;&amp; !<span class="hljs-string">&quot;&quot;</span>.equals(xRequestWith.trim())<br>                &amp;&amp; <span class="hljs-string">&quot;XMLHttpRequest&quot;</span>.equals(xRequestWith))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送错误消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> errorMessage 错误消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response 响应对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendError</span><span class="hljs-params">(String errorMessage, HttpServletResponse response)</span>&#123;<br>        sendError(HttpStatus.INTERNAL_SERVER_ERROR.value(),errorMessage,response);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送错误消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code 错误码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> errorMessage 错误消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> response 响应对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendError</span><span class="hljs-params">(<span class="hljs-type">int</span> code,String errorMessage, HttpServletResponse response)</span>&#123;<br>        <span class="hljs-type">ResponseResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> ResponseResult.get();<br>        result.error(code,errorMessage);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 将Java对象转换为JSON字符串</span><br>            <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">jsonErrorMessage</span> <span class="hljs-operator">=</span> objectMapper.writeValueAsString(result);<br><br>            <span class="hljs-comment">// 响应</span><br>            response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            response.setContentType(<span class="hljs-string">&quot;application/json&quot;</span>);<br>            response.getWriter().write(jsonErrorMessage);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-响应结果类ResponseResult"><a href="#7-响应结果类ResponseResult" class="headerlink" title="(7)响应结果类ResponseResult"></a>(7)响应结果类ResponseResult</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.web.utils;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 响应结果</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseResult</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_CODE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;code&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_MESSAGE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;message&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_DATA</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;data&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">KEY_DATA_TOTAL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;total&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">CODE_DEFAULT</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_SUCCESS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;操作成功&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">MESSAGE_FAILURE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;操作失败&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 状态码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> CODE_DEFAULT;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 状态消息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> MESSAGE_SUCCESS;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 响应数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> T data;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数据条数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Integer total;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> com.example.demo.web.utils.ResponseResult <span class="hljs-title function_">get</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.example.demo.web.utils.ResponseResult();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">success</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.code = CODE_DEFAULT;<br>        <span class="hljs-built_in">this</span>.message = MESSAGE_SUCCESS;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">success</span><span class="hljs-params">(String message)</span>&#123;<br>        <span class="hljs-built_in">this</span>.code = CODE_DEFAULT;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.code = <span class="hljs-number">500</span>;<br>        <span class="hljs-built_in">this</span>.message = MESSAGE_FAILURE;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(String error)</span>&#123;<br>        <span class="hljs-built_in">this</span>.code = <span class="hljs-number">500</span>;<br>        <span class="hljs-built_in">this</span>.message = error;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(<span class="hljs-type">int</span> code,String error)</span>&#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.message = error;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCode</span><span class="hljs-params">(<span class="hljs-type">int</span> code)</span> &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMessage</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setData</span><span class="hljs-params">(T data)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getTotal</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> total;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTotal</span><span class="hljs-params">(Integer total)</span> &#123;<br>        <span class="hljs-built_in">this</span>.total = total;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-处理控制器响应的json数据"><a href="#6-处理控制器响应的json数据" class="headerlink" title="6.处理控制器响应的json数据"></a>6.处理控制器响应的json数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.config;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.<span class="hljs-keyword">module</span>.SimpleModule;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ser.std.ToStringSerializer;<br><span class="hljs-keyword">import</span> org.springframework.boot.jackson.JsonComponent;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 处理控制器响应的json数据</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@JsonComponent</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonSerializerConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ObjectMapper <span class="hljs-title function_">jacksonObjectMapper</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>        <span class="hljs-comment">// 设置日期格式：yyyy-MM-dd HH:mm:ss</span><br>        objectMapper.setDateFormat(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br><br>        <span class="hljs-comment">// 序列化时，允许null值</span><br>        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);<br>        <span class="hljs-comment">// 结果为null时不抛异常</span><br>        objectMapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, <span class="hljs-literal">false</span>);<br><br>        <span class="hljs-comment">// 序列换成json时,将所有的long变成string,因为js中数的字类型不能包含所有的java long值</span><br>        <span class="hljs-type">SimpleModule</span> <span class="hljs-variable">simpleModule</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleModule</span>();<br>        <span class="hljs-comment">// Long的封装类型</span><br>        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);<br>        <span class="hljs-comment">// Long的原始类型</span><br>        simpleModule.addSerializer(Long.TYPE, ToStringSerializer.instance);<br>        objectMapper.registerModule(simpleModule);<br><br>        <span class="hljs-keyword">return</span> objectMapper;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="7-属性文件配置项AppConstants"><a href="#7-属性文件配置项AppConstants" class="headerlink" title="7.属性文件配置项AppConstants"></a>7.属性文件配置项AppConstants</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.constants;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Value</span> 引用属性文件中的配置项</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppConstants</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 哈希算法：MD5</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ENCRYPTION_ALG_MD5</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MD5&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加密盐</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ENCRYPTION_SALT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spreadk123!&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 哈希迭代次数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">ENCRYPTION_HASH_ITERATIONS</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * HTTP请求token字段名</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ACCESS_TOKEN</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;X-Access-Token&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-Mybatis配置"><a href="#8-Mybatis配置" class="headerlink" title="8.Mybatis配置"></a>8.Mybatis配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.config;<br><br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Mybatis配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(&quot;com.example.demo.dao&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisConfiguration</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>⚠️如果Mybatis的配置文件不放在resources文件夹，需要在pom.xml文件中指定说明</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>Shrio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot整合Mybatis</title>
    <link href="/2021/06/05/SpringBoot%E6%95%B4%E5%90%88Mybatis/"/>
    <url>/2021/06/05/SpringBoot%E6%95%B4%E5%90%88Mybatis/</url>
    
    <content type="html"><![CDATA[<h2 id="1、创建SpringBoot项目"><a href="#1、创建SpringBoot项目" class="headerlink" title="1、创建SpringBoot项目"></a>1、创建SpringBoot项目</h2><p><img src="/2021/06/05/SpringBoot%E6%95%B4%E5%90%88Mybatis/%E6%88%AA%E5%B1%8F2021-06-05%2021.28.19.png"></p><p><img src="/2021/06/05/SpringBoot%E6%95%B4%E5%90%88Mybatis/%E6%88%AA%E5%B1%8F2021-06-05%2021.29.45.png"></p><p><img src="/2021/06/05/SpringBoot%E6%95%B4%E5%90%88Mybatis/%E6%88%AA%E5%B1%8F2021-06-05%2021.30.24.png" alt="截屏2021-06-05 21.30.24"></p><p><img src="/2021/06/05/SpringBoot%E6%95%B4%E5%90%88Mybatis/%E6%88%AA%E5%B1%8F2021-06-05%2021.30.45.png" alt="截屏2021-06-05 21.30.45"></p><h2 id="2、导入依赖-pom-xml"><a href="#2、导入依赖-pom-xml" class="headerlink" title="2、导入依赖(pom.xml)"></a>2、导入依赖(pom.xml)</h2><figure class="highlight xml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3、配置application-yml"><a href="#3、配置application-yml" class="headerlink" title="3、配置application.yml"></a>3、配置application.yml</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-comment"># 端口号</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-comment"># 数据源配置</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/blog?characterEncoding=UTF-8</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">root</span><br><br><br><span class="hljs-attr">mybatis:</span><br>  <span class="hljs-comment"># 配置Mapper映射文件</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:/mapper/*Mapper.xml</span><br>  <span class="hljs-comment"># 配置MyBatis数据返回类型别名（默认别名是类名）</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">com.example.demo.entity</span><br><br><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">com:</span><br>      <span class="hljs-attr">example:</span><br>        <span class="hljs-attr">mapper:</span> <span class="hljs-string">debug</span><br><br></code></pre></td></tr></table></figure><h2 id="4、数据模型层-entity-User-java"><a href="#4、数据模型层-entity-User-java" class="headerlink" title="4、数据模型层(entity)    User.java"></a>4、数据模型层(entity)    User.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.entity;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: DingLong</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 2021/6/5 下午5:51</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String nickname;<br>    <span class="hljs-keyword">private</span> String account;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> status;<br><br>    <span class="hljs-keyword">public</span> Long <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getNickname</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> nickname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNickname</span><span class="hljs-params">(String nickname)</span> &#123;<br>        <span class="hljs-built_in">this</span>.nickname = nickname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAccount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> account;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAccount</span><span class="hljs-params">(String account)</span> &#123;<br>        <span class="hljs-built_in">this</span>.account = account;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getStatus</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> status;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStatus</span><span class="hljs-params">(<span class="hljs-type">int</span> status)</span> &#123;<br>        <span class="hljs-built_in">this</span>.status = status;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, nickname=&#x27;&quot;</span> + nickname + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, account=&#x27;&quot;</span> + account + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, status=&quot;</span> + status +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="5-数据访问层-mapper或dao-UserMapper-java"><a href="#5-数据访问层-mapper或dao-UserMapper-java" class="headerlink" title="5.数据访问层(mapper或dao)    UserMapper.java"></a>5.数据访问层(mapper或dao)    UserMapper.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.mapper;<br><br><span class="hljs-keyword">import</span> com.example.demo.entity.User;<br><span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: DingLong</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 2021/6/5 下午5:52</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br><br>    List&lt;User&gt; <span class="hljs-title function_">select</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="6、业务逻辑层-service"><a href="#6、业务逻辑层-service" class="headerlink" title="6、业务逻辑层(service)"></a>6、业务逻辑层(service)</h2><h3 id="UserService-java"><a href="#UserService-java" class="headerlink" title="UserService.java"></a>UserService.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.service;<br><br><span class="hljs-keyword">import</span> com.example.demo.entity.User;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: DingLong</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 2021/6/5 下午8:53</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    List&lt;User&gt; <span class="hljs-title function_">select</span><span class="hljs-params">()</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="UserServiceImpl-java"><a href="#UserServiceImpl-java" class="headerlink" title="UserServiceImpl.java"></a>UserServiceImpl.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.service.impl;<br><br><span class="hljs-keyword">import</span> com.example.demo.entity.User;<br><span class="hljs-keyword">import</span> com.example.demo.mapper.UserMapper;<br><span class="hljs-keyword">import</span> com.example.demo.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: DingLong</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 2021/6/5 下午8:54</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">select</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.userMapper.select();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="7、业务处理层-controller或web-UserController-java"><a href="#7、业务处理层-controller或web-UserController-java" class="headerlink" title="7、业务处理层(controller或web)    UserController.java"></a>7、业务处理层(controller或web)    UserController.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.controller;<br><br><span class="hljs-keyword">import</span> com.example.demo.entity.User;<br><span class="hljs-keyword">import</span> com.example.demo.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: DingLong</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@time</span>: 2021/6/5 下午8:56</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/userList&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">select</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.userService.select();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8、UserMapper-xml"><a href="#8、UserMapper-xml" class="headerlink" title="8、UserMapper.xml"></a>8、UserMapper.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-meta">    http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.example.demo.mapper.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.example.demo.entity.User&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;nickname&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;nickname&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;account&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;account&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;status&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;INTEGER&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;status&quot;</span> /&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;select&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.example.demo.entity.User&quot;</span>&gt;</span><br>        select * from user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="9、启动类Application-java"><a href="#9、启动类Application-java" class="headerlink" title="9、启动类Application.java"></a>9、启动类Application.java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Application.class, args);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="10、运行后访问地址：http-localhost-8080-user-userList"><a href="#10、运行后访问地址：http-localhost-8080-user-userList" class="headerlink" title="10、运行后访问地址：http://localhost:8080/user/userList"></a>10、运行后访问地址：<a href="http://localhost:8080/user/userList">http://localhost:8080/user/userList</a></h2><h2 id="11、项目结构"><a href="#11、项目结构" class="headerlink" title="11、项目结构"></a>11、项目结构</h2><p><img src="/2021/06/05/SpringBoot%E6%95%B4%E5%90%88Mybatis/%E6%88%AA%E5%B1%8F2021-06-05%2021.46.38.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
